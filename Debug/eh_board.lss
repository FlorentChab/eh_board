
eh_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005950  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000001c  20000000  00005950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  0002001c  2**0
                  CONTENTS
  3 .bss          00000304  2000001c  0000596c  0002001c  2**2
                  ALLOC
  4 .stack        00002000  20000320  00005c70  0002001c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003bf24  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004ad4  00000000  00000000  0005bfc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000955f  00000000  00000000  00060a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000007a0  00000000  00000000  00069ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008f8  00000000  00000000  0006a794  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f832  00000000  00000000  0006b08c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010aa2  00000000  00000000  0008a8be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a02c8  00000000  00000000  0009b360  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000174c  00000000  00000000  0013b628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 23 00 20 91 20 00 00 8d 20 00 00 8d 20 00 00      #. . ... ... ..
	...
      2c:	8d 20 00 00 00 00 00 00 00 00 00 00 8d 20 00 00     . ........... ..
      3c:	8d 20 00 00 8d 20 00 00 8d 20 00 00 8d 20 00 00     . ... ... ... ..
      4c:	8d 20 00 00 8d 20 00 00 8d 20 00 00 8d 20 00 00     . ... ... ... ..
      5c:	8d 20 00 00 0d 10 00 00 1d 10 00 00 2d 10 00 00     . ..........-...
      6c:	3d 10 00 00 4d 10 00 00 5d 10 00 00 7d 1c 00 00     =...M...]...}...
      7c:	8d 1c 00 00 9d 1c 00 00 11 1d 00 00 21 1d 00 00     ............!...
      8c:	31 1d 00 00 41 1d 00 00 51 1d 00 00 45 05 00 00     1...A...Q...E...
      9c:	8d 20 00 00 bd 07 00 00 8d 20 00 00 8d 20 00 00     . ....... ... ..
      ac:	8d 20 00 00 00 00 00 00                             . ......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000001c 	.word	0x2000001c
      d4:	00000000 	.word	0x00000000
      d8:	00005950 	.word	0x00005950

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000020 	.word	0x20000020
     108:	00005950 	.word	0x00005950
     10c:	00005950 	.word	0x00005950
     110:	00000000 	.word	0x00000000

00000114 <_adc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     114:	2000      	movs	r0, #0
     116:	4770      	bx	lr

00000118 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     118:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     11a:	2300      	movs	r3, #0
     11c:	2200      	movs	r2, #0
     11e:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     120:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     122:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     124:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     126:	2100      	movs	r1, #0
     128:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     12a:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     12c:	61c3      	str	r3, [r0, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     12e:	2401      	movs	r4, #1
     130:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     132:	24c0      	movs	r4, #192	; 0xc0
     134:	0164      	lsls	r4, r4, #5
     136:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     138:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     13a:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     13c:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     13e:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     140:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     142:	242a      	movs	r4, #42	; 0x2a
     144:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     146:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     148:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     14a:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     14c:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     14e:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     150:	3c06      	subs	r4, #6
     152:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     154:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     156:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     158:	7541      	strb	r1, [r0, #21]
}
     15a:	bd10      	pop	{r4, pc}

0000015c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     15c:	b5f0      	push	{r4, r5, r6, r7, lr}
     15e:	46ce      	mov	lr, r9
     160:	b500      	push	{lr}
     162:	b09a      	sub	sp, #104	; 0x68
     164:	0005      	movs	r5, r0
     166:	000c      	movs	r4, r1
     168:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     16a:	0008      	movs	r0, r1
     16c:	4bb2      	ldr	r3, [pc, #712]	; (438 <adc_init+0x2dc>)
     16e:	4798      	blx	r3

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     170:	602c      	str	r4, [r5, #0]

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     172:	4ab2      	ldr	r2, [pc, #712]	; (43c <adc_init+0x2e0>)
     174:	6a13      	ldr	r3, [r2, #32]
     176:	2108      	movs	r1, #8
     178:	430b      	orrs	r3, r1
     17a:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     17c:	7822      	ldrb	r2, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     17e:	2305      	movs	r3, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     180:	07d2      	lsls	r2, r2, #31
     182:	d504      	bpl.n	18e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     184:	0018      	movs	r0, r3
     186:	b01a      	add	sp, #104	; 0x68
     188:	bc04      	pop	{r2}
     18a:	4691      	mov	r9, r2
     18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     18e:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     190:	8c13      	ldrh	r3, [r2, #32]
     192:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     194:	2b00      	cmp	r3, #0
     196:	d1fb      	bne.n	190 <adc_init+0x34>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     198:	7822      	ldrb	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     19a:	331c      	adds	r3, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     19c:	0792      	lsls	r2, r2, #30
     19e:	d4f1      	bmi.n	184 <adc_init+0x28>
	module_inst->reference = config->reference;
     1a0:	7873      	ldrb	r3, [r6, #1]
     1a2:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     1a4:	2b00      	cmp	r3, #0
     1a6:	d104      	bne.n	1b2 <adc_init+0x56>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     1a8:	4aa5      	ldr	r2, [pc, #660]	; (440 <adc_init+0x2e4>)
     1aa:	69d3      	ldr	r3, [r2, #28]
     1ac:	2104      	movs	r1, #4
     1ae:	430b      	orrs	r3, r1
     1b0:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
     1b2:	2300      	movs	r3, #0
     1b4:	60ab      	str	r3, [r5, #8]
     1b6:	60eb      	str	r3, [r5, #12]
     1b8:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
     1ba:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     1bc:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     1be:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     1c0:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
     1c2:	0080      	lsls	r0, r0, #2
     1c4:	4b9f      	ldr	r3, [pc, #636]	; (444 <adc_init+0x2e8>)
     1c6:	50c5      	str	r5, [r0, r3]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     1c8:	232a      	movs	r3, #42	; 0x2a
     1ca:	5cf3      	ldrb	r3, [r6, r3]
     1cc:	2b00      	cmp	r3, #0
     1ce:	d105      	bne.n	1dc <adc_init+0x80>
     1d0:	7b33      	ldrb	r3, [r6, #12]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d102      	bne.n	1dc <adc_init+0x80>
		module_inst->software_trigger = true;
     1d6:	3301      	adds	r3, #1
     1d8:	776b      	strb	r3, [r5, #29]
     1da:	e001      	b.n	1e0 <adc_init+0x84>
		module_inst->software_trigger = false;
     1dc:	2300      	movs	r3, #0
     1de:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
     1e0:	682f      	ldr	r7, [r5, #0]
	gclk_chan_conf.source_generator = config->clock_source;
     1e2:	7833      	ldrb	r3, [r6, #0]
     1e4:	466a      	mov	r2, sp
     1e6:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     1e8:	4669      	mov	r1, sp
     1ea:	201e      	movs	r0, #30
     1ec:	4b96      	ldr	r3, [pc, #600]	; (448 <adc_init+0x2ec>)
     1ee:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     1f0:	201e      	movs	r0, #30
     1f2:	4b96      	ldr	r3, [pc, #600]	; (44c <adc_init+0x2f0>)
     1f4:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     1f6:	7934      	ldrb	r4, [r6, #4]
	const uint32_t pinmapping[] = {
     1f8:	2260      	movs	r2, #96	; 0x60
     1fa:	4995      	ldr	r1, [pc, #596]	; (450 <adc_init+0x2f4>)
     1fc:	a802      	add	r0, sp, #8
     1fe:	4b95      	ldr	r3, [pc, #596]	; (454 <adc_init+0x2f8>)
     200:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     202:	2c13      	cmp	r4, #19
     204:	d90b      	bls.n	21e <adc_init+0xc2>
	_adc_configure_ain_pin(index, config->negative_input);
     206:	88f4      	ldrh	r4, [r6, #6]
	const uint32_t pinmapping[] = {
     208:	2260      	movs	r2, #96	; 0x60
     20a:	4991      	ldr	r1, [pc, #580]	; (450 <adc_init+0x2f4>)
     20c:	a802      	add	r0, sp, #8
     20e:	4b91      	ldr	r3, [pc, #580]	; (454 <adc_init+0x2f8>)
     210:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     212:	2c13      	cmp	r4, #19
     214:	d911      	bls.n	23a <adc_init+0xde>
     216:	2400      	movs	r4, #0
	const uint32_t pinmapping[] = {
     218:	4b8e      	ldr	r3, [pc, #568]	; (454 <adc_init+0x2f8>)
     21a:	4699      	mov	r9, r3
     21c:	e01e      	b.n	25c <adc_init+0x100>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     21e:	00a4      	lsls	r4, r4, #2
     220:	ab02      	add	r3, sp, #8
     222:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     224:	a901      	add	r1, sp, #4
     226:	2300      	movs	r3, #0
     228:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     22a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     22c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     22e:	3301      	adds	r3, #1
     230:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     232:	b2c0      	uxtb	r0, r0
     234:	4b88      	ldr	r3, [pc, #544]	; (458 <adc_init+0x2fc>)
     236:	4798      	blx	r3
     238:	e7e5      	b.n	206 <adc_init+0xaa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     23a:	00a4      	lsls	r4, r4, #2
     23c:	ab02      	add	r3, sp, #8
     23e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     240:	a901      	add	r1, sp, #4
     242:	2300      	movs	r3, #0
     244:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     246:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     248:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     24a:	3301      	adds	r3, #1
     24c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     24e:	b2c0      	uxtb	r0, r0
     250:	4b81      	ldr	r3, [pc, #516]	; (458 <adc_init+0x2fc>)
     252:	4798      	blx	r3
     254:	e7df      	b.n	216 <adc_init+0xba>
     256:	3401      	adds	r4, #1
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     258:	2c14      	cmp	r4, #20
     25a:	d018      	beq.n	28e <adc_init+0x132>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     25c:	2301      	movs	r3, #1
     25e:	40a3      	lsls	r3, r4
     260:	6932      	ldr	r2, [r6, #16]
     262:	421a      	tst	r2, r3
     264:	d0f7      	beq.n	256 <adc_init+0xfa>
	const uint32_t pinmapping[] = {
     266:	2260      	movs	r2, #96	; 0x60
     268:	4979      	ldr	r1, [pc, #484]	; (450 <adc_init+0x2f4>)
     26a:	a802      	add	r0, sp, #8
     26c:	47c8      	blx	r9
	if (pin <= _adc_extchannel_msb[index]) {
     26e:	2c13      	cmp	r4, #19
     270:	d8f1      	bhi.n	256 <adc_init+0xfa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     272:	00a3      	lsls	r3, r4, #2
     274:	aa02      	add	r2, sp, #8
     276:	5898      	ldr	r0, [r3, r2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     278:	a901      	add	r1, sp, #4
     27a:	2300      	movs	r3, #0
     27c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     27e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     280:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     282:	3301      	adds	r3, #1
     284:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     286:	b2c0      	uxtb	r0, r0
     288:	4b73      	ldr	r3, [pc, #460]	; (458 <adc_init+0x2fc>)
     28a:	4798      	blx	r3
     28c:	e7e3      	b.n	256 <adc_init+0xfa>
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     28e:	7b73      	ldrb	r3, [r6, #13]
     290:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     292:	7bb2      	ldrb	r2, [r6, #14]
     294:	01d2      	lsls	r2, r2, #7
     296:	4313      	orrs	r3, r2
     298:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     29a:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     29c:	7d33      	ldrb	r3, [r6, #20]
     29e:	01db      	lsls	r3, r3, #7
			| (config->reference);
     2a0:	7872      	ldrb	r2, [r6, #1]
     2a2:	4313      	orrs	r3, r2
     2a4:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2a6:	70bb      	strb	r3, [r7, #2]
	switch (config->resolution) {
     2a8:	78f3      	ldrb	r3, [r6, #3]
     2aa:	2b34      	cmp	r3, #52	; 0x34
     2ac:	d900      	bls.n	2b0 <adc_init+0x154>
     2ae:	e140      	b.n	532 <adc_init+0x3d6>
     2b0:	009b      	lsls	r3, r3, #2
     2b2:	4a6a      	ldr	r2, [pc, #424]	; (45c <adc_init+0x300>)
     2b4:	58d3      	ldr	r3, [r2, r3]
     2b6:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     2b8:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     2ba:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_4;
     2bc:	2102      	movs	r1, #2
     2be:	e01a      	b.n	2f6 <adc_init+0x19a>
		adjres = config->divide_result;
     2c0:	7a71      	ldrb	r1, [r6, #9]
		accumulate = config->accumulate_samples;
     2c2:	7a32      	ldrb	r2, [r6, #8]
		resolution = ADC_RESOLUTION_16BIT;
     2c4:	2010      	movs	r0, #16
     2c6:	e016      	b.n	2f6 <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     2c8:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     2ca:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     2cc:	2101      	movs	r1, #1
     2ce:	e012      	b.n	2f6 <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     2d0:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     2d2:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     2d4:	2100      	movs	r1, #0
     2d6:	e00e      	b.n	2f6 <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2d8:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     2da:	2030      	movs	r0, #48	; 0x30
	uint8_t adjres = 0;
     2dc:	2100      	movs	r1, #0
     2de:	e00a      	b.n	2f6 <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2e0:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     2e2:	2020      	movs	r0, #32
	uint8_t adjres = 0;
     2e4:	2100      	movs	r1, #0
     2e6:	e006      	b.n	2f6 <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2e8:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     2ea:	2000      	movs	r0, #0
	uint8_t adjres = 0;
     2ec:	2100      	movs	r1, #0
     2ee:	e002      	b.n	2f6 <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     2f0:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     2f2:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     2f4:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     2f6:	0109      	lsls	r1, r1, #4
     2f8:	2370      	movs	r3, #112	; 0x70
     2fa:	400b      	ands	r3, r1
     2fc:	4313      	orrs	r3, r2
     2fe:	733b      	strb	r3, [r7, #12]
	Adc *const adc_module = module_inst->hw;
     300:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     302:	8c13      	ldrh	r3, [r2, #32]
     304:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     306:	2b00      	cmp	r3, #0
     308:	d1fb      	bne.n	302 <adc_init+0x1a6>
	if (config->sample_length > 63) {
     30a:	7d72      	ldrb	r2, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
     30c:	3317      	adds	r3, #23
	if (config->sample_length > 63) {
     30e:	2a3f      	cmp	r2, #63	; 0x3f
     310:	d900      	bls.n	314 <adc_init+0x1b8>
     312:	e737      	b.n	184 <adc_init+0x28>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     314:	7bf3      	ldrb	r3, [r6, #15]
     316:	01db      	lsls	r3, r3, #7
     318:	431a      	orrs	r2, r3
     31a:	b2d2      	uxtb	r2, r2
		adc_module->SAMPCTRL.reg =
     31c:	737a      	strb	r2, [r7, #13]
	Adc *const adc_module = module_inst->hw;
     31e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     320:	8c13      	ldrh	r3, [r2, #32]
     322:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     324:	2b00      	cmp	r3, #0
     326:	d1fb      	bne.n	320 <adc_init+0x1c4>
			config->clock_prescaler;
     328:	78b3      	ldrb	r3, [r6, #2]
	adc_module->CTRLB.reg =
     32a:	707b      	strb	r3, [r7, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     32c:	2324      	movs	r3, #36	; 0x24
     32e:	5cf3      	ldrb	r3, [r6, r3]
     330:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     332:	7b32      	ldrb	r2, [r6, #12]
     334:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     336:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     338:	7af3      	ldrb	r3, [r6, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     33a:	4313      	orrs	r3, r2
     33c:	7ab2      	ldrb	r2, [r6, #10]
     33e:	0052      	lsls	r2, r2, #1
     340:	4313      	orrs	r3, r2
     342:	4303      	orrs	r3, r0
	adc_module->CTRLC.reg =
     344:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     346:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     348:	8c13      	ldrh	r3, [r2, #32]
     34a:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     34c:	2b00      	cmp	r3, #0
     34e:	d1fb      	bne.n	348 <adc_init+0x1ec>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     350:	8b32      	ldrh	r2, [r6, #24]
     352:	2a00      	cmp	r2, #0
     354:	d020      	beq.n	398 <adc_init+0x23c>
		switch (resolution) {
     356:	2810      	cmp	r0, #16
     358:	d100      	bne.n	35c <adc_init+0x200>
     35a:	e0c9      	b.n	4f0 <adc_init+0x394>
     35c:	d800      	bhi.n	360 <adc_init+0x204>
     35e:	e083      	b.n	468 <adc_init+0x30c>
     360:	2820      	cmp	r0, #32
     362:	d100      	bne.n	366 <adc_init+0x20a>
     364:	e0a3      	b.n	4ae <adc_init+0x352>
     366:	2830      	cmp	r0, #48	; 0x30
     368:	d116      	bne.n	398 <adc_init+0x23c>
			if (config->differential_mode &&
     36a:	7af3      	ldrb	r3, [r6, #11]
     36c:	2b00      	cmp	r3, #0
     36e:	d00a      	beq.n	386 <adc_init+0x22a>
					(config->window.window_lower_value > 127 ||
     370:	69f1      	ldr	r1, [r6, #28]
     372:	3180      	adds	r1, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     374:	2317      	movs	r3, #23
			if (config->differential_mode &&
     376:	29ff      	cmp	r1, #255	; 0xff
     378:	d900      	bls.n	37c <adc_init+0x220>
     37a:	e703      	b.n	184 <adc_init+0x28>
					config->window.window_lower_value < -128 ||
     37c:	6a31      	ldr	r1, [r6, #32]
     37e:	3180      	adds	r1, #128	; 0x80
     380:	29ff      	cmp	r1, #255	; 0xff
     382:	d900      	bls.n	386 <adc_init+0x22a>
     384:	e6fe      	b.n	184 <adc_init+0x28>
				return STATUS_ERR_INVALID_ARG;
     386:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 255 ||
     388:	69f1      	ldr	r1, [r6, #28]
     38a:	29ff      	cmp	r1, #255	; 0xff
     38c:	dd00      	ble.n	390 <adc_init+0x234>
     38e:	e6f9      	b.n	184 <adc_init+0x28>
     390:	6a31      	ldr	r1, [r6, #32]
     392:	29ff      	cmp	r1, #255	; 0xff
     394:	dd00      	ble.n	398 <adc_init+0x23c>
     396:	e6f5      	b.n	184 <adc_init+0x28>
	adc_module->CTRLC.reg |= config->window.window_mode;
     398:	897b      	ldrh	r3, [r7, #10]
     39a:	431a      	orrs	r2, r3
     39c:	817a      	strh	r2, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     39e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3a0:	8c13      	ldrh	r3, [r2, #32]
     3a2:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     3a4:	2b00      	cmp	r3, #0
     3a6:	d1fb      	bne.n	3a0 <adc_init+0x244>
	adc_module->WINLT.reg =
     3a8:	8bb3      	ldrh	r3, [r6, #28]
     3aa:	81fb      	strh	r3, [r7, #14]
	Adc *const adc_module = module_inst->hw;
     3ac:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3ae:	8c13      	ldrh	r3, [r2, #32]
     3b0:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     3b2:	2b00      	cmp	r3, #0
     3b4:	d1fb      	bne.n	3ae <adc_init+0x252>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     3b6:	8c33      	ldrh	r3, [r6, #32]
     3b8:	823b      	strh	r3, [r7, #16]
	Adc *const adc_module = module_inst->hw;
     3ba:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3bc:	8c13      	ldrh	r3, [r2, #32]
     3be:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     3c0:	2b00      	cmp	r3, #0
     3c2:	d1fb      	bne.n	3bc <adc_init+0x260>
			config->positive_input;
     3c4:	7933      	ldrb	r3, [r6, #4]
			config->negative_input |
     3c6:	88f2      	ldrh	r2, [r6, #6]
     3c8:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     3ca:	813b      	strh	r3, [r7, #8]
	Adc *const adc_module = module_inst->hw;
     3cc:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3ce:	8c13      	ldrh	r3, [r2, #32]
     3d0:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     3d2:	2b00      	cmp	r3, #0
     3d4:	d1fb      	bne.n	3ce <adc_init+0x272>
	adc_module->EVCTRL.reg = config->event_action;
     3d6:	332a      	adds	r3, #42	; 0x2a
     3d8:	5cf3      	ldrb	r3, [r6, r3]
     3da:	70fb      	strb	r3, [r7, #3]
	adc_module->INTENCLR.reg =
     3dc:	2307      	movs	r3, #7
     3de:	713b      	strb	r3, [r7, #4]
	if (config->correction.correction_enable){
     3e0:	331d      	adds	r3, #29
     3e2:	5cf3      	ldrb	r3, [r6, r3]
     3e4:	2b00      	cmp	r3, #0
     3e6:	d01b      	beq.n	420 <adc_init+0x2c4>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     3e8:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
     3ea:	491d      	ldr	r1, [pc, #116]	; (460 <adc_init+0x304>)
			return STATUS_ERR_INVALID_ARG;
     3ec:	2317      	movs	r3, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     3ee:	428a      	cmp	r2, r1
     3f0:	d900      	bls.n	3f4 <adc_init+0x298>
     3f2:	e6c7      	b.n	184 <adc_init+0x28>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     3f4:	827a      	strh	r2, [r7, #18]
	Adc *const adc_module = module_inst->hw;
     3f6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     3f8:	8c13      	ldrh	r3, [r2, #32]
     3fa:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     3fc:	2b00      	cmp	r3, #0
     3fe:	d1fb      	bne.n	3f8 <adc_init+0x29c>
		if (config->correction.offset_correction > 2047 ||
     400:	8d31      	ldrh	r1, [r6, #40]	; 0x28
     402:	2380      	movs	r3, #128	; 0x80
     404:	011b      	lsls	r3, r3, #4
     406:	18ca      	adds	r2, r1, r3
     408:	4815      	ldr	r0, [pc, #84]	; (460 <adc_init+0x304>)
     40a:	b292      	uxth	r2, r2
			return STATUS_ERR_INVALID_ARG;
     40c:	2317      	movs	r3, #23
		if (config->correction.offset_correction > 2047 ||
     40e:	4282      	cmp	r2, r0
     410:	d900      	bls.n	414 <adc_init+0x2b8>
     412:	e6b7      	b.n	184 <adc_init+0x28>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     414:	82b9      	strh	r1, [r7, #20]
	Adc *const adc_module = module_inst->hw;
     416:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     418:	8c13      	ldrh	r3, [r2, #32]
     41a:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     41c:	2b00      	cmp	r3, #0
     41e:	d1fb      	bne.n	418 <adc_init+0x2bc>
			ADC_CALIB_BIASREFBUF(
     420:	4b10      	ldr	r3, [pc, #64]	; (464 <adc_init+0x308>)
     422:	681b      	ldr	r3, [r3, #0]
     424:	021a      	lsls	r2, r3, #8
     426:	21e0      	movs	r1, #224	; 0xe0
     428:	00c9      	lsls	r1, r1, #3
     42a:	400a      	ands	r2, r1
			ADC_CALIB_BIASCOMP(
     42c:	069b      	lsls	r3, r3, #26
     42e:	0f5b      	lsrs	r3, r3, #29
			) |
     430:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     432:	85bb      	strh	r3, [r7, #44]	; 0x2c
	return STATUS_OK;
     434:	2300      	movs	r3, #0
     436:	e6a5      	b.n	184 <adc_init+0x28>
     438:	00000115 	.word	0x00000115
     43c:	40000400 	.word	0x40000400
     440:	40001400 	.word	0x40001400
     444:	200000c8 	.word	0x200000c8
     448:	000014e5 	.word	0x000014e5
     44c:	00001475 	.word	0x00001475
     450:	00005660 	.word	0x00005660
     454:	00005579 	.word	0x00005579
     458:	000015e1 	.word	0x000015e1
     45c:	0000558c 	.word	0x0000558c
     460:	00000fff 	.word	0x00000fff
     464:	00806020 	.word	0x00806020
		switch (resolution) {
     468:	2800      	cmp	r0, #0
     46a:	d195      	bne.n	398 <adc_init+0x23c>
			if (config->differential_mode &&
     46c:	7af3      	ldrb	r3, [r6, #11]
     46e:	2b00      	cmp	r3, #0
     470:	d012      	beq.n	498 <adc_init+0x33c>
					(config->window.window_lower_value > 2047 ||
     472:	69f3      	ldr	r3, [r6, #28]
     474:	2080      	movs	r0, #128	; 0x80
     476:	0100      	lsls	r0, r0, #4
     478:	4684      	mov	ip, r0
     47a:	4463      	add	r3, ip
     47c:	0019      	movs	r1, r3
			if (config->differential_mode &&
     47e:	482e      	ldr	r0, [pc, #184]	; (538 <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     480:	2317      	movs	r3, #23
			if (config->differential_mode &&
     482:	4281      	cmp	r1, r0
     484:	d900      	bls.n	488 <adc_init+0x32c>
     486:	e67d      	b.n	184 <adc_init+0x28>
					config->window.window_lower_value < -2048 ||
     488:	6a33      	ldr	r3, [r6, #32]
     48a:	4463      	add	r3, ip
     48c:	0019      	movs	r1, r3
     48e:	482a      	ldr	r0, [pc, #168]	; (538 <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     490:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
     492:	4281      	cmp	r1, r0
     494:	d900      	bls.n	498 <adc_init+0x33c>
     496:	e675      	b.n	184 <adc_init+0x28>
			} else if (config->window.window_lower_value > 4095 ||
     498:	4927      	ldr	r1, [pc, #156]	; (538 <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     49a:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 4095 ||
     49c:	69f0      	ldr	r0, [r6, #28]
     49e:	4288      	cmp	r0, r1
     4a0:	dd00      	ble.n	4a4 <adc_init+0x348>
     4a2:	e66f      	b.n	184 <adc_init+0x28>
     4a4:	6a30      	ldr	r0, [r6, #32]
     4a6:	4288      	cmp	r0, r1
     4a8:	dd00      	ble.n	4ac <adc_init+0x350>
     4aa:	e66b      	b.n	184 <adc_init+0x28>
     4ac:	e774      	b.n	398 <adc_init+0x23c>
			if (config->differential_mode &&
     4ae:	7af3      	ldrb	r3, [r6, #11]
     4b0:	2b00      	cmp	r3, #0
     4b2:	d012      	beq.n	4da <adc_init+0x37e>
					(config->window.window_lower_value > 511 ||
     4b4:	69f3      	ldr	r3, [r6, #28]
     4b6:	2080      	movs	r0, #128	; 0x80
     4b8:	0080      	lsls	r0, r0, #2
     4ba:	4684      	mov	ip, r0
     4bc:	4463      	add	r3, ip
     4be:	0019      	movs	r1, r3
			if (config->differential_mode &&
     4c0:	481e      	ldr	r0, [pc, #120]	; (53c <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     4c2:	2317      	movs	r3, #23
			if (config->differential_mode &&
     4c4:	4281      	cmp	r1, r0
     4c6:	d900      	bls.n	4ca <adc_init+0x36e>
     4c8:	e65c      	b.n	184 <adc_init+0x28>
					config->window.window_lower_value < -512 ||
     4ca:	6a33      	ldr	r3, [r6, #32]
     4cc:	4463      	add	r3, ip
     4ce:	0019      	movs	r1, r3
     4d0:	481a      	ldr	r0, [pc, #104]	; (53c <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     4d2:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
     4d4:	4281      	cmp	r1, r0
     4d6:	d900      	bls.n	4da <adc_init+0x37e>
     4d8:	e654      	b.n	184 <adc_init+0x28>
			} else if (config->window.window_lower_value > 1023 ||
     4da:	4918      	ldr	r1, [pc, #96]	; (53c <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     4dc:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 1023 ||
     4de:	69f0      	ldr	r0, [r6, #28]
     4e0:	4288      	cmp	r0, r1
     4e2:	dd00      	ble.n	4e6 <adc_init+0x38a>
     4e4:	e64e      	b.n	184 <adc_init+0x28>
     4e6:	6a30      	ldr	r0, [r6, #32]
     4e8:	4288      	cmp	r0, r1
     4ea:	dd00      	ble.n	4ee <adc_init+0x392>
     4ec:	e64a      	b.n	184 <adc_init+0x28>
     4ee:	e753      	b.n	398 <adc_init+0x23c>
			if (config->differential_mode &&
     4f0:	7af3      	ldrb	r3, [r6, #11]
     4f2:	2b00      	cmp	r3, #0
     4f4:	d012      	beq.n	51c <adc_init+0x3c0>
					(config->window.window_lower_value > 32767 ||
     4f6:	69f3      	ldr	r3, [r6, #28]
     4f8:	2080      	movs	r0, #128	; 0x80
     4fa:	0200      	lsls	r0, r0, #8
     4fc:	4684      	mov	ip, r0
     4fe:	4463      	add	r3, ip
     500:	0019      	movs	r1, r3
			if (config->differential_mode &&
     502:	480f      	ldr	r0, [pc, #60]	; (540 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     504:	2317      	movs	r3, #23
			if (config->differential_mode &&
     506:	4281      	cmp	r1, r0
     508:	d900      	bls.n	50c <adc_init+0x3b0>
     50a:	e63b      	b.n	184 <adc_init+0x28>
					config->window.window_lower_value < -32768 ||
     50c:	6a33      	ldr	r3, [r6, #32]
     50e:	4463      	add	r3, ip
     510:	0019      	movs	r1, r3
     512:	480b      	ldr	r0, [pc, #44]	; (540 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     514:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
     516:	4281      	cmp	r1, r0
     518:	d900      	bls.n	51c <adc_init+0x3c0>
     51a:	e633      	b.n	184 <adc_init+0x28>
			} else if (config->window.window_lower_value > 65535 ||
     51c:	4908      	ldr	r1, [pc, #32]	; (540 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     51e:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 65535 ||
     520:	69f0      	ldr	r0, [r6, #28]
     522:	4288      	cmp	r0, r1
     524:	dd00      	ble.n	528 <adc_init+0x3cc>
     526:	e62d      	b.n	184 <adc_init+0x28>
     528:	6a30      	ldr	r0, [r6, #32]
     52a:	4288      	cmp	r0, r1
     52c:	dd00      	ble.n	530 <adc_init+0x3d4>
     52e:	e629      	b.n	184 <adc_init+0x28>
     530:	e732      	b.n	398 <adc_init+0x23c>
		return STATUS_ERR_INVALID_ARG;
     532:	2317      	movs	r3, #23
     534:	e626      	b.n	184 <adc_init+0x28>
     536:	46c0      	nop			; (mov r8, r8)
     538:	00000fff 	.word	0x00000fff
     53c:	000003ff 	.word	0x000003ff
     540:	0000ffff 	.word	0x0000ffff

00000544 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
     544:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     546:	4b2e      	ldr	r3, [pc, #184]	; (600 <ADC_Handler+0xbc>)
     548:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
     54a:	6823      	ldr	r3, [r4, #0]
     54c:	799d      	ldrb	r5, [r3, #6]
     54e:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
     550:	07ea      	lsls	r2, r5, #31
     552:	d52d      	bpl.n	5b0 <ADC_Handler+0x6c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     554:	7ee2      	ldrb	r2, [r4, #27]
     556:	07d2      	lsls	r2, r2, #31
     558:	d52a      	bpl.n	5b0 <ADC_Handler+0x6c>
     55a:	7ea2      	ldrb	r2, [r4, #26]
     55c:	07d2      	lsls	r2, r2, #31
     55e:	d527      	bpl.n	5b0 <ADC_Handler+0x6c>
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     560:	2201      	movs	r2, #1
     562:	719a      	strb	r2, [r3, #6]
			*(module->job_buffer++) = module->hw->RESULT.reg;
     564:	6962      	ldr	r2, [r4, #20]
     566:	1c93      	adds	r3, r2, #2
     568:	6163      	str	r3, [r4, #20]
     56a:	6823      	ldr	r3, [r4, #0]
     56c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     56e:	b29b      	uxth	r3, r3
     570:	8013      	strh	r3, [r2, #0]
			if (--module->remaining_conversions > 0) {
     572:	8b23      	ldrh	r3, [r4, #24]
     574:	3b01      	subs	r3, #1
     576:	b29b      	uxth	r3, r3
     578:	8323      	strh	r3, [r4, #24]
     57a:	2b00      	cmp	r3, #0
     57c:	d015      	beq.n	5aa <ADC_Handler+0x66>
				if (module->software_trigger == true
     57e:	7f63      	ldrb	r3, [r4, #29]
     580:	2b00      	cmp	r3, #0
     582:	d015      	beq.n	5b0 <ADC_Handler+0x6c>
					&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     584:	6822      	ldr	r2, [r4, #0]
     586:	79d3      	ldrb	r3, [r2, #7]
     588:	b25b      	sxtb	r3, r3
     58a:	2b00      	cmp	r3, #0
     58c:	db10      	blt.n	5b0 <ADC_Handler+0x6c>
     58e:	8c13      	ldrh	r3, [r2, #32]
     590:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     592:	2b00      	cmp	r3, #0
     594:	d1fb      	bne.n	58e <ADC_Handler+0x4a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     596:	7e13      	ldrb	r3, [r2, #24]
     598:	2102      	movs	r1, #2
     59a:	430b      	orrs	r3, r1
     59c:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     59e:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     5a0:	8c13      	ldrh	r3, [r2, #32]
     5a2:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     5a4:	2b00      	cmp	r3, #0
     5a6:	d1fb      	bne.n	5a0 <ADC_Handler+0x5c>
     5a8:	e002      	b.n	5b0 <ADC_Handler+0x6c>
				if (module->job_status == STATUS_BUSY) {
     5aa:	7f23      	ldrb	r3, [r4, #28]
     5ac:	2b05      	cmp	r3, #5
     5ae:	d016      	beq.n	5de <ADC_Handler+0x9a>
	if (flags & ADC_INTFLAG_WINMON) {
     5b0:	076b      	lsls	r3, r5, #29
     5b2:	d508      	bpl.n	5c6 <ADC_Handler+0x82>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     5b4:	2304      	movs	r3, #4
     5b6:	6822      	ldr	r2, [r4, #0]
     5b8:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     5ba:	7ee3      	ldrb	r3, [r4, #27]
     5bc:	079b      	lsls	r3, r3, #30
     5be:	d502      	bpl.n	5c6 <ADC_Handler+0x82>
     5c0:	7ea3      	ldrb	r3, [r4, #26]
     5c2:	079b      	lsls	r3, r3, #30
     5c4:	d414      	bmi.n	5f0 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     5c6:	07ab      	lsls	r3, r5, #30
     5c8:	d508      	bpl.n	5dc <ADC_Handler+0x98>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     5ca:	2302      	movs	r3, #2
     5cc:	6822      	ldr	r2, [r4, #0]
     5ce:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     5d0:	7ee3      	ldrb	r3, [r4, #27]
     5d2:	075b      	lsls	r3, r3, #29
     5d4:	d502      	bpl.n	5dc <ADC_Handler+0x98>
     5d6:	7ea3      	ldrb	r3, [r4, #26]
     5d8:	075b      	lsls	r3, r3, #29
     5da:	d40d      	bmi.n	5f8 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     5dc:	bd70      	pop	{r4, r5, r6, pc}
					module->job_status = STATUS_OK;
     5de:	2300      	movs	r3, #0
     5e0:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     5e2:	3301      	adds	r3, #1
     5e4:	6822      	ldr	r2, [r4, #0]
     5e6:	7113      	strb	r3, [r2, #4]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     5e8:	0020      	movs	r0, r4
     5ea:	68a3      	ldr	r3, [r4, #8]
     5ec:	4798      	blx	r3
     5ee:	e7df      	b.n	5b0 <ADC_Handler+0x6c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     5f0:	0020      	movs	r0, r4
     5f2:	68e3      	ldr	r3, [r4, #12]
     5f4:	4798      	blx	r3
     5f6:	e7e6      	b.n	5c6 <ADC_Handler+0x82>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     5f8:	6923      	ldr	r3, [r4, #16]
     5fa:	0020      	movs	r0, r4
     5fc:	4798      	blx	r3
}
     5fe:	e7ed      	b.n	5dc <ADC_Handler+0x98>
     600:	200000c8 	.word	0x200000c8

00000604 <dac_is_syncing>:
		struct dac_module *const dev_inst)
{
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
     604:	6803      	ldr	r3, [r0, #0]

	if (dac_module->SYNCBUSY.reg) {
     606:	6898      	ldr	r0, [r3, #8]
     608:	1e43      	subs	r3, r0, #1
     60a:	4198      	sbcs	r0, r3
     60c:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
     60e:	4770      	bx	lr

00000610 <dac_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->differential_mode = false;
     610:	2300      	movs	r3, #0
     612:	7003      	strb	r3, [r0, #0]
    config->reference      = DAC_REFERENCE_INTREF;
     614:	2206      	movs	r2, #6
     616:	7042      	strb	r2, [r0, #1]
	config->clock_source   = GCLK_GENERATOR_0;
     618:	7083      	strb	r3, [r0, #2]
}
     61a:	4770      	bx	lr

0000061c <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
     61c:	b530      	push	{r4, r5, lr}
     61e:	b083      	sub	sp, #12
     620:	0005      	movs	r5, r0
     622:	0014      	movs	r4, r2
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
     624:	6001      	str	r1, [r0, #0]
			MCLK->APBCMASK.reg |= mask;
     626:	4a16      	ldr	r2, [pc, #88]	; (680 <dac_init+0x64>)
     628:	69d0      	ldr	r0, [r2, #28]
     62a:	2380      	movs	r3, #128	; 0x80
     62c:	015b      	lsls	r3, r3, #5
     62e:	4303      	orrs	r3, r0
     630:	61d3      	str	r3, [r2, #28]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_DAC);

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     632:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     634:	201c      	movs	r0, #28
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     636:	079b      	lsls	r3, r3, #30
     638:	d501      	bpl.n	63e <dac_init+0x22>

	_dac_instances[0] = module_inst;
#endif

	return STATUS_OK;
}
     63a:	b003      	add	sp, #12
     63c:	bd30      	pop	{r4, r5, pc}
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
     63e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_BUSY;
     640:	3817      	subs	r0, #23
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
     642:	07db      	lsls	r3, r3, #31
     644:	d4f9      	bmi.n	63a <dac_init+0x1e>
	gclk_chan_conf.source_generator = config->clock_source;
     646:	a901      	add	r1, sp, #4
     648:	78a3      	ldrb	r3, [r4, #2]
     64a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
     64c:	301b      	adds	r0, #27
     64e:	4b0d      	ldr	r3, [pc, #52]	; (684 <dac_init+0x68>)
     650:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
     652:	2020      	movs	r0, #32
     654:	4b0c      	ldr	r3, [pc, #48]	; (688 <dac_init+0x6c>)
     656:	4798      	blx	r3
	module_inst->start_on_event[DAC_CHANNEL_0] = false;
     658:	2300      	movs	r3, #0
     65a:	716b      	strb	r3, [r5, #5]
	module_inst->start_on_event[DAC_CHANNEL_1] = false;
     65c:	71ab      	strb	r3, [r5, #6]
	uint32_t new_ctrlb = 0;
     65e:	7822      	ldrb	r2, [r4, #0]
	new_ctrlb |= config->reference;
     660:	7861      	ldrb	r1, [r4, #1]
	dac_module->CTRLB.reg = new_ctrlb;
     662:	430a      	orrs	r2, r1
     664:	6829      	ldr	r1, [r5, #0]
     666:	704a      	strb	r2, [r1, #1]
	module_inst->reference = config->reference;
     668:	7862      	ldrb	r2, [r4, #1]
     66a:	712a      	strb	r2, [r5, #4]
			module_inst->callback[i][j] = NULL;
     66c:	622b      	str	r3, [r5, #32]
     66e:	626b      	str	r3, [r5, #36]	; 0x24
     670:	62ab      	str	r3, [r5, #40]	; 0x28
     672:	62eb      	str	r3, [r5, #44]	; 0x2c
     674:	632b      	str	r3, [r5, #48]	; 0x30
     676:	636b      	str	r3, [r5, #52]	; 0x34
	_dac_instances[0] = module_inst;
     678:	4b04      	ldr	r3, [pc, #16]	; (68c <dac_init+0x70>)
     67a:	601d      	str	r5, [r3, #0]
	return STATUS_OK;
     67c:	2000      	movs	r0, #0
     67e:	e7dc      	b.n	63a <dac_init+0x1e>
     680:	40000400 	.word	0x40000400
     684:	000014e5 	.word	0x000014e5
     688:	00001475 	.word	0x00001475
     68c:	200000cc 	.word	0x200000cc

00000690 <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
     690:	b570      	push	{r4, r5, r6, lr}
     692:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
     694:	6805      	ldr	r5, [r0, #0]

	while (dac_is_syncing(module_inst)) {
     696:	4e11      	ldr	r6, [pc, #68]	; (6dc <dac_enable+0x4c>)
     698:	0020      	movs	r0, r4
     69a:	47b0      	blx	r6
     69c:	2800      	cmp	r0, #0
     69e:	d1fb      	bne.n	698 <dac_enable+0x8>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
     6a0:	782b      	ldrb	r3, [r5, #0]
     6a2:	2202      	movs	r2, #2
     6a4:	4313      	orrs	r3, r2
     6a6:	702b      	strb	r3, [r5, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INTREF) {
     6a8:	7923      	ldrb	r3, [r4, #4]
     6aa:	2b06      	cmp	r3, #6
     6ac:	d007      	beq.n	6be <dac_enable+0x2e>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	}

	if(dac_module->DACCTRL[DAC_CHANNEL_0].reg & DAC_DACCTRL_ENABLE) {
     6ae:	89ab      	ldrh	r3, [r5, #12]
     6b0:	079b      	lsls	r3, r3, #30
     6b2:	d50a      	bpl.n	6ca <dac_enable+0x3a>
		while(! (dac_module->STATUS.reg & DAC_STATUS_READY(DAC_CHANNEL_0 + 1))) {
     6b4:	2201      	movs	r2, #1
     6b6:	79eb      	ldrb	r3, [r5, #7]
     6b8:	4213      	tst	r3, r2
     6ba:	d0fc      	beq.n	6b6 <dac_enable+0x26>
		};
	} else if(dac_module->DACCTRL[DAC_CHANNEL_1].reg & DAC_DACCTRL_ENABLE) {
		while(! (dac_module->STATUS.reg & DAC_STATUS_READY(DAC_CHANNEL_1 + 1))) {
		};
	}
}
     6bc:	bd70      	pop	{r4, r5, r6, pc}
     6be:	4a08      	ldr	r2, [pc, #32]	; (6e0 <dac_enable+0x50>)
     6c0:	69d3      	ldr	r3, [r2, #28]
     6c2:	2104      	movs	r1, #4
     6c4:	430b      	orrs	r3, r1
     6c6:	61d3      	str	r3, [r2, #28]
     6c8:	e7f1      	b.n	6ae <dac_enable+0x1e>
	} else if(dac_module->DACCTRL[DAC_CHANNEL_1].reg & DAC_DACCTRL_ENABLE) {
     6ca:	89eb      	ldrh	r3, [r5, #14]
     6cc:	079b      	lsls	r3, r3, #30
     6ce:	d5f5      	bpl.n	6bc <dac_enable+0x2c>
		while(! (dac_module->STATUS.reg & DAC_STATUS_READY(DAC_CHANNEL_1 + 1))) {
     6d0:	2202      	movs	r2, #2
     6d2:	79eb      	ldrb	r3, [r5, #7]
     6d4:	4213      	tst	r3, r2
     6d6:	d0fc      	beq.n	6d2 <dac_enable+0x42>
     6d8:	e7f0      	b.n	6bc <dac_enable+0x2c>
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	00000605 	.word	0x00000605
     6e0:	40001400 	.word	0x40001400

000006e4 <dac_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Dac channel default configuration values */
	config->left_adjust    = false;
     6e4:	2300      	movs	r3, #0
     6e6:	7003      	strb	r3, [r0, #0]
	config->current        = DAC_CURRENT_12M;
     6e8:	2208      	movs	r2, #8
     6ea:	7042      	strb	r2, [r0, #1]
	config->run_in_standby = false;
     6ec:	7083      	strb	r3, [r0, #2]
	config->dither_mode    = false;
     6ee:	70c3      	strb	r3, [r0, #3]
	config->refresh_period = 2;
     6f0:	3302      	adds	r3, #2
     6f2:	7103      	strb	r3, [r0, #4]
}
     6f4:	4770      	bx	lr
	...

000006f8 <dac_chan_set_config>:
 */
void dac_chan_set_config(
		struct dac_module *const module_inst,
		const enum dac_channel channel,
		struct dac_chan_config *const config)
{
     6f8:	b570      	push	{r4, r5, r6, lr}
     6fa:	b082      	sub	sp, #8
     6fc:	0006      	movs	r6, r0
     6fe:	000c      	movs	r4, r1
     700:	0015      	movs	r5, r2
	config->mux_position = SYSTEM_PINMUX_GPIO;
     702:	ab01      	add	r3, sp, #4
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     704:	2200      	movs	r2, #0
     706:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     708:	70da      	strb	r2, [r3, #3]
	/* MUX the DAC VOUT pin */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     70a:	709a      	strb	r2, [r3, #2]

	if(channel == DAC_CHANNEL_0) {
     70c:	2900      	cmp	r1, #0
     70e:	d01c      	beq.n	74a <dac_chan_set_config+0x52>
		/* Set up the DAC VOUT0 pin */
		pin_conf.mux_position = MUX_PA02B_DAC_VOUT0;
		system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT0, &pin_conf);
	}
	else if(channel == DAC_CHANNEL_1) {
     710:	2901      	cmp	r1, #1
     712:	d021      	beq.n	758 <dac_chan_set_config+0x60>
		/* Set up the DAC VOUT1 pin */
		pin_conf.mux_position = MUX_PA05B_DAC_VOUT1;
		system_pinmux_pin_set_config(PIN_PA05B_DAC_VOUT1, &pin_conf);
	}

	Dac *const dac_module = module_inst->hw;
     714:	6831      	ldr	r1, [r6, #0]
	if (config->left_adjust) {
		new_dacctrl |= DAC_DACCTRL_LEFTADJ;
	}

	/* Set current control */
	new_dacctrl |= config->current;
     716:	786b      	ldrb	r3, [r5, #1]
	uint32_t new_dacctrl = 0;
     718:	782a      	ldrb	r2, [r5, #0]
	new_dacctrl |= config->current;
     71a:	431a      	orrs	r2, r3

	/* Enable DAC in standby sleep mode if configured */
	if (config->run_in_standby) {
     71c:	78ab      	ldrb	r3, [r5, #2]
     71e:	2b00      	cmp	r3, #0
     720:	d001      	beq.n	726 <dac_chan_set_config+0x2e>
		new_dacctrl |= DAC_DACCTRL_RUNSTDBY;
     722:	2340      	movs	r3, #64	; 0x40
     724:	431a      	orrs	r2, r3
	}

	/* Voltage pump disable if configured */
	if (config->dither_mode) {
     726:	78eb      	ldrb	r3, [r5, #3]
     728:	2b00      	cmp	r3, #0
     72a:	d001      	beq.n	730 <dac_chan_set_config+0x38>
		new_dacctrl |= DAC_DACCTRL_DITHER;
     72c:	2380      	movs	r3, #128	; 0x80
     72e:	431a      	orrs	r2, r3
	}

	new_dacctrl |= DAC_DACCTRL_REFRESH(config->refresh_period);
     730:	792b      	ldrb	r3, [r5, #4]
     732:	021b      	lsls	r3, r3, #8
     734:	20f0      	movs	r0, #240	; 0xf0
     736:	0100      	lsls	r0, r0, #4
     738:	4003      	ands	r3, r0
     73a:	4313      	orrs	r3, r2

	/* Apply the new configuration to the hardware module */
	dac_module->DACCTRL[channel].reg = new_dacctrl;
     73c:	b29b      	uxth	r3, r3
     73e:	3404      	adds	r4, #4
     740:	0064      	lsls	r4, r4, #1
     742:	190c      	adds	r4, r1, r4
     744:	80a3      	strh	r3, [r4, #4]
}
     746:	b002      	add	sp, #8
     748:	bd70      	pop	{r4, r5, r6, pc}
		pin_conf.mux_position = MUX_PA02B_DAC_VOUT0;
     74a:	0019      	movs	r1, r3
     74c:	2301      	movs	r3, #1
     74e:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT0, &pin_conf);
     750:	2002      	movs	r0, #2
     752:	4b05      	ldr	r3, [pc, #20]	; (768 <dac_chan_set_config+0x70>)
     754:	4798      	blx	r3
     756:	e7dd      	b.n	714 <dac_chan_set_config+0x1c>
		pin_conf.mux_position = MUX_PA05B_DAC_VOUT1;
     758:	a901      	add	r1, sp, #4
     75a:	2301      	movs	r3, #1
     75c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(PIN_PA05B_DAC_VOUT1, &pin_conf);
     75e:	2005      	movs	r0, #5
     760:	4b01      	ldr	r3, [pc, #4]	; (768 <dac_chan_set_config+0x70>)
     762:	4798      	blx	r3
     764:	e7d6      	b.n	714 <dac_chan_set_config+0x1c>
     766:	46c0      	nop			; (mov r8, r8)
     768:	000015e1 	.word	0x000015e1

0000076c <dac_chan_enable>:
 *
 */
void dac_chan_enable(
		struct dac_module *const module_inst,
		enum dac_channel channel)
{
     76c:	004b      	lsls	r3, r1, #1
     76e:	6801      	ldr	r1, [r0, #0]
     770:	18c9      	adds	r1, r1, r3
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;

	/* Enable the module */
	dac_module->DACCTRL[channel].reg |= DAC_DACCTRL_ENABLE;
     772:	898b      	ldrh	r3, [r1, #12]
     774:	2202      	movs	r2, #2
     776:	4313      	orrs	r3, r2
     778:	818b      	strh	r3, [r1, #12]
}
     77a:	4770      	bx	lr

0000077c <dac_chan_write>:
 */
enum status_code dac_chan_write(
		struct dac_module *const module_inst,
		enum dac_channel channel,
		const uint16_t data)
{
     77c:	b5f0      	push	{r4, r5, r6, r7, lr}
     77e:	46c6      	mov	lr, r8
     780:	b500      	push	{lr}
     782:	0004      	movs	r4, r0
     784:	000e      	movs	r6, r1
     786:	4690      	mov	r8, r2
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
     788:	6807      	ldr	r7, [r0, #0]

	while (dac_is_syncing(module_inst)) {
     78a:	4d0b      	ldr	r5, [pc, #44]	; (7b8 <dac_chan_write+0x3c>)
     78c:	0020      	movs	r0, r4
     78e:	47a8      	blx	r5
     790:	2800      	cmp	r0, #0
     792:	d1fb      	bne.n	78c <dac_chan_write+0x10>
		/* Wait until the synchronization is complete */
	}

	if (module_inst->start_on_event[channel]) {
     794:	19a4      	adds	r4, r4, r6
     796:	7963      	ldrb	r3, [r4, #5]
     798:	2b00      	cmp	r3, #0
     79a:	d107      	bne.n	7ac <dac_chan_write+0x30>
		/* Write the new value to the buffered DAC data register */
		dac_module->DATABUF[channel].reg = data;
	} else {
		/* Write the new value to the DAC data register */
		dac_module->DATA[channel].reg = data;
     79c:	3608      	adds	r6, #8
     79e:	0076      	lsls	r6, r6, #1
     7a0:	4643      	mov	r3, r8
     7a2:	53f3      	strh	r3, [r6, r7]
	}

	return STATUS_OK;
}
     7a4:	2000      	movs	r0, #0
     7a6:	bc04      	pop	{r2}
     7a8:	4690      	mov	r8, r2
     7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dac_module->DATABUF[channel].reg = data;
     7ac:	3608      	adds	r6, #8
     7ae:	0076      	lsls	r6, r6, #1
     7b0:	19bf      	adds	r7, r7, r6
     7b2:	4643      	mov	r3, r8
     7b4:	80bb      	strh	r3, [r7, #4]
     7b6:	e7f5      	b.n	7a4 <dac_chan_write+0x28>
     7b8:	00000605 	.word	0x00000605

000007bc <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
     7bc:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
     7be:	4b59      	ldr	r3, [pc, #356]	; (924 <DAC_Handler+0x168>)
     7c0:	681c      	ldr	r4, [r3, #0]
	Dac *const dac_hw = module->hw;
     7c2:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN0) {
     7c4:	79ab      	ldrb	r3, [r5, #6]
     7c6:	07db      	lsls	r3, r3, #31
     7c8:	d54b      	bpl.n	862 <DAC_Handler+0xa6>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN0;
     7ca:	2301      	movs	r3, #1
     7cc:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
     7ce:	0023      	movs	r3, r4
     7d0:	3320      	adds	r3, #32
     7d2:	d046      	beq.n	862 <DAC_Handler+0xa6>
     7d4:	7e63      	ldrb	r3, [r4, #25]
     7d6:	2b00      	cmp	r3, #0
     7d8:	d13f      	bne.n	85a <DAC_Handler+0x9e>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN1) {
     7da:	79ab      	ldrb	r3, [r5, #6]
     7dc:	079b      	lsls	r3, r3, #30
     7de:	d400      	bmi.n	7e2 <DAC_Handler+0x26>
     7e0:	e099      	b.n	916 <DAC_Handler+0x15a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN1;
     7e2:	2302      	movs	r3, #2
     7e4:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
     7e6:	7f23      	ldrb	r3, [r4, #28]
     7e8:	2b00      	cmp	r3, #0
     7ea:	d14b      	bne.n	884 <DAC_Handler+0xc8>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY0) {
     7ec:	79ab      	ldrb	r3, [r5, #6]
     7ee:	075b      	lsls	r3, r3, #29
     7f0:	d504      	bpl.n	7fc <DAC_Handler+0x40>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY0;
     7f2:	2304      	movs	r3, #4
     7f4:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
     7f6:	7e23      	ldrb	r3, [r4, #24]
     7f8:	2b00      	cmp	r3, #0
     7fa:	d147      	bne.n	88c <DAC_Handler+0xd0>
	if (module->remaining_conversions[DAC_CHANNEL_0]) {
     7fc:	8a23      	ldrh	r3, [r4, #16]
     7fe:	b29b      	uxth	r3, r3
     800:	2b00      	cmp	r3, #0
     802:	d04b      	beq.n	89c <DAC_Handler+0xe0>
			module->job_buffer[DAC_CHANNEL_0][module->transferred_conversions[DAC_CHANNEL_0]++];
     804:	8aa3      	ldrh	r3, [r4, #20]
     806:	b29b      	uxth	r3, r3
     808:	1c5a      	adds	r2, r3, #1
     80a:	b292      	uxth	r2, r2
     80c:	82a2      	strh	r2, [r4, #20]
     80e:	005b      	lsls	r3, r3, #1
     810:	68a2      	ldr	r2, [r4, #8]
     812:	4694      	mov	ip, r2
     814:	4463      	add	r3, ip
     816:	881b      	ldrh	r3, [r3, #0]
     818:	b29b      	uxth	r3, r3
		dac_hw->DATABUF[DAC_CHANNEL_0].reg =
     81a:	82ab      	strh	r3, [r5, #20]
		module->remaining_conversions[DAC_CHANNEL_0] --;
     81c:	8a23      	ldrh	r3, [r4, #16]
     81e:	3b01      	subs	r3, #1
     820:	b29b      	uxth	r3, r3
     822:	8223      	strh	r3, [r4, #16]
		if (module->remaining_conversions[DAC_CHANNEL_0] == 0) {
     824:	8a23      	ldrh	r3, [r4, #16]
     826:	b29b      	uxth	r3, r3
     828:	2b00      	cmp	r3, #0
     82a:	d137      	bne.n	89c <DAC_Handler+0xe0>
			module->job_status[DAC_CHANNEL_0] = STATUS_OK;
     82c:	2200      	movs	r2, #0
     82e:	3338      	adds	r3, #56	; 0x38
     830:	54e2      	strb	r2, [r4, r3]
			dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY0;
     832:	3b34      	subs	r3, #52	; 0x34
     834:	712b      	strb	r3, [r5, #4]
			dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY0;
     836:	71ab      	strb	r3, [r5, #6]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     838:	2180      	movs	r1, #128	; 0x80
     83a:	0449      	lsls	r1, r1, #17
     83c:	337c      	adds	r3, #124	; 0x7c
     83e:	4a3a      	ldr	r2, [pc, #232]	; (928 <DAC_Handler+0x16c>)
     840:	50d1      	str	r1, [r2, r3]
			if ((module->callback) &&
     842:	0023      	movs	r3, r4
     844:	3320      	adds	r3, #32
     846:	d029      	beq.n	89c <DAC_Handler+0xe0>
     848:	7ea3      	ldrb	r3, [r4, #26]
     84a:	2b00      	cmp	r3, #0
     84c:	d122      	bne.n	894 <DAC_Handler+0xd8>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY1) {
     84e:	79ab      	ldrb	r3, [r5, #6]
     850:	071b      	lsls	r3, r3, #28
     852:	d52e      	bpl.n	8b2 <DAC_Handler+0xf6>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY1;
     854:	2308      	movs	r3, #8
     856:	71ab      	strb	r3, [r5, #6]
     858:	e028      	b.n	8ac <DAC_Handler+0xf0>
			module->callback[DAC_CHANNEL_0][DAC_CALLBACK_DATA_UNDERRUN](0);
     85a:	2000      	movs	r0, #0
     85c:	6a63      	ldr	r3, [r4, #36]	; 0x24
     85e:	4798      	blx	r3
     860:	e7bb      	b.n	7da <DAC_Handler+0x1e>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN1) {
     862:	79ab      	ldrb	r3, [r5, #6]
     864:	079b      	lsls	r3, r3, #30
     866:	d504      	bpl.n	872 <DAC_Handler+0xb6>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN1;
     868:	2302      	movs	r3, #2
     86a:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
     86c:	0023      	movs	r3, r4
     86e:	3320      	adds	r3, #32
     870:	d1b9      	bne.n	7e6 <DAC_Handler+0x2a>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY0) {
     872:	79ab      	ldrb	r3, [r5, #6]
     874:	075b      	lsls	r3, r3, #29
     876:	d5c1      	bpl.n	7fc <DAC_Handler+0x40>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY0;
     878:	2304      	movs	r3, #4
     87a:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
     87c:	0023      	movs	r3, r4
     87e:	3320      	adds	r3, #32
     880:	d1b9      	bne.n	7f6 <DAC_Handler+0x3a>
     882:	e7bb      	b.n	7fc <DAC_Handler+0x40>
			module->callback[DAC_CHANNEL_1][DAC_CALLBACK_DATA_UNDERRUN](0);
     884:	2000      	movs	r0, #0
     886:	6b23      	ldr	r3, [r4, #48]	; 0x30
     888:	4798      	blx	r3
     88a:	e7af      	b.n	7ec <DAC_Handler+0x30>
			module->callback[DAC_CHANNEL_0][DAC_CALLBACK_DATA_EMPTY](0);
     88c:	2000      	movs	r0, #0
     88e:	6a23      	ldr	r3, [r4, #32]
     890:	4798      	blx	r3
     892:	e7b3      	b.n	7fc <DAC_Handler+0x40>
				module->callback[DAC_CHANNEL_0][DAC_CALLBACK_TRANSFER_COMPLETE](0);
     894:	2000      	movs	r0, #0
     896:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     898:	4798      	blx	r3
     89a:	e7d8      	b.n	84e <DAC_Handler+0x92>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY1) {
     89c:	79ab      	ldrb	r3, [r5, #6]
     89e:	071b      	lsls	r3, r3, #28
     8a0:	d507      	bpl.n	8b2 <DAC_Handler+0xf6>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY1;
     8a2:	2308      	movs	r3, #8
     8a4:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
     8a6:	0023      	movs	r3, r4
     8a8:	3320      	adds	r3, #32
     8aa:	d002      	beq.n	8b2 <DAC_Handler+0xf6>
     8ac:	7ee3      	ldrb	r3, [r4, #27]
     8ae:	2b00      	cmp	r3, #0
     8b0:	d129      	bne.n	906 <DAC_Handler+0x14a>
	if (module->remaining_conversions[DAC_CHANNEL_1]) {
     8b2:	8a63      	ldrh	r3, [r4, #18]
     8b4:	b29b      	uxth	r3, r3
     8b6:	2b00      	cmp	r3, #0
     8b8:	d024      	beq.n	904 <DAC_Handler+0x148>
			module->job_buffer[DAC_CHANNEL_1][module->transferred_conversions[DAC_CHANNEL_1]++];
     8ba:	8ae3      	ldrh	r3, [r4, #22]
     8bc:	b29b      	uxth	r3, r3
     8be:	1c5a      	adds	r2, r3, #1
     8c0:	b292      	uxth	r2, r2
     8c2:	82e2      	strh	r2, [r4, #22]
     8c4:	005b      	lsls	r3, r3, #1
     8c6:	68e2      	ldr	r2, [r4, #12]
     8c8:	4694      	mov	ip, r2
     8ca:	4463      	add	r3, ip
     8cc:	881b      	ldrh	r3, [r3, #0]
     8ce:	b29b      	uxth	r3, r3
		dac_hw->DATABUF[DAC_CHANNEL_1].reg =
     8d0:	82eb      	strh	r3, [r5, #22]
		module->remaining_conversions[DAC_CHANNEL_1] --;
     8d2:	8a63      	ldrh	r3, [r4, #18]
     8d4:	3b01      	subs	r3, #1
     8d6:	b29b      	uxth	r3, r3
     8d8:	8263      	strh	r3, [r4, #18]
		if (module->remaining_conversions[DAC_CHANNEL_1] == 0) {
     8da:	8a63      	ldrh	r3, [r4, #18]
     8dc:	b29b      	uxth	r3, r3
     8de:	2b00      	cmp	r3, #0
     8e0:	d110      	bne.n	904 <DAC_Handler+0x148>
			module->job_status[DAC_CHANNEL_1] = STATUS_OK;
     8e2:	2200      	movs	r2, #0
     8e4:	3339      	adds	r3, #57	; 0x39
     8e6:	54e2      	strb	r2, [r4, r3]
			dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY1;
     8e8:	3b31      	subs	r3, #49	; 0x31
     8ea:	712b      	strb	r3, [r5, #4]
			dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY1;
     8ec:	71ab      	strb	r3, [r5, #6]
     8ee:	2180      	movs	r1, #128	; 0x80
     8f0:	0449      	lsls	r1, r1, #17
     8f2:	3378      	adds	r3, #120	; 0x78
     8f4:	4a0c      	ldr	r2, [pc, #48]	; (928 <DAC_Handler+0x16c>)
     8f6:	50d1      	str	r1, [r2, r3]
			if ((module->callback) &&
     8f8:	0023      	movs	r3, r4
     8fa:	3320      	adds	r3, #32
     8fc:	d002      	beq.n	904 <DAC_Handler+0x148>
     8fe:	7f63      	ldrb	r3, [r4, #29]
     900:	2b00      	cmp	r3, #0
     902:	d104      	bne.n	90e <DAC_Handler+0x152>
	_dac_interrupt_handler(0);
}
     904:	bd70      	pop	{r4, r5, r6, pc}
			module->callback[DAC_CHANNEL_1][DAC_CALLBACK_DATA_EMPTY](0);
     906:	2000      	movs	r0, #0
     908:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     90a:	4798      	blx	r3
     90c:	e7d1      	b.n	8b2 <DAC_Handler+0xf6>
				module->callback[DAC_CHANNEL_1][DAC_CALLBACK_TRANSFER_COMPLETE](0);
     90e:	6b63      	ldr	r3, [r4, #52]	; 0x34
     910:	2000      	movs	r0, #0
     912:	4798      	blx	r3
}
     914:	e7f6      	b.n	904 <DAC_Handler+0x148>
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY0) {
     916:	79ab      	ldrb	r3, [r5, #6]
     918:	075b      	lsls	r3, r3, #29
     91a:	d400      	bmi.n	91e <DAC_Handler+0x162>
     91c:	e76e      	b.n	7fc <DAC_Handler+0x40>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY0;
     91e:	2304      	movs	r3, #4
     920:	71ab      	strb	r3, [r5, #6]
     922:	e768      	b.n	7f6 <DAC_Handler+0x3a>
     924:	200000cc 	.word	0x200000cc
     928:	e000e100 	.word	0xe000e100

0000092c <i2c_slave_init>:
 */
enum status_code i2c_slave_init(
		struct i2c_slave_module *const module,
		Sercom *const hw,
		const struct i2c_slave_config *const config)
{
     92c:	b5f0      	push	{r4, r5, r6, r7, lr}
     92e:	b083      	sub	sp, #12
     930:	0005      	movs	r5, r0
     932:	000c      	movs	r4, r1
     934:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     936:	6029      	str	r1, [r5, #0]

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);

	/* Check if module is enabled */
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     938:	680b      	ldr	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     93a:	201c      	movs	r0, #28
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_ENABLE) {
     93c:	079b      	lsls	r3, r3, #30
     93e:	d501      	bpl.n	944 <i2c_slave_init+0x18>
	/* Set SERCOM module to operate in I2C slave mode */
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);

	/* Set config and return status */
	return _i2c_slave_set_config(module, config);
}
     940:	b003      	add	sp, #12
     942:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     944:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     946:	3817      	subs	r0, #23
	if (i2c_hw->CTRLA.reg & SERCOM_I2CS_CTRLA_SWRST) {
     948:	07db      	lsls	r3, r3, #31
     94a:	d4f9      	bmi.n	940 <i2c_slave_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     94c:	0008      	movs	r0, r1
     94e:	4b4f      	ldr	r3, [pc, #316]	; (a8c <i2c_slave_init+0x160>)
     950:	4798      	blx	r3
	if (sercom_index == 5) {
     952:	2805      	cmp	r0, #5
     954:	d100      	bne.n	958 <i2c_slave_init+0x2c>
     956:	e092      	b.n	a7e <i2c_slave_init+0x152>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     958:	0007      	movs	r7, r0
     95a:	3712      	adds	r7, #18
     95c:	4a4c      	ldr	r2, [pc, #304]	; (a90 <i2c_slave_init+0x164>)
     95e:	69d1      	ldr	r1, [r2, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
     960:	2301      	movs	r3, #1
     962:	4083      	lsls	r3, r0
     964:	430b      	orrs	r3, r1
     966:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
     968:	a901      	add	r1, sp, #4
     96a:	7e73      	ldrb	r3, [r6, #25]
     96c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     96e:	b2ff      	uxtb	r7, r7
     970:	0038      	movs	r0, r7
     972:	4b48      	ldr	r3, [pc, #288]	; (a94 <i2c_slave_init+0x168>)
     974:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     976:	0038      	movs	r0, r7
     978:	4b47      	ldr	r3, [pc, #284]	; (a98 <i2c_slave_init+0x16c>)
     97a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     97c:	7e70      	ldrb	r0, [r6, #25]
     97e:	2100      	movs	r1, #0
     980:	4b46      	ldr	r3, [pc, #280]	; (a9c <i2c_slave_init+0x170>)
     982:	4798      	blx	r3
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     984:	6828      	ldr	r0, [r5, #0]
     986:	4b41      	ldr	r3, [pc, #260]	; (a8c <i2c_slave_init+0x160>)
     988:	4798      	blx	r3
     98a:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
     98c:	4944      	ldr	r1, [pc, #272]	; (aa0 <i2c_slave_init+0x174>)
     98e:	4b45      	ldr	r3, [pc, #276]	; (aa4 <i2c_slave_init+0x178>)
     990:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     992:	00bf      	lsls	r7, r7, #2
     994:	4b44      	ldr	r3, [pc, #272]	; (aa8 <i2c_slave_init+0x17c>)
     996:	50fd      	str	r5, [r7, r3]
	module->registered_callback = 0;
     998:	2300      	movs	r3, #0
     99a:	2224      	movs	r2, #36	; 0x24
     99c:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback = 0;
     99e:	3201      	adds	r2, #1
     9a0:	54ab      	strb	r3, [r5, r2]
	module->buffer_length = 0;
     9a2:	84eb      	strh	r3, [r5, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
     9a4:	7e33      	ldrb	r3, [r6, #24]
     9a6:	726b      	strb	r3, [r5, #9]
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE(0x4);
     9a8:	2310      	movs	r3, #16
     9aa:	6023      	str	r3, [r4, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     9ac:	682c      	ldr	r4, [r5, #0]
	module->buffer_timeout = config->buffer_timeout;
     9ae:	8933      	ldrh	r3, [r6, #8]
     9b0:	80eb      	strh	r3, [r5, #6]
	module->ten_bit_address = config->ten_bit_address;
     9b2:	7c33      	ldrb	r3, [r6, #16]
     9b4:	722b      	strb	r3, [r5, #8]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     9b6:	2380      	movs	r3, #128	; 0x80
     9b8:	466a      	mov	r2, sp
     9ba:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9bc:	2300      	movs	r3, #0
     9be:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     9c0:	2301      	movs	r3, #1
     9c2:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     9c4:	2300      	movs	r3, #0
     9c6:	70d3      	strb	r3, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     9c8:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     9ca:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
     9cc:	2800      	cmp	r0, #0
     9ce:	d04b      	beq.n	a68 <i2c_slave_init+0x13c>
	pin_conf.mux_position = pad0 & 0xFFFF;
     9d0:	466b      	mov	r3, sp
     9d2:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     9d4:	2302      	movs	r3, #2
     9d6:	466a      	mov	r2, sp
     9d8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     9da:	0c00      	lsrs	r0, r0, #16
     9dc:	b2c0      	uxtb	r0, r0
     9de:	4669      	mov	r1, sp
     9e0:	4b32      	ldr	r3, [pc, #200]	; (aac <i2c_slave_init+0x180>)
     9e2:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     9e4:	2d00      	cmp	r5, #0
     9e6:	d044      	beq.n	a72 <i2c_slave_init+0x146>
	pin_conf.mux_position = pad1 & 0xFFFF;
     9e8:	466b      	mov	r3, sp
     9ea:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     9ec:	2302      	movs	r3, #2
     9ee:	466a      	mov	r2, sp
     9f0:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     9f2:	0c2d      	lsrs	r5, r5, #16
     9f4:	b2e8      	uxtb	r0, r5
     9f6:	4669      	mov	r1, sp
     9f8:	4b2c      	ldr	r3, [pc, #176]	; (aac <i2c_slave_init+0x180>)
     9fa:	4798      	blx	r3
	if (config->run_in_standby || system_is_debugger_present()) {
     9fc:	7eb3      	ldrb	r3, [r6, #26]
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     9fe:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     a00:	2b00      	cmp	r3, #0
     a02:	d104      	bne.n	a0e <i2c_slave_init+0xe2>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     a04:	4b2a      	ldr	r3, [pc, #168]	; (ab0 <i2c_slave_init+0x184>)
     a06:	789b      	ldrb	r3, [r3, #2]
     a08:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     a0a:	0fdb      	lsrs	r3, r3, #31
     a0c:	01da      	lsls	r2, r3, #7
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_SLAVE_SPEED_HIGH_SPEED)) {
     a0e:	2325      	movs	r3, #37	; 0x25
     a10:	5cf3      	ldrb	r3, [r6, r3]
     a12:	2b00      	cmp	r3, #0
     a14:	d104      	bne.n	a20 <i2c_slave_init+0xf4>
     a16:	2380      	movs	r3, #128	; 0x80
     a18:	049b      	lsls	r3, r3, #18
     a1a:	6971      	ldr	r1, [r6, #20]
     a1c:	4299      	cmp	r1, r3
     a1e:	d102      	bne.n	a26 <i2c_slave_init+0xfa>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     a20:	2380      	movs	r3, #128	; 0x80
     a22:	051b      	lsls	r3, r3, #20
     a24:	431a      	orrs	r2, r3
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     a26:	6820      	ldr	r0, [r4, #0]
     a28:	6873      	ldr	r3, [r6, #4]
     a2a:	6971      	ldr	r1, [r6, #20]
     a2c:	430b      	orrs	r3, r1
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUTEN_Pos) |
     a2e:	2124      	movs	r1, #36	; 0x24
     a30:	5c71      	ldrb	r1, [r6, r1]
     a32:	0789      	lsls	r1, r1, #30
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     a34:	430b      	orrs	r3, r1
			(config->slave_scl_low_extend_timeout << SERCOM_I2CS_CTRLA_SEXTTOEN_Pos));
     a36:	2126      	movs	r1, #38	; 0x26
     a38:	5c71      	ldrb	r1, [r6, r1]
     a3a:	05c9      	lsls	r1, r1, #23
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     a3c:	430b      	orrs	r3, r1
     a3e:	4303      	orrs	r3, r0
     a40:	4313      	orrs	r3, r2
     a42:	6023      	str	r3, [r4, #0]
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
     a44:	8972      	ldrh	r2, [r6, #10]
     a46:	2380      	movs	r3, #128	; 0x80
     a48:	005b      	lsls	r3, r3, #1
     a4a:	4313      	orrs	r3, r2
     a4c:	6063      	str	r3, [r4, #4]
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     a4e:	89b3      	ldrh	r3, [r6, #12]
     a50:	005b      	lsls	r3, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     a52:	89f2      	ldrh	r2, [r6, #14]
     a54:	0452      	lsls	r2, r2, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     a56:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
     a58:	7c72      	ldrb	r2, [r6, #17]
			config->ten_bit_address << SERCOM_I2CS_ADDR_TENBITEN_Pos |
     a5a:	4313      	orrs	r3, r2
     a5c:	7c32      	ldrb	r2, [r6, #16]
     a5e:	03d2      	lsls	r2, r2, #15
     a60:	4313      	orrs	r3, r2
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     a62:	6263      	str	r3, [r4, #36]	; 0x24
	return _i2c_slave_set_config(module, config);
     a64:	2000      	movs	r0, #0
     a66:	e76b      	b.n	940 <i2c_slave_init+0x14>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     a68:	2100      	movs	r1, #0
     a6a:	0020      	movs	r0, r4
     a6c:	4b11      	ldr	r3, [pc, #68]	; (ab4 <i2c_slave_init+0x188>)
     a6e:	4798      	blx	r3
     a70:	e7ae      	b.n	9d0 <i2c_slave_init+0xa4>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     a72:	2101      	movs	r1, #1
     a74:	0020      	movs	r0, r4
     a76:	4b0f      	ldr	r3, [pc, #60]	; (ab4 <i2c_slave_init+0x188>)
     a78:	4798      	blx	r3
     a7a:	0005      	movs	r5, r0
     a7c:	e7b4      	b.n	9e8 <i2c_slave_init+0xbc>
			MCLK->APBDMASK.reg |= mask;
     a7e:	4a04      	ldr	r2, [pc, #16]	; (a90 <i2c_slave_init+0x164>)
     a80:	6a13      	ldr	r3, [r2, #32]
     a82:	2102      	movs	r1, #2
     a84:	430b      	orrs	r3, r1
     a86:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     a88:	2718      	movs	r7, #24
     a8a:	e76d      	b.n	968 <i2c_slave_init+0x3c>
     a8c:	00000f65 	.word	0x00000f65
     a90:	40000400 	.word	0x40000400
     a94:	000014e5 	.word	0x000014e5
     a98:	00001475 	.word	0x00001475
     a9c:	00000da5 	.word	0x00000da5
     aa0:	00000b25 	.word	0x00000b25
     aa4:	00000fa1 	.word	0x00000fa1
     aa8:	200000d0 	.word	0x200000d0
     aac:	000015e1 	.word	0x000015e1
     ab0:	41002000 	.word	0x41002000
     ab4:	00000df1 	.word	0x00000df1

00000ab8 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
     ab8:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback. */
	module->callbacks[callback_type] = callback;
     aba:	1c93      	adds	r3, r2, #2
     abc:	009b      	lsls	r3, r3, #2
     abe:	18c3      	adds	r3, r0, r3
     ac0:	6059      	str	r1, [r3, #4]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
     ac2:	2424      	movs	r4, #36	; 0x24
     ac4:	5d03      	ldrb	r3, [r0, r4]
     ac6:	2101      	movs	r1, #1
     ac8:	4091      	lsls	r1, r2
     aca:	430b      	orrs	r3, r1
     acc:	b2db      	uxtb	r3, r3
     ace:	5503      	strb	r3, [r0, r4]
}
     ad0:	bd10      	pop	{r4, pc}

00000ad2 <i2c_slave_read_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
     ad2:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
     ad4:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
     ad6:	2a00      	cmp	r2, #0
     ad8:	d001      	beq.n	ade <i2c_slave_read_packet_job+0xc>
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	/* Read will begin when master initiates the transfer */
	return STATUS_OK;
}
     ada:	0018      	movs	r0, r3
     adc:	4770      	bx	lr
	module->buffer           = packet->data;
     ade:	684b      	ldr	r3, [r1, #4]
     ae0:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
     ae2:	880b      	ldrh	r3, [r1, #0]
     ae4:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
     ae6:	880b      	ldrh	r3, [r1, #0]
     ae8:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
     aea:	3205      	adds	r2, #5
     aec:	2331      	movs	r3, #49	; 0x31
     aee:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     af0:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
     af2:	3202      	adds	r2, #2
     af4:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
     af6:	2300      	movs	r3, #0
     af8:	e7ef      	b.n	ada <i2c_slave_read_packet_job+0x8>

00000afa <i2c_slave_write_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
     afa:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
     afc:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
     afe:	2a00      	cmp	r2, #0
     b00:	d001      	beq.n	b06 <i2c_slave_write_packet_job+0xc>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
}
     b02:	0018      	movs	r0, r3
     b04:	4770      	bx	lr
	module->buffer           = packet->data;
     b06:	684b      	ldr	r3, [r1, #4]
     b08:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
     b0a:	880b      	ldrh	r3, [r1, #0]
     b0c:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
     b0e:	880b      	ldrh	r3, [r1, #0]
     b10:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
     b12:	3205      	adds	r2, #5
     b14:	2331      	movs	r3, #49	; 0x31
     b16:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     b18:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
     b1a:	3202      	adds	r2, #2
     b1c:	759a      	strb	r2, [r3, #22]
	return STATUS_OK;
     b1e:	2300      	movs	r3, #0
     b20:	e7ef      	b.n	b02 <i2c_slave_write_packet_job+0x8>
	...

00000b24 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
     b24:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
     b26:	0080      	lsls	r0, r0, #2
     b28:	4b9b      	ldr	r3, [pc, #620]	; (d98 <_i2c_slave_interrupt_handler+0x274>)
     b2a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_slave_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     b2c:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask = module->enabled_callback;
     b2e:	2325      	movs	r3, #37	; 0x25
     b30:	5ce3      	ldrb	r3, [r4, r3]
	callback_mask &= module->registered_callback;
     b32:	2224      	movs	r2, #36	; 0x24
     b34:	5ca6      	ldrb	r6, [r4, r2]
     b36:	401e      	ands	r6, r3


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
     b38:	7e2b      	ldrb	r3, [r5, #24]
     b3a:	079b      	lsls	r3, r3, #30
     b3c:	d400      	bmi.n	b40 <_i2c_slave_interrupt_handler+0x1c>
     b3e:	e095      	b.n	c6c <_i2c_slave_interrupt_handler+0x148>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
     b40:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     b42:	b29b      	uxth	r3, r3
     b44:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     b46:	4293      	cmp	r3, r2
     b48:	d00d      	beq.n	b66 <_i2c_slave_interrupt_handler+0x42>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
     b4a:	2330      	movs	r3, #48	; 0x30
     b4c:	5ce3      	ldrb	r3, [r4, r3]
		if (module->buffer_length != module->buffer_remaining &&
     b4e:	2b00      	cmp	r3, #0
     b50:	d109      	bne.n	b66 <_i2c_slave_interrupt_handler+0x42>

			module->status = STATUS_OK;
     b52:	2231      	movs	r2, #49	; 0x31
     b54:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     b56:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     b58:	8523      	strh	r3, [r4, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
     b5a:	07b3      	lsls	r3, r6, #30
     b5c:	d50b      	bpl.n	b76 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     b5e:	6923      	ldr	r3, [r4, #16]
     b60:	0020      	movs	r0, r4
     b62:	4798      	blx	r3
     b64:	e007      	b.n	b76 <_i2c_slave_interrupt_handler+0x52>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
     b66:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     b68:	b29b      	uxth	r3, r3
     b6a:	429a      	cmp	r2, r3
     b6c:	d003      	beq.n	b76 <_i2c_slave_interrupt_handler+0x52>
				module->transfer_direction == I2C_TRANSFER_READ) {
     b6e:	2330      	movs	r3, #48	; 0x30
     b70:	5ce3      	ldrb	r3, [r4, r3]
		} else if (module->buffer_length != module->buffer_remaining &&
     b72:	2b01      	cmp	r3, #1
     b74:	d022      	beq.n	bbc <_i2c_slave_interrupt_handler+0x98>
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     b76:	8b6a      	ldrh	r2, [r5, #26]
     b78:	2343      	movs	r3, #67	; 0x43
     b7a:	421a      	tst	r2, r3
     b7c:	d004      	beq.n	b88 <_i2c_slave_interrupt_handler+0x64>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
     b7e:	2210      	movs	r2, #16
     b80:	3b12      	subs	r3, #18
     b82:	54e2      	strb	r2, [r4, r3]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
     b84:	06b3      	lsls	r3, r6, #26
     b86:	d424      	bmi.n	bd2 <_i2c_slave_interrupt_handler+0xae>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
			}
		}
		if (module->nack_on_address) {
     b88:	7a63      	ldrb	r3, [r4, #9]
     b8a:	2b00      	cmp	r3, #0
     b8c:	d125      	bne.n	bda <_i2c_slave_interrupt_handler+0xb6>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
     b8e:	8b6b      	ldrh	r3, [r5, #26]
     b90:	071b      	lsls	r3, r3, #28
     b92:	d54a      	bpl.n	c2a <_i2c_slave_interrupt_handler+0x106>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
     b94:	2201      	movs	r2, #1
     b96:	2330      	movs	r3, #48	; 0x30
     b98:	54e2      	strb	r2, [r4, r3]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
     b9a:	0773      	lsls	r3, r6, #29
     b9c:	d438      	bmi.n	c10 <_i2c_slave_interrupt_handler+0xec>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
			}

			if (module->buffer_length == 0) {
     b9e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     ba0:	b29b      	uxth	r3, r3
     ba2:	2b00      	cmp	r3, #0
     ba4:	d138      	bne.n	c18 <_i2c_slave_interrupt_handler+0xf4>
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     ba6:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     ba8:	4b7c      	ldr	r3, [pc, #496]	; (d9c <_i2c_slave_interrupt_handler+0x278>)
     baa:	4798      	blx	r3

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21 || SAMHA1 || SAMR30)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
	i2c_hw->STATUS.reg = 0;
     bac:	2300      	movs	r3, #0
     bae:	836b      	strh	r3, [r5, #26]

	if (send_ack == true) {
		i2c_hw->CTRLB.reg = 0;
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     bb0:	2380      	movs	r3, #128	; 0x80
     bb2:	02db      	lsls	r3, r3, #11
     bb4:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     bb6:	4b7a      	ldr	r3, [pc, #488]	; (da0 <_i2c_slave_interrupt_handler+0x27c>)
     bb8:	4798      	blx	r3
     bba:	e018      	b.n	bee <_i2c_slave_interrupt_handler+0xca>
			module->status = STATUS_OK;
     bbc:	2300      	movs	r3, #0
     bbe:	2231      	movs	r2, #49	; 0x31
     bc0:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     bc2:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     bc4:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
     bc6:	07f3      	lsls	r3, r6, #31
     bc8:	d5d5      	bpl.n	b76 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     bca:	68e3      	ldr	r3, [r4, #12]
     bcc:	0020      	movs	r0, r4
     bce:	4798      	blx	r3
     bd0:	e7d1      	b.n	b76 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
     bd2:	6a23      	ldr	r3, [r4, #32]
     bd4:	0020      	movs	r0, r4
     bd6:	4798      	blx	r3
     bd8:	e7d6      	b.n	b88 <_i2c_slave_interrupt_handler+0x64>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     bda:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     bdc:	4b6f      	ldr	r3, [pc, #444]	; (d9c <_i2c_slave_interrupt_handler+0x278>)
     bde:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     be0:	2300      	movs	r3, #0
     be2:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     be4:	2380      	movs	r3, #128	; 0x80
     be6:	02db      	lsls	r3, r3, #11
     be8:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     bea:	4b6d      	ldr	r3, [pc, #436]	; (da0 <_i2c_slave_interrupt_handler+0x27c>)
     bec:	4798      	blx	r3
		struct i2c_slave_module *const module)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     bee:	6823      	ldr	r3, [r4, #0]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
     bf0:	7e1a      	ldrb	r2, [r3, #24]
     bf2:	07d2      	lsls	r2, r2, #31
     bf4:	d501      	bpl.n	bfa <_i2c_slave_interrupt_handler+0xd6>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     bf6:	2201      	movs	r2, #1
     bf8:	761a      	strb	r2, [r3, #24]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     bfa:	2202      	movs	r2, #2
     bfc:	761a      	strb	r2, [r3, #24]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     bfe:	6824      	ldr	r4, [r4, #0]
	cpu_irq_enter_critical();
     c00:	4b66      	ldr	r3, [pc, #408]	; (d9c <_i2c_slave_interrupt_handler+0x278>)
     c02:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     c04:	2300      	movs	r3, #0
     c06:	8363      	strh	r3, [r4, #26]
		i2c_hw->CTRLB.reg = 0;
     c08:	6063      	str	r3, [r4, #4]
	cpu_irq_leave_critical();
     c0a:	4b65      	ldr	r3, [pc, #404]	; (da0 <_i2c_slave_interrupt_handler+0x27c>)
     c0c:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
     c0e:	bd70      	pop	{r4, r5, r6, pc}
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
     c10:	6963      	ldr	r3, [r4, #20]
     c12:	0020      	movs	r0, r4
     c14:	4798      	blx	r3
     c16:	e7c2      	b.n	b9e <_i2c_slave_interrupt_handler+0x7a>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     c18:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     c1a:	4b60      	ldr	r3, [pc, #384]	; (d9c <_i2c_slave_interrupt_handler+0x278>)
     c1c:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     c1e:	2300      	movs	r3, #0
     c20:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = 0;
     c22:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     c24:	4b5e      	ldr	r3, [pc, #376]	; (da0 <_i2c_slave_interrupt_handler+0x27c>)
     c26:	4798      	blx	r3
     c28:	e7e1      	b.n	bee <_i2c_slave_interrupt_handler+0xca>
			module->transfer_direction = I2C_TRANSFER_WRITE;
     c2a:	2200      	movs	r2, #0
     c2c:	2330      	movs	r3, #48	; 0x30
     c2e:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
     c30:	0733      	lsls	r3, r6, #28
     c32:	d40e      	bmi.n	c52 <_i2c_slave_interrupt_handler+0x12e>
			if (module->buffer_length == 0) {
     c34:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     c36:	b29b      	uxth	r3, r3
     c38:	2b00      	cmp	r3, #0
     c3a:	d10e      	bne.n	c5a <_i2c_slave_interrupt_handler+0x136>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     c3c:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     c3e:	4b57      	ldr	r3, [pc, #348]	; (d9c <_i2c_slave_interrupt_handler+0x278>)
     c40:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     c42:	2300      	movs	r3, #0
     c44:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     c46:	2380      	movs	r3, #128	; 0x80
     c48:	02db      	lsls	r3, r3, #11
     c4a:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     c4c:	4b54      	ldr	r3, [pc, #336]	; (da0 <_i2c_slave_interrupt_handler+0x27c>)
     c4e:	4798      	blx	r3
     c50:	e7cd      	b.n	bee <_i2c_slave_interrupt_handler+0xca>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
     c52:	69a3      	ldr	r3, [r4, #24]
     c54:	0020      	movs	r0, r4
     c56:	4798      	blx	r3
     c58:	e7ec      	b.n	c34 <_i2c_slave_interrupt_handler+0x110>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     c5a:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     c5c:	4b4f      	ldr	r3, [pc, #316]	; (d9c <_i2c_slave_interrupt_handler+0x278>)
     c5e:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     c60:	2300      	movs	r3, #0
     c62:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = 0;
     c64:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     c66:	4b4e      	ldr	r3, [pc, #312]	; (da0 <_i2c_slave_interrupt_handler+0x27c>)
     c68:	4798      	blx	r3
     c6a:	e7c0      	b.n	bee <_i2c_slave_interrupt_handler+0xca>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
     c6c:	7e2b      	ldrb	r3, [r5, #24]
     c6e:	07db      	lsls	r3, r3, #31
     c70:	d52e      	bpl.n	cd0 <_i2c_slave_interrupt_handler+0x1ac>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     c72:	2301      	movs	r3, #1
     c74:	762b      	strb	r3, [r5, #24]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
     c76:	3304      	adds	r3, #4
     c78:	752b      	strb	r3, [r5, #20]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     c7a:	3320      	adds	r3, #32
     c7c:	5ce3      	ldrb	r3, [r4, r3]
     c7e:	075b      	lsls	r3, r3, #29
     c80:	d405      	bmi.n	c8e <_i2c_slave_interrupt_handler+0x16a>
				|| (module->enabled_callback == (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
     c82:	2325      	movs	r3, #37	; 0x25
     c84:	5ce3      	ldrb	r3, [r4, r3]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     c86:	2b08      	cmp	r3, #8
     c88:	d001      	beq.n	c8e <_i2c_slave_interrupt_handler+0x16a>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     c8a:	2302      	movs	r3, #2
     c8c:	752b      	strb	r3, [r5, #20]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
     c8e:	2331      	movs	r3, #49	; 0x31
     c90:	5ce3      	ldrb	r3, [r4, r3]
     c92:	2b1e      	cmp	r3, #30
     c94:	d0bb      	beq.n	c0e <_i2c_slave_interrupt_handler+0xea>
     c96:	2331      	movs	r3, #49	; 0x31
     c98:	5ce3      	ldrb	r3, [r4, r3]
     c9a:	2b10      	cmp	r3, #16
     c9c:	d0b7      	beq.n	c0e <_i2c_slave_interrupt_handler+0xea>
			module->status = STATUS_OK;
     c9e:	2300      	movs	r3, #0
     ca0:	2231      	movs	r2, #49	; 0x31
     ca2:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     ca4:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     ca6:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
     ca8:	07b3      	lsls	r3, r6, #30
     caa:	d503      	bpl.n	cb4 <_i2c_slave_interrupt_handler+0x190>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     cac:	2330      	movs	r3, #48	; 0x30
     cae:	5ce3      	ldrb	r3, [r4, r3]
     cb0:	2b00      	cmp	r3, #0
     cb2:	d009      	beq.n	cc8 <_i2c_slave_interrupt_handler+0x1a4>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
     cb4:	07f3      	lsls	r3, r6, #31
     cb6:	d5aa      	bpl.n	c0e <_i2c_slave_interrupt_handler+0xea>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     cb8:	2330      	movs	r3, #48	; 0x30
     cba:	5ce3      	ldrb	r3, [r4, r3]
     cbc:	2b01      	cmp	r3, #1
     cbe:	d1a6      	bne.n	c0e <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     cc0:	68e3      	ldr	r3, [r4, #12]
     cc2:	0020      	movs	r0, r4
     cc4:	4798      	blx	r3
     cc6:	e7a2      	b.n	c0e <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     cc8:	6923      	ldr	r3, [r4, #16]
     cca:	0020      	movs	r0, r4
     ccc:	4798      	blx	r3
     cce:	e79e      	b.n	c0e <_i2c_slave_interrupt_handler+0xea>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
     cd0:	7e2b      	ldrb	r3, [r5, #24]
     cd2:	075b      	lsls	r3, r3, #29
     cd4:	d59b      	bpl.n	c0e <_i2c_slave_interrupt_handler+0xea>
		if (module->buffer_remaining <= 0 ||
     cd6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     cd8:	2b00      	cmp	r3, #0
     cda:	d01e      	beq.n	d1a <_i2c_slave_interrupt_handler+0x1f6>
				(module->transfer_direction == I2C_TRANSFER_READ &&
     cdc:	2230      	movs	r2, #48	; 0x30
     cde:	5ca2      	ldrb	r2, [r4, r2]
		if (module->buffer_remaining <= 0 ||
     ce0:	2a01      	cmp	r2, #1
     ce2:	d013      	beq.n	d0c <_i2c_slave_interrupt_handler+0x1e8>
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
     ce4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     ce6:	b29b      	uxth	r3, r3
     ce8:	2b00      	cmp	r3, #0
     cea:	d100      	bne.n	cee <_i2c_slave_interrupt_handler+0x1ca>
     cec:	e78f      	b.n	c0e <_i2c_slave_interrupt_handler+0xea>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     cee:	2330      	movs	r3, #48	; 0x30
     cf0:	5ce3      	ldrb	r3, [r4, r3]
     cf2:	2b00      	cmp	r3, #0
     cf4:	d044      	beq.n	d80 <_i2c_slave_interrupt_handler+0x25c>
	i2c_hw->DATA.reg = *(module->buffer++);
     cf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     cf8:	1c5a      	adds	r2, r3, #1
     cfa:	62e2      	str	r2, [r4, #44]	; 0x2c
     cfc:	781b      	ldrb	r3, [r3, #0]
     cfe:	b2db      	uxtb	r3, r3
     d00:	2228      	movs	r2, #40	; 0x28
     d02:	54ab      	strb	r3, [r5, r2]
	module->buffer_remaining--;
     d04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d06:	3b01      	subs	r3, #1
     d08:	8523      	strh	r3, [r4, #40]	; 0x28
}
     d0a:	e780      	b.n	c0e <_i2c_slave_interrupt_handler+0xea>
				(module->buffer_length > module->buffer_remaining) &&
     d0c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
     d0e:	b292      	uxth	r2, r2
				(module->transfer_direction == I2C_TRANSFER_READ &&
     d10:	4293      	cmp	r3, r2
     d12:	d2e7      	bcs.n	ce4 <_i2c_slave_interrupt_handler+0x1c0>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
     d14:	8b6b      	ldrh	r3, [r5, #26]
				(module->buffer_length > module->buffer_remaining) &&
     d16:	075b      	lsls	r3, r3, #29
     d18:	d5e4      	bpl.n	ce4 <_i2c_slave_interrupt_handler+0x1c0>
			module->buffer_remaining = 0;
     d1a:	2300      	movs	r3, #0
     d1c:	8523      	strh	r3, [r4, #40]	; 0x28
			module->buffer_length = 0;
     d1e:	84e3      	strh	r3, [r4, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     d20:	3330      	adds	r3, #48	; 0x30
     d22:	5ce3      	ldrb	r3, [r4, r3]
     d24:	2b00      	cmp	r3, #0
     d26:	d117      	bne.n	d58 <_i2c_slave_interrupt_handler+0x234>
	cpu_irq_enter_critical();
     d28:	4b1c      	ldr	r3, [pc, #112]	; (d9c <_i2c_slave_interrupt_handler+0x278>)
     d2a:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     d2c:	2300      	movs	r3, #0
     d2e:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     d30:	2380      	movs	r3, #128	; 0x80
     d32:	02db      	lsls	r3, r3, #11
     d34:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     d36:	4b1a      	ldr	r3, [pc, #104]	; (da0 <_i2c_slave_interrupt_handler+0x27c>)
     d38:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     d3a:	686a      	ldr	r2, [r5, #4]
     d3c:	2380      	movs	r3, #128	; 0x80
     d3e:	029b      	lsls	r3, r3, #10
     d40:	4313      	orrs	r3, r2
     d42:	606b      	str	r3, [r5, #4]
				module->status = STATUS_ERR_OVERFLOW;
     d44:	221e      	movs	r2, #30
     d46:	2331      	movs	r3, #49	; 0x31
     d48:	54e2      	strb	r2, [r4, r3]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
     d4a:	06f3      	lsls	r3, r6, #27
     d4c:	d400      	bmi.n	d50 <_i2c_slave_interrupt_handler+0x22c>
     d4e:	e75e      	b.n	c0e <_i2c_slave_interrupt_handler+0xea>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
     d50:	69e3      	ldr	r3, [r4, #28]
     d52:	0020      	movs	r0, r4
     d54:	4798      	blx	r3
     d56:	e75a      	b.n	c0e <_i2c_slave_interrupt_handler+0xea>
	cpu_irq_enter_critical();
     d58:	4b10      	ldr	r3, [pc, #64]	; (d9c <_i2c_slave_interrupt_handler+0x278>)
     d5a:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     d5c:	2300      	movs	r3, #0
     d5e:	836b      	strh	r3, [r5, #26]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     d60:	2380      	movs	r3, #128	; 0x80
     d62:	02db      	lsls	r3, r3, #11
     d64:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     d66:	4b0e      	ldr	r3, [pc, #56]	; (da0 <_i2c_slave_interrupt_handler+0x27c>)
     d68:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     d6a:	686a      	ldr	r2, [r5, #4]
     d6c:	2380      	movs	r3, #128	; 0x80
     d6e:	029b      	lsls	r3, r3, #10
     d70:	4313      	orrs	r3, r2
     d72:	606b      	str	r3, [r5, #4]
				module->status = STATUS_OK;
     d74:	2331      	movs	r3, #49	; 0x31
     d76:	2200      	movs	r2, #0
     d78:	54e2      	strb	r2, [r4, r3]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
     d7a:	3b2d      	subs	r3, #45	; 0x2d
     d7c:	752b      	strb	r3, [r5, #20]
     d7e:	e746      	b.n	c0e <_i2c_slave_interrupt_handler+0xea>
	*(module->buffer++) = i2c_hw->DATA.reg;
     d80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     d82:	1c53      	adds	r3, r2, #1
     d84:	62e3      	str	r3, [r4, #44]	; 0x2c
     d86:	2328      	movs	r3, #40	; 0x28
     d88:	5ceb      	ldrb	r3, [r5, r3]
     d8a:	b2db      	uxtb	r3, r3
     d8c:	7013      	strb	r3, [r2, #0]
	module->buffer_remaining--;
     d8e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d90:	3b01      	subs	r3, #1
     d92:	8523      	strh	r3, [r4, #40]	; 0x28
     d94:	e73b      	b.n	c0e <_i2c_slave_interrupt_handler+0xea>
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	200000d0 	.word	0x200000d0
     d9c:	0000106d 	.word	0x0000106d
     da0:	000010ad 	.word	0x000010ad

00000da4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     da4:	b510      	push	{r4, lr}
     da6:	b082      	sub	sp, #8
     da8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     daa:	4b0e      	ldr	r3, [pc, #56]	; (de4 <sercom_set_gclk_generator+0x40>)
     dac:	781b      	ldrb	r3, [r3, #0]
     dae:	2b00      	cmp	r3, #0
     db0:	d007      	beq.n	dc2 <sercom_set_gclk_generator+0x1e>
     db2:	2900      	cmp	r1, #0
     db4:	d105      	bne.n	dc2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     db6:	4b0b      	ldr	r3, [pc, #44]	; (de4 <sercom_set_gclk_generator+0x40>)
     db8:	785b      	ldrb	r3, [r3, #1]
     dba:	4283      	cmp	r3, r0
     dbc:	d010      	beq.n	de0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     dbe:	201d      	movs	r0, #29
     dc0:	e00c      	b.n	ddc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     dc2:	a901      	add	r1, sp, #4
     dc4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     dc6:	2011      	movs	r0, #17
     dc8:	4b07      	ldr	r3, [pc, #28]	; (de8 <sercom_set_gclk_generator+0x44>)
     dca:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     dcc:	2011      	movs	r0, #17
     dce:	4b07      	ldr	r3, [pc, #28]	; (dec <sercom_set_gclk_generator+0x48>)
     dd0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     dd2:	4b04      	ldr	r3, [pc, #16]	; (de4 <sercom_set_gclk_generator+0x40>)
     dd4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     dd6:	2201      	movs	r2, #1
     dd8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     dda:	2000      	movs	r0, #0
}
     ddc:	b002      	add	sp, #8
     dde:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     de0:	2000      	movs	r0, #0
     de2:	e7fb      	b.n	ddc <sercom_set_gclk_generator+0x38>
     de4:	20000038 	.word	0x20000038
     de8:	000014e5 	.word	0x000014e5
     dec:	00001475 	.word	0x00001475

00000df0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     df0:	4b40      	ldr	r3, [pc, #256]	; (ef4 <_sercom_get_default_pad+0x104>)
     df2:	4298      	cmp	r0, r3
     df4:	d032      	beq.n	e5c <_sercom_get_default_pad+0x6c>
     df6:	d90a      	bls.n	e0e <_sercom_get_default_pad+0x1e>
     df8:	4b3f      	ldr	r3, [pc, #252]	; (ef8 <_sercom_get_default_pad+0x108>)
     dfa:	4298      	cmp	r0, r3
     dfc:	d04e      	beq.n	e9c <_sercom_get_default_pad+0xac>
     dfe:	4b3f      	ldr	r3, [pc, #252]	; (efc <_sercom_get_default_pad+0x10c>)
     e00:	4298      	cmp	r0, r3
     e02:	d05b      	beq.n	ebc <_sercom_get_default_pad+0xcc>
     e04:	4b3e      	ldr	r3, [pc, #248]	; (f00 <_sercom_get_default_pad+0x110>)
     e06:	4298      	cmp	r0, r3
     e08:	d038      	beq.n	e7c <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     e0a:	2000      	movs	r0, #0
}
     e0c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     e0e:	2384      	movs	r3, #132	; 0x84
     e10:	05db      	lsls	r3, r3, #23
     e12:	4298      	cmp	r0, r3
     e14:	d00c      	beq.n	e30 <_sercom_get_default_pad+0x40>
     e16:	4b3b      	ldr	r3, [pc, #236]	; (f04 <_sercom_get_default_pad+0x114>)
     e18:	4298      	cmp	r0, r3
     e1a:	d1f6      	bne.n	e0a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e1c:	2901      	cmp	r1, #1
     e1e:	d017      	beq.n	e50 <_sercom_get_default_pad+0x60>
     e20:	2900      	cmp	r1, #0
     e22:	d05d      	beq.n	ee0 <_sercom_get_default_pad+0xf0>
     e24:	2902      	cmp	r1, #2
     e26:	d015      	beq.n	e54 <_sercom_get_default_pad+0x64>
     e28:	2903      	cmp	r1, #3
     e2a:	d015      	beq.n	e58 <_sercom_get_default_pad+0x68>
	return 0;
     e2c:	2000      	movs	r0, #0
     e2e:	e7ed      	b.n	e0c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e30:	2901      	cmp	r1, #1
     e32:	d007      	beq.n	e44 <_sercom_get_default_pad+0x54>
     e34:	2900      	cmp	r1, #0
     e36:	d051      	beq.n	edc <_sercom_get_default_pad+0xec>
     e38:	2902      	cmp	r1, #2
     e3a:	d005      	beq.n	e48 <_sercom_get_default_pad+0x58>
     e3c:	2903      	cmp	r1, #3
     e3e:	d005      	beq.n	e4c <_sercom_get_default_pad+0x5c>
	return 0;
     e40:	2000      	movs	r0, #0
     e42:	e7e3      	b.n	e0c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e44:	4830      	ldr	r0, [pc, #192]	; (f08 <_sercom_get_default_pad+0x118>)
     e46:	e7e1      	b.n	e0c <_sercom_get_default_pad+0x1c>
     e48:	4830      	ldr	r0, [pc, #192]	; (f0c <_sercom_get_default_pad+0x11c>)
     e4a:	e7df      	b.n	e0c <_sercom_get_default_pad+0x1c>
     e4c:	4830      	ldr	r0, [pc, #192]	; (f10 <_sercom_get_default_pad+0x120>)
     e4e:	e7dd      	b.n	e0c <_sercom_get_default_pad+0x1c>
     e50:	4830      	ldr	r0, [pc, #192]	; (f14 <_sercom_get_default_pad+0x124>)
     e52:	e7db      	b.n	e0c <_sercom_get_default_pad+0x1c>
     e54:	4830      	ldr	r0, [pc, #192]	; (f18 <_sercom_get_default_pad+0x128>)
     e56:	e7d9      	b.n	e0c <_sercom_get_default_pad+0x1c>
     e58:	4830      	ldr	r0, [pc, #192]	; (f1c <_sercom_get_default_pad+0x12c>)
     e5a:	e7d7      	b.n	e0c <_sercom_get_default_pad+0x1c>
     e5c:	2901      	cmp	r1, #1
     e5e:	d007      	beq.n	e70 <_sercom_get_default_pad+0x80>
     e60:	2900      	cmp	r1, #0
     e62:	d03f      	beq.n	ee4 <_sercom_get_default_pad+0xf4>
     e64:	2902      	cmp	r1, #2
     e66:	d005      	beq.n	e74 <_sercom_get_default_pad+0x84>
     e68:	2903      	cmp	r1, #3
     e6a:	d005      	beq.n	e78 <_sercom_get_default_pad+0x88>
	return 0;
     e6c:	2000      	movs	r0, #0
     e6e:	e7cd      	b.n	e0c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e70:	482b      	ldr	r0, [pc, #172]	; (f20 <_sercom_get_default_pad+0x130>)
     e72:	e7cb      	b.n	e0c <_sercom_get_default_pad+0x1c>
     e74:	482b      	ldr	r0, [pc, #172]	; (f24 <_sercom_get_default_pad+0x134>)
     e76:	e7c9      	b.n	e0c <_sercom_get_default_pad+0x1c>
     e78:	482b      	ldr	r0, [pc, #172]	; (f28 <_sercom_get_default_pad+0x138>)
     e7a:	e7c7      	b.n	e0c <_sercom_get_default_pad+0x1c>
     e7c:	2901      	cmp	r1, #1
     e7e:	d007      	beq.n	e90 <_sercom_get_default_pad+0xa0>
     e80:	2900      	cmp	r1, #0
     e82:	d031      	beq.n	ee8 <_sercom_get_default_pad+0xf8>
     e84:	2902      	cmp	r1, #2
     e86:	d005      	beq.n	e94 <_sercom_get_default_pad+0xa4>
     e88:	2903      	cmp	r1, #3
     e8a:	d005      	beq.n	e98 <_sercom_get_default_pad+0xa8>
	return 0;
     e8c:	2000      	movs	r0, #0
     e8e:	e7bd      	b.n	e0c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e90:	4826      	ldr	r0, [pc, #152]	; (f2c <_sercom_get_default_pad+0x13c>)
     e92:	e7bb      	b.n	e0c <_sercom_get_default_pad+0x1c>
     e94:	4826      	ldr	r0, [pc, #152]	; (f30 <_sercom_get_default_pad+0x140>)
     e96:	e7b9      	b.n	e0c <_sercom_get_default_pad+0x1c>
     e98:	4826      	ldr	r0, [pc, #152]	; (f34 <_sercom_get_default_pad+0x144>)
     e9a:	e7b7      	b.n	e0c <_sercom_get_default_pad+0x1c>
     e9c:	2901      	cmp	r1, #1
     e9e:	d007      	beq.n	eb0 <_sercom_get_default_pad+0xc0>
     ea0:	2900      	cmp	r1, #0
     ea2:	d023      	beq.n	eec <_sercom_get_default_pad+0xfc>
     ea4:	2902      	cmp	r1, #2
     ea6:	d005      	beq.n	eb4 <_sercom_get_default_pad+0xc4>
     ea8:	2903      	cmp	r1, #3
     eaa:	d005      	beq.n	eb8 <_sercom_get_default_pad+0xc8>
	return 0;
     eac:	2000      	movs	r0, #0
     eae:	e7ad      	b.n	e0c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     eb0:	4821      	ldr	r0, [pc, #132]	; (f38 <_sercom_get_default_pad+0x148>)
     eb2:	e7ab      	b.n	e0c <_sercom_get_default_pad+0x1c>
     eb4:	4821      	ldr	r0, [pc, #132]	; (f3c <_sercom_get_default_pad+0x14c>)
     eb6:	e7a9      	b.n	e0c <_sercom_get_default_pad+0x1c>
     eb8:	4821      	ldr	r0, [pc, #132]	; (f40 <_sercom_get_default_pad+0x150>)
     eba:	e7a7      	b.n	e0c <_sercom_get_default_pad+0x1c>
     ebc:	2901      	cmp	r1, #1
     ebe:	d007      	beq.n	ed0 <_sercom_get_default_pad+0xe0>
     ec0:	2900      	cmp	r1, #0
     ec2:	d015      	beq.n	ef0 <_sercom_get_default_pad+0x100>
     ec4:	2902      	cmp	r1, #2
     ec6:	d005      	beq.n	ed4 <_sercom_get_default_pad+0xe4>
     ec8:	2903      	cmp	r1, #3
     eca:	d005      	beq.n	ed8 <_sercom_get_default_pad+0xe8>
	return 0;
     ecc:	2000      	movs	r0, #0
     ece:	e79d      	b.n	e0c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ed0:	481c      	ldr	r0, [pc, #112]	; (f44 <_sercom_get_default_pad+0x154>)
     ed2:	e79b      	b.n	e0c <_sercom_get_default_pad+0x1c>
     ed4:	481c      	ldr	r0, [pc, #112]	; (f48 <_sercom_get_default_pad+0x158>)
     ed6:	e799      	b.n	e0c <_sercom_get_default_pad+0x1c>
     ed8:	481c      	ldr	r0, [pc, #112]	; (f4c <_sercom_get_default_pad+0x15c>)
     eda:	e797      	b.n	e0c <_sercom_get_default_pad+0x1c>
     edc:	481c      	ldr	r0, [pc, #112]	; (f50 <_sercom_get_default_pad+0x160>)
     ede:	e795      	b.n	e0c <_sercom_get_default_pad+0x1c>
     ee0:	2003      	movs	r0, #3
     ee2:	e793      	b.n	e0c <_sercom_get_default_pad+0x1c>
     ee4:	481b      	ldr	r0, [pc, #108]	; (f54 <_sercom_get_default_pad+0x164>)
     ee6:	e791      	b.n	e0c <_sercom_get_default_pad+0x1c>
     ee8:	481b      	ldr	r0, [pc, #108]	; (f58 <_sercom_get_default_pad+0x168>)
     eea:	e78f      	b.n	e0c <_sercom_get_default_pad+0x1c>
     eec:	481b      	ldr	r0, [pc, #108]	; (f5c <_sercom_get_default_pad+0x16c>)
     eee:	e78d      	b.n	e0c <_sercom_get_default_pad+0x1c>
     ef0:	481b      	ldr	r0, [pc, #108]	; (f60 <_sercom_get_default_pad+0x170>)
     ef2:	e78b      	b.n	e0c <_sercom_get_default_pad+0x1c>
     ef4:	42000800 	.word	0x42000800
     ef8:	42001000 	.word	0x42001000
     efc:	43000400 	.word	0x43000400
     f00:	42000c00 	.word	0x42000c00
     f04:	42000400 	.word	0x42000400
     f08:	00050003 	.word	0x00050003
     f0c:	00060003 	.word	0x00060003
     f10:	00070003 	.word	0x00070003
     f14:	00010003 	.word	0x00010003
     f18:	001e0003 	.word	0x001e0003
     f1c:	001f0003 	.word	0x001f0003
     f20:	00090003 	.word	0x00090003
     f24:	000a0003 	.word	0x000a0003
     f28:	000b0003 	.word	0x000b0003
     f2c:	00110003 	.word	0x00110003
     f30:	00120003 	.word	0x00120003
     f34:	00130003 	.word	0x00130003
     f38:	000d0003 	.word	0x000d0003
     f3c:	000e0003 	.word	0x000e0003
     f40:	000f0003 	.word	0x000f0003
     f44:	00170003 	.word	0x00170003
     f48:	00180003 	.word	0x00180003
     f4c:	00190003 	.word	0x00190003
     f50:	00040003 	.word	0x00040003
     f54:	00080003 	.word	0x00080003
     f58:	00100003 	.word	0x00100003
     f5c:	000c0003 	.word	0x000c0003
     f60:	00160003 	.word	0x00160003

00000f64 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     f64:	b530      	push	{r4, r5, lr}
     f66:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     f68:	4b0b      	ldr	r3, [pc, #44]	; (f98 <_sercom_get_sercom_inst_index+0x34>)
     f6a:	466a      	mov	r2, sp
     f6c:	cb32      	ldmia	r3!, {r1, r4, r5}
     f6e:	c232      	stmia	r2!, {r1, r4, r5}
     f70:	cb32      	ldmia	r3!, {r1, r4, r5}
     f72:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f74:	9b00      	ldr	r3, [sp, #0]
     f76:	4283      	cmp	r3, r0
     f78:	d00b      	beq.n	f92 <_sercom_get_sercom_inst_index+0x2e>
     f7a:	2301      	movs	r3, #1
     f7c:	009a      	lsls	r2, r3, #2
     f7e:	4669      	mov	r1, sp
     f80:	5852      	ldr	r2, [r2, r1]
     f82:	4282      	cmp	r2, r0
     f84:	d006      	beq.n	f94 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f86:	3301      	adds	r3, #1
     f88:	2b06      	cmp	r3, #6
     f8a:	d1f7      	bne.n	f7c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     f8c:	2000      	movs	r0, #0
}
     f8e:	b007      	add	sp, #28
     f90:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f92:	2300      	movs	r3, #0
			return i;
     f94:	b2d8      	uxtb	r0, r3
     f96:	e7fa      	b.n	f8e <_sercom_get_sercom_inst_index+0x2a>
     f98:	000056c0 	.word	0x000056c0

00000f9c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     f9c:	4770      	bx	lr
	...

00000fa0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     fa2:	4b0a      	ldr	r3, [pc, #40]	; (fcc <_sercom_set_handler+0x2c>)
     fa4:	781b      	ldrb	r3, [r3, #0]
     fa6:	2b00      	cmp	r3, #0
     fa8:	d10c      	bne.n	fc4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     faa:	4f09      	ldr	r7, [pc, #36]	; (fd0 <_sercom_set_handler+0x30>)
     fac:	4e09      	ldr	r6, [pc, #36]	; (fd4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     fae:	4d0a      	ldr	r5, [pc, #40]	; (fd8 <_sercom_set_handler+0x38>)
     fb0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fb2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     fb4:	195a      	adds	r2, r3, r5
     fb6:	6014      	str	r4, [r2, #0]
     fb8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     fba:	2b18      	cmp	r3, #24
     fbc:	d1f9      	bne.n	fb2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     fbe:	2201      	movs	r2, #1
     fc0:	4b02      	ldr	r3, [pc, #8]	; (fcc <_sercom_set_handler+0x2c>)
     fc2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     fc4:	0080      	lsls	r0, r0, #2
     fc6:	4b02      	ldr	r3, [pc, #8]	; (fd0 <_sercom_set_handler+0x30>)
     fc8:	50c1      	str	r1, [r0, r3]
}
     fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fcc:	2000003a 	.word	0x2000003a
     fd0:	2000003c 	.word	0x2000003c
     fd4:	00000f9d 	.word	0x00000f9d
     fd8:	200000d0 	.word	0x200000d0

00000fdc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     fdc:	b500      	push	{lr}
     fde:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     fe0:	2308      	movs	r3, #8
     fe2:	466a      	mov	r2, sp
     fe4:	7013      	strb	r3, [r2, #0]
     fe6:	3301      	adds	r3, #1
     fe8:	7053      	strb	r3, [r2, #1]
     fea:	3301      	adds	r3, #1
     fec:	7093      	strb	r3, [r2, #2]
     fee:	3301      	adds	r3, #1
     ff0:	70d3      	strb	r3, [r2, #3]
     ff2:	3301      	adds	r3, #1
     ff4:	7113      	strb	r3, [r2, #4]
     ff6:	3301      	adds	r3, #1
     ff8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     ffa:	4b03      	ldr	r3, [pc, #12]	; (1008 <_sercom_get_interrupt_vector+0x2c>)
     ffc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     ffe:	466b      	mov	r3, sp
    1000:	5618      	ldrsb	r0, [r3, r0]
}
    1002:	b003      	add	sp, #12
    1004:	bd00      	pop	{pc}
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	00000f65 	.word	0x00000f65

0000100c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    100c:	b510      	push	{r4, lr}
    100e:	4b02      	ldr	r3, [pc, #8]	; (1018 <SERCOM0_Handler+0xc>)
    1010:	681b      	ldr	r3, [r3, #0]
    1012:	2000      	movs	r0, #0
    1014:	4798      	blx	r3
    1016:	bd10      	pop	{r4, pc}
    1018:	2000003c 	.word	0x2000003c

0000101c <SERCOM1_Handler>:
    101c:	b510      	push	{r4, lr}
    101e:	4b02      	ldr	r3, [pc, #8]	; (1028 <SERCOM1_Handler+0xc>)
    1020:	685b      	ldr	r3, [r3, #4]
    1022:	2001      	movs	r0, #1
    1024:	4798      	blx	r3
    1026:	bd10      	pop	{r4, pc}
    1028:	2000003c 	.word	0x2000003c

0000102c <SERCOM2_Handler>:
    102c:	b510      	push	{r4, lr}
    102e:	4b02      	ldr	r3, [pc, #8]	; (1038 <SERCOM2_Handler+0xc>)
    1030:	689b      	ldr	r3, [r3, #8]
    1032:	2002      	movs	r0, #2
    1034:	4798      	blx	r3
    1036:	bd10      	pop	{r4, pc}
    1038:	2000003c 	.word	0x2000003c

0000103c <SERCOM3_Handler>:
    103c:	b510      	push	{r4, lr}
    103e:	4b02      	ldr	r3, [pc, #8]	; (1048 <SERCOM3_Handler+0xc>)
    1040:	68db      	ldr	r3, [r3, #12]
    1042:	2003      	movs	r0, #3
    1044:	4798      	blx	r3
    1046:	bd10      	pop	{r4, pc}
    1048:	2000003c 	.word	0x2000003c

0000104c <SERCOM4_Handler>:
    104c:	b510      	push	{r4, lr}
    104e:	4b02      	ldr	r3, [pc, #8]	; (1058 <SERCOM4_Handler+0xc>)
    1050:	691b      	ldr	r3, [r3, #16]
    1052:	2004      	movs	r0, #4
    1054:	4798      	blx	r3
    1056:	bd10      	pop	{r4, pc}
    1058:	2000003c 	.word	0x2000003c

0000105c <SERCOM5_Handler>:
    105c:	b510      	push	{r4, lr}
    105e:	4b02      	ldr	r3, [pc, #8]	; (1068 <SERCOM5_Handler+0xc>)
    1060:	695b      	ldr	r3, [r3, #20]
    1062:	2005      	movs	r0, #5
    1064:	4798      	blx	r3
    1066:	bd10      	pop	{r4, pc}
    1068:	2000003c 	.word	0x2000003c

0000106c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    106c:	4b0c      	ldr	r3, [pc, #48]	; (10a0 <cpu_irq_enter_critical+0x34>)
    106e:	681b      	ldr	r3, [r3, #0]
    1070:	2b00      	cmp	r3, #0
    1072:	d106      	bne.n	1082 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1074:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1078:	2b00      	cmp	r3, #0
    107a:	d007      	beq.n	108c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    107c:	2200      	movs	r2, #0
    107e:	4b09      	ldr	r3, [pc, #36]	; (10a4 <cpu_irq_enter_critical+0x38>)
    1080:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1082:	4a07      	ldr	r2, [pc, #28]	; (10a0 <cpu_irq_enter_critical+0x34>)
    1084:	6813      	ldr	r3, [r2, #0]
    1086:	3301      	adds	r3, #1
    1088:	6013      	str	r3, [r2, #0]
}
    108a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    108c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    108e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1092:	2200      	movs	r2, #0
    1094:	4b04      	ldr	r3, [pc, #16]	; (10a8 <cpu_irq_enter_critical+0x3c>)
    1096:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1098:	3201      	adds	r2, #1
    109a:	4b02      	ldr	r3, [pc, #8]	; (10a4 <cpu_irq_enter_critical+0x38>)
    109c:	701a      	strb	r2, [r3, #0]
    109e:	e7f0      	b.n	1082 <cpu_irq_enter_critical+0x16>
    10a0:	20000054 	.word	0x20000054
    10a4:	20000058 	.word	0x20000058
    10a8:	20000000 	.word	0x20000000

000010ac <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    10ac:	4b08      	ldr	r3, [pc, #32]	; (10d0 <cpu_irq_leave_critical+0x24>)
    10ae:	681a      	ldr	r2, [r3, #0]
    10b0:	3a01      	subs	r2, #1
    10b2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    10b4:	681b      	ldr	r3, [r3, #0]
    10b6:	2b00      	cmp	r3, #0
    10b8:	d109      	bne.n	10ce <cpu_irq_leave_critical+0x22>
    10ba:	4b06      	ldr	r3, [pc, #24]	; (10d4 <cpu_irq_leave_critical+0x28>)
    10bc:	781b      	ldrb	r3, [r3, #0]
    10be:	2b00      	cmp	r3, #0
    10c0:	d005      	beq.n	10ce <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    10c2:	2201      	movs	r2, #1
    10c4:	4b04      	ldr	r3, [pc, #16]	; (10d8 <cpu_irq_leave_critical+0x2c>)
    10c6:	701a      	strb	r2, [r3, #0]
    10c8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    10cc:	b662      	cpsie	i
	}
}
    10ce:	4770      	bx	lr
    10d0:	20000054 	.word	0x20000054
    10d4:	20000058 	.word	0x20000058
    10d8:	20000000 	.word	0x20000000

000010dc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    10dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10de:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    10e0:	ac01      	add	r4, sp, #4
    10e2:	2501      	movs	r5, #1
    10e4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    10e6:	2700      	movs	r7, #0
    10e8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    10ea:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    10ec:	0021      	movs	r1, r4
    10ee:	202a      	movs	r0, #42	; 0x2a
    10f0:	4e06      	ldr	r6, [pc, #24]	; (110c <system_board_init+0x30>)
    10f2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    10f4:	2280      	movs	r2, #128	; 0x80
    10f6:	00d2      	lsls	r2, r2, #3
    10f8:	4b05      	ldr	r3, [pc, #20]	; (1110 <system_board_init+0x34>)
    10fa:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    10fc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    10fe:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1100:	0021      	movs	r1, r4
    1102:	2002      	movs	r0, #2
    1104:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1106:	b003      	add	sp, #12
    1108:	bdf0      	pop	{r4, r5, r6, r7, pc}
    110a:	46c0      	nop			; (mov r8, r8)
    110c:	00001115 	.word	0x00001115
    1110:	40002880 	.word	0x40002880

00001114 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1114:	b500      	push	{lr}
    1116:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1118:	ab01      	add	r3, sp, #4
    111a:	2280      	movs	r2, #128	; 0x80
    111c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    111e:	780a      	ldrb	r2, [r1, #0]
    1120:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1122:	784a      	ldrb	r2, [r1, #1]
    1124:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1126:	788a      	ldrb	r2, [r1, #2]
    1128:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    112a:	0019      	movs	r1, r3
    112c:	4b01      	ldr	r3, [pc, #4]	; (1134 <port_pin_set_config+0x20>)
    112e:	4798      	blx	r3
}
    1130:	b003      	add	sp, #12
    1132:	bd00      	pop	{pc}
    1134:	000015e1 	.word	0x000015e1

00001138 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1138:	b510      	push	{r4, lr}
	switch (clock_source) {
    113a:	2808      	cmp	r0, #8
    113c:	d803      	bhi.n	1146 <system_clock_source_get_hz+0xe>
    113e:	0080      	lsls	r0, r0, #2
    1140:	4b1c      	ldr	r3, [pc, #112]	; (11b4 <system_clock_source_get_hz+0x7c>)
    1142:	581b      	ldr	r3, [r3, r0]
    1144:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    1146:	2000      	movs	r0, #0
    1148:	e032      	b.n	11b0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    114a:	4b1b      	ldr	r3, [pc, #108]	; (11b8 <system_clock_source_get_hz+0x80>)
    114c:	6918      	ldr	r0, [r3, #16]
    114e:	e02f      	b.n	11b0 <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    1150:	4b1a      	ldr	r3, [pc, #104]	; (11bc <system_clock_source_get_hz+0x84>)
    1152:	7d18      	ldrb	r0, [r3, #20]
    1154:	0700      	lsls	r0, r0, #28
    1156:	0f80      	lsrs	r0, r0, #30
    1158:	1c43      	adds	r3, r0, #1
    115a:	4819      	ldr	r0, [pc, #100]	; (11c0 <system_clock_source_get_hz+0x88>)
    115c:	4358      	muls	r0, r3
    115e:	e027      	b.n	11b0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1160:	4b15      	ldr	r3, [pc, #84]	; (11b8 <system_clock_source_get_hz+0x80>)
    1162:	6958      	ldr	r0, [r3, #20]
    1164:	e024      	b.n	11b0 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    1166:	4b14      	ldr	r3, [pc, #80]	; (11b8 <system_clock_source_get_hz+0x80>)
    1168:	681b      	ldr	r3, [r3, #0]
			return 0;
    116a:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    116c:	079b      	lsls	r3, r3, #30
    116e:	d51f      	bpl.n	11b0 <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    1170:	4912      	ldr	r1, [pc, #72]	; (11bc <system_clock_source_get_hz+0x84>)
    1172:	2280      	movs	r2, #128	; 0x80
    1174:	0052      	lsls	r2, r2, #1
    1176:	68cb      	ldr	r3, [r1, #12]
    1178:	4213      	tst	r3, r2
    117a:	d0fc      	beq.n	1176 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    117c:	4b0e      	ldr	r3, [pc, #56]	; (11b8 <system_clock_source_get_hz+0x80>)
    117e:	681b      	ldr	r3, [r3, #0]
    1180:	075b      	lsls	r3, r3, #29
    1182:	d401      	bmi.n	1188 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    1184:	480f      	ldr	r0, [pc, #60]	; (11c4 <system_clock_source_get_hz+0x8c>)
    1186:	e013      	b.n	11b0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1188:	2000      	movs	r0, #0
    118a:	4b0f      	ldr	r3, [pc, #60]	; (11c8 <system_clock_source_get_hz+0x90>)
    118c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    118e:	4b0a      	ldr	r3, [pc, #40]	; (11b8 <system_clock_source_get_hz+0x80>)
    1190:	689b      	ldr	r3, [r3, #8]
    1192:	041b      	lsls	r3, r3, #16
    1194:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    1196:	4358      	muls	r0, r3
    1198:	e00a      	b.n	11b0 <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    119a:	2328      	movs	r3, #40	; 0x28
    119c:	4a07      	ldr	r2, [pc, #28]	; (11bc <system_clock_source_get_hz+0x84>)
    119e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    11a0:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    11a2:	079b      	lsls	r3, r3, #30
    11a4:	d504      	bpl.n	11b0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    11a6:	4b04      	ldr	r3, [pc, #16]	; (11b8 <system_clock_source_get_hz+0x80>)
    11a8:	68d8      	ldr	r0, [r3, #12]
    11aa:	e001      	b.n	11b0 <system_clock_source_get_hz+0x78>
		return 32768UL;
    11ac:	2080      	movs	r0, #128	; 0x80
    11ae:	0200      	lsls	r0, r0, #8
	}
}
    11b0:	bd10      	pop	{r4, pc}
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	000056d8 	.word	0x000056d8
    11b8:	2000005c 	.word	0x2000005c
    11bc:	40000c00 	.word	0x40000c00
    11c0:	003d0900 	.word	0x003d0900
    11c4:	02dc6c00 	.word	0x02dc6c00
    11c8:	00001509 	.word	0x00001509

000011cc <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    11cc:	b510      	push	{r4, lr}
    11ce:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    11d0:	2280      	movs	r2, #128	; 0x80
    11d2:	0052      	lsls	r2, r2, #1
    11d4:	4b2b      	ldr	r3, [pc, #172]	; (1284 <system_clock_init+0xb8>)
    11d6:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    11d8:	3afd      	subs	r2, #253	; 0xfd
    11da:	4b2b      	ldr	r3, [pc, #172]	; (1288 <system_clock_init+0xbc>)
    11dc:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    11de:	4a2b      	ldr	r2, [pc, #172]	; (128c <system_clock_init+0xc0>)
    11e0:	6853      	ldr	r3, [r2, #4]
    11e2:	211e      	movs	r1, #30
    11e4:	438b      	bics	r3, r1
    11e6:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    11e8:	2380      	movs	r3, #128	; 0x80
    11ea:	05db      	lsls	r3, r3, #23
    11ec:	789b      	ldrb	r3, [r3, #2]
    11ee:	2b02      	cmp	r3, #2
    11f0:	d009      	beq.n	1206 <system_clock_init+0x3a>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    11f2:	2380      	movs	r3, #128	; 0x80
    11f4:	05db      	lsls	r3, r3, #23
    11f6:	2201      	movs	r2, #1
    11f8:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    11fa:	3201      	adds	r2, #1
    11fc:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    11fe:	001a      	movs	r2, r3
    1200:	7993      	ldrb	r3, [r2, #6]
    1202:	2b00      	cmp	r3, #0
    1204:	d0fc      	beq.n	1200 <system_clock_init+0x34>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    1206:	4b1f      	ldr	r3, [pc, #124]	; (1284 <system_clock_init+0xb8>)
    1208:	7d19      	ldrb	r1, [r3, #20]
    120a:	2280      	movs	r2, #128	; 0x80
    120c:	4252      	negs	r2, r2
    120e:	430a      	orrs	r2, r1
    1210:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    1212:	7d1a      	ldrb	r2, [r3, #20]
    1214:	2140      	movs	r1, #64	; 0x40
    1216:	438a      	bics	r2, r1
    1218:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    121a:	4b1d      	ldr	r3, [pc, #116]	; (1290 <system_clock_init+0xc4>)
    121c:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    121e:	4c1d      	ldr	r4, [pc, #116]	; (1294 <system_clock_init+0xc8>)
    1220:	2301      	movs	r3, #1
    1222:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    1224:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    1226:	7123      	strb	r3, [r4, #4]
		MCLK->CTRLA.reg &= ~MCLK_CTRLA_CFDEN;
    1228:	7822      	ldrb	r2, [r4, #0]
    122a:	2104      	movs	r1, #4
    122c:	438a      	bics	r2, r1
    122e:	7022      	strb	r2, [r4, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1230:	a901      	add	r1, sp, #4
    1232:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    1234:	2300      	movs	r3, #0
    1236:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
    1238:	2206      	movs	r2, #6
    123a:	700a      	strb	r2, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    123c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    123e:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1240:	2000      	movs	r0, #0
    1242:	4b15      	ldr	r3, [pc, #84]	; (1298 <system_clock_init+0xcc>)
    1244:	4798      	blx	r3
    1246:	2000      	movs	r0, #0
    1248:	4b14      	ldr	r3, [pc, #80]	; (129c <system_clock_init+0xd0>)
    124a:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    124c:	2000      	movs	r0, #0
    124e:	4b14      	ldr	r3, [pc, #80]	; (12a0 <system_clock_init+0xd4>)
    1250:	4798      	blx	r3
    1252:	7921      	ldrb	r1, [r4, #4]
    1254:	b2c9      	uxtb	r1, r1
    1256:	4b13      	ldr	r3, [pc, #76]	; (12a4 <system_clock_init+0xd8>)
    1258:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    125a:	4b13      	ldr	r3, [pc, #76]	; (12a8 <system_clock_init+0xdc>)
    125c:	4298      	cmp	r0, r3
    125e:	d80e      	bhi.n	127e <system_clock_init+0xb2>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1260:	2380      	movs	r3, #128	; 0x80
    1262:	05db      	lsls	r3, r3, #23
    1264:	789b      	ldrb	r3, [r3, #2]
    1266:	2b00      	cmp	r3, #0
    1268:	d009      	beq.n	127e <system_clock_init+0xb2>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    126a:	2380      	movs	r3, #128	; 0x80
    126c:	05db      	lsls	r3, r3, #23
    126e:	2201      	movs	r2, #1
    1270:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    1272:	2200      	movs	r2, #0
    1274:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    1276:	001a      	movs	r2, r3
    1278:	7993      	ldrb	r3, [r2, #6]
    127a:	2b00      	cmp	r3, #0
    127c:	d0fc      	beq.n	1278 <system_clock_init+0xac>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    127e:	b004      	add	sp, #16
    1280:	bd10      	pop	{r4, pc}
    1282:	46c0      	nop			; (mov r8, r8)
    1284:	40000c00 	.word	0x40000c00
    1288:	40001400 	.word	0x40001400
    128c:	41004000 	.word	0x41004000
    1290:	000012ad 	.word	0x000012ad
    1294:	40000400 	.word	0x40000400
    1298:	000012d1 	.word	0x000012d1
    129c:	0000137d 	.word	0x0000137d
    12a0:	00001409 	.word	0x00001409
    12a4:	00002fc9 	.word	0x00002fc9
    12a8:	00b71b00 	.word	0x00b71b00

000012ac <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    12ac:	4a06      	ldr	r2, [pc, #24]	; (12c8 <system_gclk_init+0x1c>)
    12ae:	6953      	ldr	r3, [r2, #20]
    12b0:	2140      	movs	r1, #64	; 0x40
    12b2:	430b      	orrs	r3, r1
    12b4:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    12b6:	2201      	movs	r2, #1
    12b8:	4b04      	ldr	r3, [pc, #16]	; (12cc <system_gclk_init+0x20>)
    12ba:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    12bc:	0019      	movs	r1, r3
    12be:	780b      	ldrb	r3, [r1, #0]
    12c0:	4213      	tst	r3, r2
    12c2:	d1fc      	bne.n	12be <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    12c4:	4770      	bx	lr
    12c6:	46c0      	nop			; (mov r8, r8)
    12c8:	40000400 	.word	0x40000400
    12cc:	40001800 	.word	0x40001800

000012d0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    12d0:	b570      	push	{r4, r5, r6, lr}
    12d2:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    12d4:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    12d6:	784b      	ldrb	r3, [r1, #1]
    12d8:	2b00      	cmp	r3, #0
    12da:	d002      	beq.n	12e2 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    12dc:	2380      	movs	r3, #128	; 0x80
    12de:	00db      	lsls	r3, r3, #3
    12e0:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    12e2:	7a4b      	ldrb	r3, [r1, #9]
    12e4:	2b00      	cmp	r3, #0
    12e6:	d002      	beq.n	12ee <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    12e8:	2380      	movs	r3, #128	; 0x80
    12ea:	011b      	lsls	r3, r3, #4
    12ec:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    12ee:	6848      	ldr	r0, [r1, #4]
    12f0:	2801      	cmp	r0, #1
    12f2:	d90f      	bls.n	1314 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    12f4:	1e43      	subs	r3, r0, #1
    12f6:	4218      	tst	r0, r3
    12f8:	d131      	bne.n	135e <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    12fa:	2802      	cmp	r0, #2
    12fc:	d92d      	bls.n	135a <system_gclk_gen_set_config+0x8a>
    12fe:	2302      	movs	r3, #2
    1300:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1302:	3201      	adds	r2, #1
						mask <<= 1) {
    1304:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1306:	4298      	cmp	r0, r3
    1308:	d8fb      	bhi.n	1302 <system_gclk_gen_set_config+0x32>
    130a:	2380      	movs	r3, #128	; 0x80
    130c:	015b      	lsls	r3, r3, #5
    130e:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    1310:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1312:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1314:	7a0b      	ldrb	r3, [r1, #8]
    1316:	2b00      	cmp	r3, #0
    1318:	d002      	beq.n	1320 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    131a:	2380      	movs	r3, #128	; 0x80
    131c:	019b      	lsls	r3, r3, #6
    131e:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1320:	2604      	movs	r6, #4
    1322:	40a6      	lsls	r6, r4
    1324:	4911      	ldr	r1, [pc, #68]	; (136c <system_gclk_gen_set_config+0x9c>)
    1326:	4a12      	ldr	r2, [pc, #72]	; (1370 <system_gclk_gen_set_config+0xa0>)
    1328:	684b      	ldr	r3, [r1, #4]
    132a:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    132c:	421e      	tst	r6, r3
    132e:	d1fb      	bne.n	1328 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    1330:	4b10      	ldr	r3, [pc, #64]	; (1374 <system_gclk_gen_set_config+0xa4>)
    1332:	4798      	blx	r3
    1334:	00a4      	lsls	r4, r4, #2
    1336:	4b0d      	ldr	r3, [pc, #52]	; (136c <system_gclk_gen_set_config+0x9c>)
    1338:	469c      	mov	ip, r3
    133a:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    133c:	6a22      	ldr	r2, [r4, #32]
    133e:	2380      	movs	r3, #128	; 0x80
    1340:	005b      	lsls	r3, r3, #1
    1342:	401a      	ands	r2, r3
    1344:	432a      	orrs	r2, r5
    1346:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1348:	4661      	mov	r1, ip
    134a:	4a09      	ldr	r2, [pc, #36]	; (1370 <system_gclk_gen_set_config+0xa0>)
    134c:	684b      	ldr	r3, [r1, #4]
    134e:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    1350:	421e      	tst	r6, r3
    1352:	d1fb      	bne.n	134c <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    1354:	4b08      	ldr	r3, [pc, #32]	; (1378 <system_gclk_gen_set_config+0xa8>)
    1356:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    1358:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    135a:	2200      	movs	r2, #0
    135c:	e7d5      	b.n	130a <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    135e:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1360:	2380      	movs	r3, #128	; 0x80
    1362:	009b      	lsls	r3, r3, #2
    1364:	4318      	orrs	r0, r3
    1366:	4305      	orrs	r5, r0
    1368:	e7d4      	b.n	1314 <system_gclk_gen_set_config+0x44>
    136a:	46c0      	nop			; (mov r8, r8)
    136c:	40001800 	.word	0x40001800
    1370:	000007fc 	.word	0x000007fc
    1374:	0000106d 	.word	0x0000106d
    1378:	000010ad 	.word	0x000010ad

0000137c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    137c:	b510      	push	{r4, lr}
    137e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1380:	2204      	movs	r2, #4
    1382:	4082      	lsls	r2, r0
    1384:	4809      	ldr	r0, [pc, #36]	; (13ac <system_gclk_gen_enable+0x30>)
    1386:	490a      	ldr	r1, [pc, #40]	; (13b0 <system_gclk_gen_enable+0x34>)
    1388:	6843      	ldr	r3, [r0, #4]
    138a:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    138c:	421a      	tst	r2, r3
    138e:	d1fb      	bne.n	1388 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    1390:	4b08      	ldr	r3, [pc, #32]	; (13b4 <system_gclk_gen_enable+0x38>)
    1392:	4798      	blx	r3
    1394:	00a4      	lsls	r4, r4, #2
    1396:	4b05      	ldr	r3, [pc, #20]	; (13ac <system_gclk_gen_enable+0x30>)
    1398:	469c      	mov	ip, r3
    139a:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    139c:	6a22      	ldr	r2, [r4, #32]
    139e:	2380      	movs	r3, #128	; 0x80
    13a0:	005b      	lsls	r3, r3, #1
    13a2:	4313      	orrs	r3, r2
    13a4:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    13a6:	4b04      	ldr	r3, [pc, #16]	; (13b8 <system_gclk_gen_enable+0x3c>)
    13a8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13aa:	bd10      	pop	{r4, pc}
    13ac:	40001800 	.word	0x40001800
    13b0:	000007fc 	.word	0x000007fc
    13b4:	0000106d 	.word	0x0000106d
    13b8:	000010ad 	.word	0x000010ad

000013bc <system_gclk_gen_disable>:
 *
 * \param[in] generator  Generic Clock Generator index to disable
 */
void system_gclk_gen_disable(
		const uint8_t generator)
{
    13bc:	b510      	push	{r4, lr}
    13be:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    13c0:	2204      	movs	r2, #4
    13c2:	4082      	lsls	r2, r0
    13c4:	480b      	ldr	r0, [pc, #44]	; (13f4 <system_gclk_gen_disable+0x38>)
    13c6:	490c      	ldr	r1, [pc, #48]	; (13f8 <system_gclk_gen_disable+0x3c>)
    13c8:	6843      	ldr	r3, [r0, #4]
    13ca:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    13cc:	421a      	tst	r2, r3
    13ce:	d1fb      	bne.n	13c8 <system_gclk_gen_disable+0xc>
	cpu_irq_enter_critical();
    13d0:	4b0a      	ldr	r3, [pc, #40]	; (13fc <system_gclk_gen_disable+0x40>)
    13d2:	4798      	blx	r3
    13d4:	00a0      	lsls	r0, r4, #2
    13d6:	4b07      	ldr	r3, [pc, #28]	; (13f4 <system_gclk_gen_disable+0x38>)
    13d8:	469c      	mov	ip, r3
    13da:	4460      	add	r0, ip
	};

	system_interrupt_enter_critical_section();

	/* Disable generator */
	GCLK->GENCTRL[generator].reg &= ~GCLK_GENCTRL_GENEN;
    13dc:	6a03      	ldr	r3, [r0, #32]
    13de:	4a08      	ldr	r2, [pc, #32]	; (1400 <system_gclk_gen_disable+0x44>)
    13e0:	4013      	ands	r3, r2
    13e2:	6203      	str	r3, [r0, #32]
	while (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN) {
    13e4:	2280      	movs	r2, #128	; 0x80
    13e6:	0052      	lsls	r2, r2, #1
    13e8:	6a03      	ldr	r3, [r0, #32]
    13ea:	4213      	tst	r3, r2
    13ec:	d1fc      	bne.n	13e8 <system_gclk_gen_disable+0x2c>
	cpu_irq_leave_critical();
    13ee:	4b05      	ldr	r3, [pc, #20]	; (1404 <system_gclk_gen_disable+0x48>)
    13f0:	4798      	blx	r3
		/* Wait for clock to become disabled */
	}

	system_interrupt_leave_critical_section();
}
    13f2:	bd10      	pop	{r4, pc}
    13f4:	40001800 	.word	0x40001800
    13f8:	000007fc 	.word	0x000007fc
    13fc:	0000106d 	.word	0x0000106d
    1400:	fffffeff 	.word	0xfffffeff
    1404:	000010ad 	.word	0x000010ad

00001408 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    140a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    140c:	2204      	movs	r2, #4
    140e:	4082      	lsls	r2, r0
    1410:	4812      	ldr	r0, [pc, #72]	; (145c <system_gclk_gen_get_hz+0x54>)
    1412:	4913      	ldr	r1, [pc, #76]	; (1460 <system_gclk_gen_get_hz+0x58>)
    1414:	6843      	ldr	r3, [r0, #4]
    1416:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    1418:	421a      	tst	r2, r3
    141a:	d1fb      	bne.n	1414 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    141c:	4b11      	ldr	r3, [pc, #68]	; (1464 <system_gclk_gen_get_hz+0x5c>)
    141e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1420:	4f0e      	ldr	r7, [pc, #56]	; (145c <system_gclk_gen_get_hz+0x54>)
    1422:	3408      	adds	r4, #8
    1424:	00a4      	lsls	r4, r4, #2
    1426:	59e0      	ldr	r0, [r4, r7]
    1428:	06c0      	lsls	r0, r0, #27
    142a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    142c:	4b0e      	ldr	r3, [pc, #56]	; (1468 <system_gclk_gen_get_hz+0x60>)
    142e:	4798      	blx	r3
    1430:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    1432:	59e5      	ldr	r5, [r4, r7]
    1434:	04ed      	lsls	r5, r5, #19
    1436:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1438:	59e4      	ldr	r4, [r4, r7]
    143a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    143c:	4b0b      	ldr	r3, [pc, #44]	; (146c <system_gclk_gen_get_hz+0x64>)
    143e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1440:	2d00      	cmp	r5, #0
    1442:	d107      	bne.n	1454 <system_gclk_gen_get_hz+0x4c>
    1444:	2c01      	cmp	r4, #1
    1446:	d907      	bls.n	1458 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1448:	0021      	movs	r1, r4
    144a:	0030      	movs	r0, r6
    144c:	4b08      	ldr	r3, [pc, #32]	; (1470 <system_gclk_gen_get_hz+0x68>)
    144e:	4798      	blx	r3
    1450:	0006      	movs	r6, r0
    1452:	e001      	b.n	1458 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1454:	3401      	adds	r4, #1
    1456:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1458:	0030      	movs	r0, r6
    145a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    145c:	40001800 	.word	0x40001800
    1460:	000007fc 	.word	0x000007fc
    1464:	0000106d 	.word	0x0000106d
    1468:	00001139 	.word	0x00001139
    146c:	000010ad 	.word	0x000010ad
    1470:	00002fc9 	.word	0x00002fc9

00001474 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1474:	b510      	push	{r4, lr}
    1476:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1478:	4b09      	ldr	r3, [pc, #36]	; (14a0 <system_gclk_chan_enable+0x2c>)
    147a:	4798      	blx	r3
    147c:	00a0      	lsls	r0, r4, #2
    147e:	4b09      	ldr	r3, [pc, #36]	; (14a4 <system_gclk_chan_enable+0x30>)
    1480:	469c      	mov	ip, r3
    1482:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    1484:	2280      	movs	r2, #128	; 0x80
    1486:	5883      	ldr	r3, [r0, r2]
    1488:	2140      	movs	r1, #64	; 0x40
    148a:	430b      	orrs	r3, r1
    148c:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    148e:	3140      	adds	r1, #64	; 0x40
    1490:	3a40      	subs	r2, #64	; 0x40
    1492:	5843      	ldr	r3, [r0, r1]
    1494:	421a      	tst	r2, r3
    1496:	d0fc      	beq.n	1492 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    1498:	4b03      	ldr	r3, [pc, #12]	; (14a8 <system_gclk_chan_enable+0x34>)
    149a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    149c:	bd10      	pop	{r4, pc}
    149e:	46c0      	nop			; (mov r8, r8)
    14a0:	0000106d 	.word	0x0000106d
    14a4:	40001800 	.word	0x40001800
    14a8:	000010ad 	.word	0x000010ad

000014ac <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    14ac:	b510      	push	{r4, lr}
    14ae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    14b0:	4b09      	ldr	r3, [pc, #36]	; (14d8 <system_gclk_chan_disable+0x2c>)
    14b2:	4798      	blx	r3
    14b4:	00a0      	lsls	r0, r4, #2
    14b6:	4b09      	ldr	r3, [pc, #36]	; (14dc <system_gclk_chan_disable+0x30>)
    14b8:	469c      	mov	ip, r3
    14ba:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    14bc:	2280      	movs	r2, #128	; 0x80
    14be:	5883      	ldr	r3, [r0, r2]
    14c0:	2140      	movs	r1, #64	; 0x40
    14c2:	438b      	bics	r3, r1
    14c4:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    14c6:	3140      	adds	r1, #64	; 0x40
    14c8:	3a40      	subs	r2, #64	; 0x40
    14ca:	5843      	ldr	r3, [r0, r1]
    14cc:	421a      	tst	r2, r3
    14ce:	d1fc      	bne.n	14ca <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    14d0:	4b03      	ldr	r3, [pc, #12]	; (14e0 <system_gclk_chan_disable+0x34>)
    14d2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    14d4:	bd10      	pop	{r4, pc}
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	0000106d 	.word	0x0000106d
    14dc:	40001800 	.word	0x40001800
    14e0:	000010ad 	.word	0x000010ad

000014e4 <system_gclk_chan_set_config>:
{
    14e4:	b570      	push	{r4, r5, r6, lr}
    14e6:	0004      	movs	r4, r0
    14e8:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    14ea:	4b05      	ldr	r3, [pc, #20]	; (1500 <system_gclk_chan_set_config+0x1c>)
    14ec:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    14ee:	782a      	ldrb	r2, [r5, #0]
    14f0:	230f      	movs	r3, #15
    14f2:	4013      	ands	r3, r2
    14f4:	3420      	adds	r4, #32
    14f6:	00a4      	lsls	r4, r4, #2
    14f8:	4a02      	ldr	r2, [pc, #8]	; (1504 <system_gclk_chan_set_config+0x20>)
    14fa:	50a3      	str	r3, [r4, r2]
}
    14fc:	bd70      	pop	{r4, r5, r6, pc}
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	000014ad 	.word	0x000014ad
    1504:	40001800 	.word	0x40001800

00001508 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1508:	b510      	push	{r4, lr}
    150a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    150c:	4b06      	ldr	r3, [pc, #24]	; (1528 <system_gclk_chan_get_hz+0x20>)
    150e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    1510:	3420      	adds	r4, #32
    1512:	00a4      	lsls	r4, r4, #2
    1514:	4b05      	ldr	r3, [pc, #20]	; (152c <system_gclk_chan_get_hz+0x24>)
    1516:	58e4      	ldr	r4, [r4, r3]
    1518:	0724      	lsls	r4, r4, #28
    151a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    151c:	4b04      	ldr	r3, [pc, #16]	; (1530 <system_gclk_chan_get_hz+0x28>)
    151e:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1520:	0020      	movs	r0, r4
    1522:	4b04      	ldr	r3, [pc, #16]	; (1534 <system_gclk_chan_get_hz+0x2c>)
    1524:	4798      	blx	r3
}
    1526:	bd10      	pop	{r4, pc}
    1528:	0000106d 	.word	0x0000106d
    152c:	40001800 	.word	0x40001800
    1530:	000010ad 	.word	0x000010ad
    1534:	00001409 	.word	0x00001409

00001538 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1538:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    153a:	78d3      	ldrb	r3, [r2, #3]
    153c:	2b00      	cmp	r3, #0
    153e:	d135      	bne.n	15ac <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1540:	7813      	ldrb	r3, [r2, #0]
    1542:	2b80      	cmp	r3, #128	; 0x80
    1544:	d029      	beq.n	159a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1546:	061b      	lsls	r3, r3, #24
    1548:	2480      	movs	r4, #128	; 0x80
    154a:	0264      	lsls	r4, r4, #9
    154c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    154e:	7854      	ldrb	r4, [r2, #1]
    1550:	2502      	movs	r5, #2
    1552:	43ac      	bics	r4, r5
    1554:	d106      	bne.n	1564 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1556:	7894      	ldrb	r4, [r2, #2]
    1558:	2c00      	cmp	r4, #0
    155a:	d120      	bne.n	159e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    155c:	2480      	movs	r4, #128	; 0x80
    155e:	02a4      	lsls	r4, r4, #10
    1560:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1562:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1564:	7854      	ldrb	r4, [r2, #1]
    1566:	3c01      	subs	r4, #1
    1568:	2c01      	cmp	r4, #1
    156a:	d91c      	bls.n	15a6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    156c:	040d      	lsls	r5, r1, #16
    156e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1570:	24a0      	movs	r4, #160	; 0xa0
    1572:	05e4      	lsls	r4, r4, #23
    1574:	432c      	orrs	r4, r5
    1576:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1578:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    157a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    157c:	24d0      	movs	r4, #208	; 0xd0
    157e:	0624      	lsls	r4, r4, #24
    1580:	432c      	orrs	r4, r5
    1582:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1584:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1586:	78d4      	ldrb	r4, [r2, #3]
    1588:	2c00      	cmp	r4, #0
    158a:	d122      	bne.n	15d2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    158c:	035b      	lsls	r3, r3, #13
    158e:	d51c      	bpl.n	15ca <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1590:	7893      	ldrb	r3, [r2, #2]
    1592:	2b01      	cmp	r3, #1
    1594:	d01e      	beq.n	15d4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1596:	6141      	str	r1, [r0, #20]
    1598:	e017      	b.n	15ca <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    159a:	2300      	movs	r3, #0
    159c:	e7d7      	b.n	154e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    159e:	24c0      	movs	r4, #192	; 0xc0
    15a0:	02e4      	lsls	r4, r4, #11
    15a2:	4323      	orrs	r3, r4
    15a4:	e7dd      	b.n	1562 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    15a6:	4c0d      	ldr	r4, [pc, #52]	; (15dc <_system_pinmux_config+0xa4>)
    15a8:	4023      	ands	r3, r4
    15aa:	e7df      	b.n	156c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    15ac:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    15ae:	040c      	lsls	r4, r1, #16
    15b0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    15b2:	23a0      	movs	r3, #160	; 0xa0
    15b4:	05db      	lsls	r3, r3, #23
    15b6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15b8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    15ba:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    15bc:	23d0      	movs	r3, #208	; 0xd0
    15be:	061b      	lsls	r3, r3, #24
    15c0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15c2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    15c4:	78d3      	ldrb	r3, [r2, #3]
    15c6:	2b00      	cmp	r3, #0
    15c8:	d103      	bne.n	15d2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15ca:	7853      	ldrb	r3, [r2, #1]
    15cc:	3b01      	subs	r3, #1
    15ce:	2b01      	cmp	r3, #1
    15d0:	d902      	bls.n	15d8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    15d2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    15d4:	6181      	str	r1, [r0, #24]
    15d6:	e7f8      	b.n	15ca <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    15d8:	6081      	str	r1, [r0, #8]
}
    15da:	e7fa      	b.n	15d2 <_system_pinmux_config+0x9a>
    15dc:	fffbffff 	.word	0xfffbffff

000015e0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    15e0:	b510      	push	{r4, lr}
    15e2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    15e4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    15e6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    15e8:	2900      	cmp	r1, #0
    15ea:	d104      	bne.n	15f6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    15ec:	0943      	lsrs	r3, r0, #5
    15ee:	01db      	lsls	r3, r3, #7
    15f0:	4905      	ldr	r1, [pc, #20]	; (1608 <system_pinmux_pin_set_config+0x28>)
    15f2:	468c      	mov	ip, r1
    15f4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    15f6:	241f      	movs	r4, #31
    15f8:	4020      	ands	r0, r4
    15fa:	2101      	movs	r1, #1
    15fc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    15fe:	0018      	movs	r0, r3
    1600:	4b02      	ldr	r3, [pc, #8]	; (160c <system_pinmux_pin_set_config+0x2c>)
    1602:	4798      	blx	r3
}
    1604:	bd10      	pop	{r4, pc}
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	40002800 	.word	0x40002800
    160c:	00001539 	.word	0x00001539

00001610 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1610:	4770      	bx	lr
	...

00001614 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1614:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1616:	4b05      	ldr	r3, [pc, #20]	; (162c <system_init+0x18>)
    1618:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    161a:	4b05      	ldr	r3, [pc, #20]	; (1630 <system_init+0x1c>)
    161c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    161e:	4b05      	ldr	r3, [pc, #20]	; (1634 <system_init+0x20>)
    1620:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1622:	4b05      	ldr	r3, [pc, #20]	; (1638 <system_init+0x24>)
    1624:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1626:	4b05      	ldr	r3, [pc, #20]	; (163c <system_init+0x28>)
    1628:	4798      	blx	r3
}
    162a:	bd10      	pop	{r4, pc}
    162c:	000011cd 	.word	0x000011cd
    1630:	000010dd 	.word	0x000010dd
    1634:	00001611 	.word	0x00001611
    1638:	00001611 	.word	0x00001611
    163c:	00001611 	.word	0x00001611

00001640 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    1640:	4b09      	ldr	r3, [pc, #36]	; (1668 <_tcc_get_inst_index+0x28>)
    1642:	4298      	cmp	r0, r3
    1644:	d00c      	beq.n	1660 <_tcc_get_inst_index+0x20>
    1646:	4b09      	ldr	r3, [pc, #36]	; (166c <_tcc_get_inst_index+0x2c>)
    1648:	4298      	cmp	r0, r3
    164a:	d007      	beq.n	165c <_tcc_get_inst_index+0x1c>
    164c:	4a08      	ldr	r2, [pc, #32]	; (1670 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    164e:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    1650:	4290      	cmp	r0, r2
    1652:	d001      	beq.n	1658 <_tcc_get_inst_index+0x18>
}
    1654:	0018      	movs	r0, r3
    1656:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1658:	3302      	adds	r3, #2
    165a:	e002      	b.n	1662 <_tcc_get_inst_index+0x22>
    165c:	2301      	movs	r3, #1
    165e:	e000      	b.n	1662 <_tcc_get_inst_index+0x22>
    1660:	2300      	movs	r3, #0
			return i;
    1662:	b2db      	uxtb	r3, r3
    1664:	e7f6      	b.n	1654 <_tcc_get_inst_index+0x14>
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	42001400 	.word	0x42001400
    166c:	42001800 	.word	0x42001800
    1670:	42001c00 	.word	0x42001c00

00001674 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    1674:	b510      	push	{r4, lr}
    1676:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    1678:	0008      	movs	r0, r1
    167a:	4b50      	ldr	r3, [pc, #320]	; (17bc <tcc_get_config_defaults+0x148>)
    167c:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    167e:	2300      	movs	r3, #0
    1680:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    1682:	0080      	lsls	r0, r0, #2
    1684:	4a4e      	ldr	r2, [pc, #312]	; (17c0 <tcc_get_config_defaults+0x14c>)
    1686:	5882      	ldr	r2, [r0, r2]
    1688:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    168a:	72e3      	strb	r3, [r4, #11]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    168c:	7323      	strb	r3, [r4, #12]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    168e:	7363      	strb	r3, [r4, #13]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    1690:	72a3      	strb	r3, [r4, #10]
	config->counter.oneshot                = false;
    1692:	7223      	strb	r3, [r4, #8]

#ifdef FEATURE_TCC_GENERATE_DMA_TRIGGER
	config->counter.dma_trigger_mode       = TCC_COUNT_OVERFLOW_DMA_TRIGGER_MODE_CONTINUE;
    1694:	7263      	strb	r3, [r4, #9]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    1696:	61e3      	str	r3, [r4, #28]
    1698:	6223      	str	r3, [r4, #32]
    169a:	6263      	str	r3, [r4, #36]	; 0x24
    169c:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    169e:	7523      	strb	r3, [r4, #20]
    16a0:	7563      	strb	r3, [r4, #21]
    16a2:	75a3      	strb	r3, [r4, #22]
    16a4:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    16a6:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    16a8:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    16aa:	7423      	strb	r3, [r4, #16]
    16ac:	7463      	strb	r3, [r4, #17]
    16ae:	74a3      	strb	r3, [r4, #18]
    16b0:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    16b2:	222c      	movs	r2, #44	; 0x2c
    16b4:	54a3      	strb	r3, [r4, r2]
    16b6:	3201      	adds	r2, #1
    16b8:	54a3      	strb	r3, [r4, r2]
    16ba:	3201      	adds	r2, #1
    16bc:	54a3      	strb	r3, [r4, r2]
    16be:	3201      	adds	r2, #1
    16c0:	54a3      	strb	r3, [r4, r2]
    16c2:	3201      	adds	r2, #1
    16c4:	54a3      	strb	r3, [r4, r2]
    16c6:	3201      	adds	r2, #1
    16c8:	54a3      	strb	r3, [r4, r2]
    16ca:	3201      	adds	r2, #1
    16cc:	54a3      	strb	r3, [r4, r2]
    16ce:	3201      	adds	r2, #1
    16d0:	54a3      	strb	r3, [r4, r2]
    16d2:	3201      	adds	r2, #1
    16d4:	54a3      	strb	r3, [r4, r2]
    16d6:	3201      	adds	r2, #1
    16d8:	54a3      	strb	r3, [r4, r2]
    16da:	3201      	adds	r2, #1
    16dc:	54a3      	strb	r3, [r4, r2]
    16de:	3201      	adds	r2, #1
    16e0:	54a3      	strb	r3, [r4, r2]
    16e2:	3201      	adds	r2, #1
    16e4:	54a3      	strb	r3, [r4, r2]
    16e6:	3201      	adds	r2, #1
    16e8:	54a3      	strb	r3, [r4, r2]
    16ea:	3201      	adds	r2, #1
    16ec:	54a3      	strb	r3, [r4, r2]
    16ee:	3201      	adds	r2, #1
    16f0:	54a3      	strb	r3, [r4, r2]
    16f2:	3201      	adds	r2, #1
    16f4:	54a3      	strb	r3, [r4, r2]
    16f6:	3201      	adds	r2, #1
    16f8:	54a3      	strb	r3, [r4, r2]
    16fa:	3201      	adds	r2, #1
    16fc:	54a3      	strb	r3, [r4, r2]
    16fe:	3201      	adds	r2, #1
    1700:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    1702:	3201      	adds	r2, #1
    1704:	54a3      	strb	r3, [r4, r2]
    1706:	3201      	adds	r2, #1
    1708:	54a3      	strb	r3, [r4, r2]
    170a:	3201      	adds	r2, #1
    170c:	54a3      	strb	r3, [r4, r2]
    170e:	3201      	adds	r2, #1
    1710:	54a3      	strb	r3, [r4, r2]
    1712:	3201      	adds	r2, #1
    1714:	54a3      	strb	r3, [r4, r2]
    1716:	3201      	adds	r2, #1
    1718:	54a3      	strb	r3, [r4, r2]
    171a:	3201      	adds	r2, #1
    171c:	54a3      	strb	r3, [r4, r2]
    171e:	3201      	adds	r2, #1
    1720:	54a3      	strb	r3, [r4, r2]
    1722:	3201      	adds	r2, #1
    1724:	54a3      	strb	r3, [r4, r2]
    1726:	3201      	adds	r2, #1
    1728:	54a3      	strb	r3, [r4, r2]
    172a:	3201      	adds	r2, #1
    172c:	54a3      	strb	r3, [r4, r2]
    172e:	3201      	adds	r2, #1
    1730:	54a3      	strb	r3, [r4, r2]
    1732:	3201      	adds	r2, #1
    1734:	54a3      	strb	r3, [r4, r2]
    1736:	3201      	adds	r2, #1
    1738:	54a3      	strb	r3, [r4, r2]
    173a:	3201      	adds	r2, #1
    173c:	54a3      	strb	r3, [r4, r2]
    173e:	3201      	adds	r2, #1
    1740:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    1742:	3201      	adds	r2, #1
    1744:	54a3      	strb	r3, [r4, r2]
    1746:	3201      	adds	r2, #1
    1748:	54a3      	strb	r3, [r4, r2]
    174a:	3201      	adds	r2, #1
    174c:	54a3      	strb	r3, [r4, r2]
    174e:	3201      	adds	r2, #1
    1750:	54a3      	strb	r3, [r4, r2]
    1752:	3201      	adds	r2, #1
    1754:	54a3      	strb	r3, [r4, r2]
    1756:	3201      	adds	r2, #1
    1758:	54a3      	strb	r3, [r4, r2]
    175a:	3201      	adds	r2, #1
    175c:	54a3      	strb	r3, [r4, r2]
    175e:	3201      	adds	r2, #1
    1760:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    1762:	3241      	adds	r2, #65	; 0x41
    1764:	54a3      	strb	r3, [r4, r2]
    1766:	65a3      	str	r3, [r4, #88]	; 0x58
    1768:	67a3      	str	r3, [r4, #120]	; 0x78
    176a:	3201      	adds	r2, #1
    176c:	54a3      	strb	r3, [r4, r2]
    176e:	65e3      	str	r3, [r4, #92]	; 0x5c
    1770:	67e3      	str	r3, [r4, #124]	; 0x7c
    1772:	3201      	adds	r2, #1
    1774:	54a3      	strb	r3, [r4, r2]
    1776:	6623      	str	r3, [r4, #96]	; 0x60
    1778:	3a1a      	subs	r2, #26
    177a:	50a3      	str	r3, [r4, r2]
    177c:	321b      	adds	r2, #27
    177e:	54a3      	strb	r3, [r4, r2]
    1780:	6663      	str	r3, [r4, #100]	; 0x64
    1782:	3a17      	subs	r2, #23
    1784:	50a3      	str	r3, [r4, r2]
    1786:	3218      	adds	r2, #24
    1788:	54a3      	strb	r3, [r4, r2]
    178a:	66a3      	str	r3, [r4, #104]	; 0x68
    178c:	3a14      	subs	r2, #20
    178e:	50a3      	str	r3, [r4, r2]
    1790:	3215      	adds	r2, #21
    1792:	54a3      	strb	r3, [r4, r2]
    1794:	66e3      	str	r3, [r4, #108]	; 0x6c
    1796:	3a11      	subs	r2, #17
    1798:	50a3      	str	r3, [r4, r2]
    179a:	3212      	adds	r2, #18
    179c:	54a3      	strb	r3, [r4, r2]
    179e:	6723      	str	r3, [r4, #112]	; 0x70
    17a0:	3a0e      	subs	r2, #14
    17a2:	50a3      	str	r3, [r4, r2]
    17a4:	320f      	adds	r2, #15
    17a6:	54a3      	strb	r3, [r4, r2]
    17a8:	6763      	str	r3, [r4, #116]	; 0x74
    17aa:	3a0b      	subs	r2, #11
    17ac:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    17ae:	2101      	movs	r1, #1
    17b0:	320c      	adds	r2, #12
    17b2:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    17b4:	3201      	adds	r2, #1
    17b6:	54a3      	strb	r3, [r4, r2]
}
    17b8:	bd10      	pop	{r4, pc}
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	00001641 	.word	0x00001641
    17c0:	00005710 	.word	0x00005710

000017c4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    17c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    17c6:	46de      	mov	lr, fp
    17c8:	4657      	mov	r7, sl
    17ca:	464e      	mov	r6, r9
    17cc:	4645      	mov	r5, r8
    17ce:	b5e0      	push	{r5, r6, r7, lr}
    17d0:	b091      	sub	sp, #68	; 0x44
    17d2:	9001      	str	r0, [sp, #4]
    17d4:	000c      	movs	r4, r1
    17d6:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    17d8:	0008      	movs	r0, r1
    17da:	4bc3      	ldr	r3, [pc, #780]	; (1ae8 <tcc_init+0x324>)
    17dc:	4798      	blx	r3
    17de:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    17e0:	0001      	movs	r1, r0
			MCLK->APBCMASK.reg |= mask;
    17e2:	48c2      	ldr	r0, [pc, #776]	; (1aec <tcc_init+0x328>)
    17e4:	69c2      	ldr	r2, [r0, #28]
    17e6:	009e      	lsls	r6, r3, #2
    17e8:	4fc1      	ldr	r7, [pc, #772]	; (1af0 <tcc_init+0x32c>)
    17ea:	59f7      	ldr	r7, [r6, r7]
    17ec:	433a      	orrs	r2, r7
    17ee:	61c2      	str	r2, [r0, #28]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    17f0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    17f2:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    17f4:	0792      	lsls	r2, r2, #30
    17f6:	d506      	bpl.n	1806 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    17f8:	b011      	add	sp, #68	; 0x44
    17fa:	bc3c      	pop	{r2, r3, r4, r5}
    17fc:	4690      	mov	r8, r2
    17fe:	4699      	mov	r9, r3
    1800:	46a2      	mov	sl, r4
    1802:	46ab      	mov	fp, r5
    1804:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    1806:	6822      	ldr	r2, [r4, #0]
    1808:	2701      	movs	r7, #1
    180a:	4017      	ands	r7, r2
    180c:	d1f4      	bne.n	17f8 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    180e:	48b9      	ldr	r0, [pc, #740]	; (1af4 <tcc_init+0x330>)
    1810:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    1812:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    1814:	682e      	ldr	r6, [r5, #0]
    1816:	42b2      	cmp	r2, r6
    1818:	d3ee      	bcc.n	17f8 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    181a:	686e      	ldr	r6, [r5, #4]
    181c:	42b2      	cmp	r2, r6
    181e:	d3eb      	bcc.n	17f8 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    1820:	69e8      	ldr	r0, [r5, #28]
    1822:	4282      	cmp	r2, r0
    1824:	d200      	bcs.n	1828 <tcc_init+0x64>
    1826:	e1ab      	b.n	1b80 <tcc_init+0x3bc>
    1828:	6a28      	ldr	r0, [r5, #32]
    182a:	4282      	cmp	r2, r0
    182c:	d200      	bcs.n	1830 <tcc_init+0x6c>
    182e:	e1a9      	b.n	1b84 <tcc_init+0x3c0>
    1830:	6a68      	ldr	r0, [r5, #36]	; 0x24
    1832:	4282      	cmp	r2, r0
    1834:	d200      	bcs.n	1838 <tcc_init+0x74>
    1836:	e1a7      	b.n	1b88 <tcc_init+0x3c4>
    1838:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    183a:	4282      	cmp	r2, r0
    183c:	d200      	bcs.n	1840 <tcc_init+0x7c>
    183e:	e1a5      	b.n	1b8c <tcc_init+0x3c8>
    1840:	2298      	movs	r2, #152	; 0x98
    1842:	4694      	mov	ip, r2
    1844:	44ac      	add	ip, r5
    1846:	4662      	mov	r2, ip
    1848:	9208      	str	r2, [sp, #32]
    184a:	2000      	movs	r0, #0
    184c:	e003      	b.n	1856 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    184e:	3001      	adds	r0, #1
    1850:	3201      	adds	r2, #1
    1852:	2808      	cmp	r0, #8
    1854:	d008      	beq.n	1868 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    1856:	7816      	ldrb	r6, [r2, #0]
    1858:	2e00      	cmp	r6, #0
    185a:	d0f8      	beq.n	184e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    185c:	4ea6      	ldr	r6, [pc, #664]	; (1af8 <tcc_init+0x334>)
    185e:	5c76      	ldrb	r6, [r6, r1]
    1860:	4286      	cmp	r6, r0
    1862:	dcf4      	bgt.n	184e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    1864:	2017      	movs	r0, #23
    1866:	e7c7      	b.n	17f8 <tcc_init+0x34>
    1868:	2200      	movs	r2, #0
    186a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    186c:	2080      	movs	r0, #128	; 0x80
    186e:	0440      	lsls	r0, r0, #17
    1870:	4684      	mov	ip, r0
    1872:	e002      	b.n	187a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    1874:	3201      	adds	r2, #1
    1876:	2a04      	cmp	r2, #4
    1878:	d00e      	beq.n	1898 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    187a:	18a8      	adds	r0, r5, r2
    187c:	7c00      	ldrb	r0, [r0, #16]
    187e:	2801      	cmp	r0, #1
    1880:	d1f8      	bne.n	1874 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    1882:	489e      	ldr	r0, [pc, #632]	; (1afc <tcc_init+0x338>)
    1884:	5c40      	ldrb	r0, [r0, r1]
    1886:	4290      	cmp	r0, r2
    1888:	da00      	bge.n	188c <tcc_init+0xc8>
    188a:	e181      	b.n	1b90 <tcc_init+0x3cc>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    188c:	4660      	mov	r0, ip
    188e:	4090      	lsls	r0, r2
    1890:	9e02      	ldr	r6, [sp, #8]
    1892:	4306      	orrs	r6, r0
    1894:	9602      	str	r6, [sp, #8]
    1896:	e7ed      	b.n	1874 <tcc_init+0xb0>
	if (config->run_in_standby) {
    1898:	329d      	adds	r2, #157	; 0x9d
    189a:	5caa      	ldrb	r2, [r5, r2]
    189c:	2a00      	cmp	r2, #0
    189e:	d004      	beq.n	18aa <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    18a0:	2280      	movs	r2, #128	; 0x80
    18a2:	0112      	lsls	r2, r2, #4
    18a4:	9902      	ldr	r1, [sp, #8]
    18a6:	4311      	orrs	r1, r2
    18a8:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    18aa:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    18ac:	1e51      	subs	r1, r2, #1
    18ae:	418a      	sbcs	r2, r1
    18b0:	0092      	lsls	r2, r2, #2
    18b2:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    18b4:	7aaa      	ldrb	r2, [r5, #10]
    18b6:	2a01      	cmp	r2, #1
    18b8:	d022      	beq.n	1900 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    18ba:	4a90      	ldr	r2, [pc, #576]	; (1afc <tcc_init+0x338>)
    18bc:	5cd2      	ldrb	r2, [r2, r3]
    18be:	0011      	movs	r1, r2
    18c0:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    18c2:	2235      	movs	r2, #53	; 0x35
    18c4:	5caa      	ldrb	r2, [r5, r2]
    18c6:	428a      	cmp	r2, r1
    18c8:	d300      	bcc.n	18cc <tcc_init+0x108>
    18ca:	e16b      	b.n	1ba4 <tcc_init+0x3e0>
		if (cfg->filter_value > 0xF) {
    18cc:	212c      	movs	r1, #44	; 0x2c
    18ce:	5c69      	ldrb	r1, [r5, r1]
    18d0:	290f      	cmp	r1, #15
    18d2:	d900      	bls.n	18d6 <tcc_init+0x112>
    18d4:	e166      	b.n	1ba4 <tcc_init+0x3e0>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    18d6:	7b68      	ldrb	r0, [r5, #13]
    18d8:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    18da:	7b28      	ldrb	r0, [r5, #12]
    18dc:	900b      	str	r0, [sp, #44]	; 0x2c
    18de:	202d      	movs	r0, #45	; 0x2d
    18e0:	4682      	mov	sl, r0
    18e2:	44aa      	add	sl, r5
    18e4:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    18e6:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    18e8:	ae0e      	add	r6, sp, #56	; 0x38
    18ea:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    18ec:	26c0      	movs	r6, #192	; 0xc0
    18ee:	0136      	lsls	r6, r6, #4
    18f0:	46b1      	mov	r9, r6
    18f2:	4684      	mov	ip, r0
    18f4:	46a0      	mov	r8, r4
    18f6:	0028      	movs	r0, r5
    18f8:	4655      	mov	r5, sl
    18fa:	9309      	str	r3, [sp, #36]	; 0x24
    18fc:	4682      	mov	sl, r0
    18fe:	e035      	b.n	196c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    1900:	9906      	ldr	r1, [sp, #24]
    1902:	4311      	orrs	r1, r2
    1904:	9106      	str	r1, [sp, #24]
    1906:	e7d8      	b.n	18ba <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1908:	0292      	lsls	r2, r2, #10
    190a:	464f      	mov	r7, r9
    190c:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    190e:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    1910:	7919      	ldrb	r1, [r3, #4]
    1912:	468b      	mov	fp, r1
    1914:	2103      	movs	r1, #3
    1916:	465f      	mov	r7, fp
    1918:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    191a:	430a      	orrs	r2, r1
    191c:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    191e:	795a      	ldrb	r2, [r3, #5]
    1920:	0152      	lsls	r2, r2, #5
    1922:	2160      	movs	r1, #96	; 0x60
    1924:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1926:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    1928:	7999      	ldrb	r1, [r3, #6]
    192a:	0209      	lsls	r1, r1, #8
    192c:	26c0      	movs	r6, #192	; 0xc0
    192e:	00b6      	lsls	r6, r6, #2
    1930:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1932:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    1934:	79da      	ldrb	r2, [r3, #7]
    1936:	0312      	lsls	r2, r2, #12
    1938:	21e0      	movs	r1, #224	; 0xe0
    193a:	01c9      	lsls	r1, r1, #7
    193c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    193e:	4316      	orrs	r6, r2
    1940:	4334      	orrs	r4, r6
    1942:	9a03      	ldr	r2, [sp, #12]
    1944:	4314      	orrs	r4, r2
    1946:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    1948:	4662      	mov	r2, ip
    194a:	9907      	ldr	r1, [sp, #28]
    194c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    194e:	2a04      	cmp	r2, #4
    1950:	d02a      	beq.n	19a8 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    1952:	7c9a      	ldrb	r2, [r3, #18]
    1954:	9905      	ldr	r1, [sp, #20]
    1956:	4291      	cmp	r1, r2
    1958:	d800      	bhi.n	195c <tcc_init+0x198>
    195a:	e123      	b.n	1ba4 <tcc_init+0x3e0>
		if (cfg->filter_value > 0xF) {
    195c:	7a59      	ldrb	r1, [r3, #9]
    195e:	350a      	adds	r5, #10
    1960:	2304      	movs	r3, #4
    1962:	469b      	mov	fp, r3
    1964:	44dc      	add	ip, fp
    1966:	290f      	cmp	r1, #15
    1968:	d900      	bls.n	196c <tcc_init+0x1a8>
    196a:	e11b      	b.n	1ba4 <tcc_init+0x3e0>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    196c:	0609      	lsls	r1, r1, #24
    196e:	23f0      	movs	r3, #240	; 0xf0
    1970:	051b      	lsls	r3, r3, #20
    1972:	4019      	ands	r1, r3
    1974:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    1976:	782e      	ldrb	r6, [r5, #0]
    1978:	0436      	lsls	r6, r6, #16
    197a:	20ff      	movs	r0, #255	; 0xff
    197c:	0400      	lsls	r0, r0, #16
    197e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    1980:	7868      	ldrb	r0, [r5, #1]
    1982:	2480      	movs	r4, #128	; 0x80
    1984:	2800      	cmp	r0, #0
    1986:	d100      	bne.n	198a <tcc_init+0x1c6>
    1988:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    198a:	7898      	ldrb	r0, [r3, #2]
    198c:	2708      	movs	r7, #8
    198e:	9703      	str	r7, [sp, #12]
    1990:	2800      	cmp	r0, #0
    1992:	d101      	bne.n	1998 <tcc_init+0x1d4>
    1994:	9804      	ldr	r0, [sp, #16]
    1996:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    1998:	78d8      	ldrb	r0, [r3, #3]
    199a:	4683      	mov	fp, r0
    199c:	2010      	movs	r0, #16
    199e:	465f      	mov	r7, fp
    19a0:	2f00      	cmp	r7, #0
    19a2:	d1b1      	bne.n	1908 <tcc_init+0x144>
    19a4:	9804      	ldr	r0, [sp, #16]
    19a6:	e7af      	b.n	1908 <tcc_init+0x144>
    19a8:	4644      	mov	r4, r8
    19aa:	4655      	mov	r5, sl
    19ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    19ae:	4a52      	ldr	r2, [pc, #328]	; (1af8 <tcc_init+0x334>)
    19b0:	5cd2      	ldrb	r2, [r2, r3]
    19b2:	4691      	mov	r9, r2
    19b4:	4651      	mov	r1, sl
    19b6:	3150      	adds	r1, #80	; 0x50
    19b8:	4650      	mov	r0, sl
    19ba:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    19bc:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    19be:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    19c0:	2601      	movs	r6, #1
    19c2:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    19c4:	2602      	movs	r6, #2
    19c6:	36ff      	adds	r6, #255	; 0xff
    19c8:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    19ca:	2680      	movs	r6, #128	; 0x80
    19cc:	0276      	lsls	r6, r6, #9
    19ce:	46b0      	mov	r8, r6
    19d0:	46a4      	mov	ip, r4
    19d2:	001c      	movs	r4, r3
    19d4:	464b      	mov	r3, r9
    19d6:	e00f      	b.n	19f8 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    19d8:	7806      	ldrb	r6, [r0, #0]
    19da:	2e00      	cmp	r6, #0
    19dc:	d007      	beq.n	19ee <tcc_init+0x22a>
			if (i >= ow_num) {
    19de:	4293      	cmp	r3, r2
    19e0:	d800      	bhi.n	19e4 <tcc_init+0x220>
    19e2:	e0d9      	b.n	1b98 <tcc_init+0x3d4>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    19e4:	2e02      	cmp	r6, #2
    19e6:	d014      	beq.n	1a12 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    19e8:	4656      	mov	r6, sl
    19ea:	4096      	lsls	r6, r2
    19ec:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    19ee:	3201      	adds	r2, #1
    19f0:	3101      	adds	r1, #1
    19f2:	3002      	adds	r0, #2
    19f4:	2a08      	cmp	r2, #8
    19f6:	d010      	beq.n	1a1a <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    19f8:	780e      	ldrb	r6, [r1, #0]
    19fa:	2e00      	cmp	r6, #0
    19fc:	d0ec      	beq.n	19d8 <tcc_init+0x214>
			if (i >= ow_num) {
    19fe:	4293      	cmp	r3, r2
    1a00:	d800      	bhi.n	1a04 <tcc_init+0x240>
    1a02:	e0c7      	b.n	1b94 <tcc_init+0x3d0>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1a04:	4646      	mov	r6, r8
    1a06:	4096      	lsls	r6, r2
    1a08:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    1a0a:	7806      	ldrb	r6, [r0, #0]
    1a0c:	2e00      	cmp	r6, #0
    1a0e:	d1e9      	bne.n	19e4 <tcc_init+0x220>
    1a10:	e7ed      	b.n	19ee <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1a12:	465e      	mov	r6, fp
    1a14:	4096      	lsls	r6, r2
    1a16:	4337      	orrs	r7, r6
    1a18:	e7e9      	b.n	19ee <tcc_init+0x22a>
    1a1a:	4699      	mov	r9, r3
    1a1c:	0023      	movs	r3, r4
    1a1e:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1a20:	7e6a      	ldrb	r2, [r5, #25]
    1a22:	0112      	lsls	r2, r2, #4
    1a24:	2130      	movs	r1, #48	; 0x30
    1a26:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1a28:	7e28      	ldrb	r0, [r5, #24]
    1a2a:	2207      	movs	r2, #7
    1a2c:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1a2e:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1a30:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    1a32:	2080      	movs	r0, #128	; 0x80
    1a34:	0240      	lsls	r0, r0, #9
    1a36:	000e      	movs	r6, r1
    1a38:	e002      	b.n	1a40 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1a3a:	3201      	adds	r2, #1
    1a3c:	2a04      	cmp	r2, #4
    1a3e:	d00b      	beq.n	1a58 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    1a40:	18a9      	adds	r1, r5, r2
    1a42:	7d09      	ldrb	r1, [r1, #20]
    1a44:	2900      	cmp	r1, #0
    1a46:	d0f8      	beq.n	1a3a <tcc_init+0x276>
			if (n >= cc_num) {
    1a48:	9905      	ldr	r1, [sp, #20]
    1a4a:	4291      	cmp	r1, r2
    1a4c:	dc00      	bgt.n	1a50 <tcc_init+0x28c>
    1a4e:	e0a5      	b.n	1b9c <tcc_init+0x3d8>
			wave |= (TCC_WAVE_POL0 << n);
    1a50:	0001      	movs	r1, r0
    1a52:	4091      	lsls	r1, r2
    1a54:	430e      	orrs	r6, r1
    1a56:	e7f0      	b.n	1a3a <tcc_init+0x276>
    1a58:	46b2      	mov	sl, r6
    1a5a:	9801      	ldr	r0, [sp, #4]
    1a5c:	0002      	movs	r2, r0
    1a5e:	3204      	adds	r2, #4
    1a60:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    1a62:	2100      	movs	r1, #0
    1a64:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1a66:	4282      	cmp	r2, r0
    1a68:	d1fc      	bne.n	1a64 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    1a6a:	2200      	movs	r2, #0
    1a6c:	9801      	ldr	r0, [sp, #4]
    1a6e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    1a70:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    1a72:	0099      	lsls	r1, r3, #2
    1a74:	4a22      	ldr	r2, [pc, #136]	; (1b00 <tcc_init+0x33c>)
    1a76:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    1a78:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1a7a:	22a0      	movs	r2, #160	; 0xa0
    1a7c:	5ca9      	ldrb	r1, [r5, r2]
    1a7e:	3a64      	subs	r2, #100	; 0x64
    1a80:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    1a82:	a90d      	add	r1, sp, #52	; 0x34
    1a84:	7aea      	ldrb	r2, [r5, #11]
    1a86:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1a88:	4a1e      	ldr	r2, [pc, #120]	; (1b04 <tcc_init+0x340>)
    1a8a:	5cd6      	ldrb	r6, [r2, r3]
    1a8c:	0030      	movs	r0, r6
    1a8e:	4b1e      	ldr	r3, [pc, #120]	; (1b08 <tcc_init+0x344>)
    1a90:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    1a92:	0030      	movs	r0, r6
    1a94:	4b1d      	ldr	r3, [pc, #116]	; (1b0c <tcc_init+0x348>)
    1a96:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1a98:	464b      	mov	r3, r9
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	dd3c      	ble.n	1b18 <tcc_init+0x354>
    1a9e:	002e      	movs	r6, r5
    1aa0:	3658      	adds	r6, #88	; 0x58
    1aa2:	3398      	adds	r3, #152	; 0x98
    1aa4:	4698      	mov	r8, r3
    1aa6:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1aa8:	2301      	movs	r3, #1
    1aaa:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    1aac:	46ab      	mov	fp, r5
    1aae:	4645      	mov	r5, r8
    1ab0:	46a0      	mov	r8, r4
    1ab2:	9c08      	ldr	r4, [sp, #32]
    1ab4:	e003      	b.n	1abe <tcc_init+0x2fa>
    1ab6:	3401      	adds	r4, #1
    1ab8:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1aba:	42ac      	cmp	r4, r5
    1abc:	d02a      	beq.n	1b14 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    1abe:	7823      	ldrb	r3, [r4, #0]
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d0f8      	beq.n	1ab6 <tcc_init+0x2f2>
    1ac4:	ab0c      	add	r3, sp, #48	; 0x30
    1ac6:	464a      	mov	r2, r9
    1ac8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1aca:	2300      	movs	r3, #0
    1acc:	aa0c      	add	r2, sp, #48	; 0x30
    1ace:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    1ad0:	0013      	movs	r3, r2
    1ad2:	2220      	movs	r2, #32
    1ad4:	18b2      	adds	r2, r6, r2
    1ad6:	7812      	ldrb	r2, [r2, #0]
    1ad8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1ada:	464a      	mov	r2, r9
    1adc:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    1ade:	7830      	ldrb	r0, [r6, #0]
    1ae0:	0019      	movs	r1, r3
    1ae2:	4b0b      	ldr	r3, [pc, #44]	; (1b10 <tcc_init+0x34c>)
    1ae4:	4798      	blx	r3
    1ae6:	e7e6      	b.n	1ab6 <tcc_init+0x2f2>
    1ae8:	00001641 	.word	0x00001641
    1aec:	40000400 	.word	0x40000400
    1af0:	000056fc 	.word	0x000056fc
    1af4:	00005710 	.word	0x00005710
    1af8:	0000571c 	.word	0x0000571c
    1afc:	00005708 	.word	0x00005708
    1b00:	200000e8 	.word	0x200000e8
    1b04:	0000570c 	.word	0x0000570c
    1b08:	000014e5 	.word	0x000014e5
    1b0c:	00001475 	.word	0x00001475
    1b10:	000015e1 	.word	0x000015e1
    1b14:	4644      	mov	r4, r8
    1b16:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    1b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b1a:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1b1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1b1e:	0212      	lsls	r2, r2, #8
    1b20:	4313      	orrs	r3, r2
    1b22:	9a02      	ldr	r2, [sp, #8]
    1b24:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    1b26:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1b28:	2204      	movs	r2, #4
    1b2a:	68a3      	ldr	r3, [r4, #8]
    1b2c:	421a      	tst	r2, r3
    1b2e:	d1fc      	bne.n	1b2a <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    1b30:	23ff      	movs	r3, #255	; 0xff
    1b32:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1b34:	2204      	movs	r2, #4
    1b36:	68a3      	ldr	r3, [r4, #8]
    1b38:	421a      	tst	r2, r3
    1b3a:	d1fc      	bne.n	1b36 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    1b3c:	466b      	mov	r3, sp
    1b3e:	7e1b      	ldrb	r3, [r3, #24]
    1b40:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    1b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1b44:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    1b46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b48:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    1b4a:	61a7      	str	r7, [r4, #24]
	hw->WAVE.reg = waves[0];
    1b4c:	4653      	mov	r3, sl
    1b4e:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    1b50:	2210      	movs	r2, #16
    1b52:	68a3      	ldr	r3, [r4, #8]
    1b54:	421a      	tst	r2, r3
    1b56:	d1fc      	bne.n	1b52 <tcc_init+0x38e>
	hw->COUNT.reg = config->counter.count;
    1b58:	682b      	ldr	r3, [r5, #0]
    1b5a:	6363      	str	r3, [r4, #52]	; 0x34
	hw->PER.reg = (config->counter.period);
    1b5c:	686b      	ldr	r3, [r5, #4]
    1b5e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1b60:	9805      	ldr	r0, [sp, #20]
    1b62:	2800      	cmp	r0, #0
    1b64:	dd1c      	ble.n	1ba0 <tcc_init+0x3dc>
    1b66:	351c      	adds	r5, #28
    1b68:	2200      	movs	r2, #0
		hw->CC[i].reg = (config->compare.match[i]);
    1b6a:	cd02      	ldmia	r5!, {r1}
    1b6c:	0013      	movs	r3, r2
    1b6e:	3310      	adds	r3, #16
    1b70:	009b      	lsls	r3, r3, #2
    1b72:	18e3      	adds	r3, r4, r3
    1b74:	6059      	str	r1, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1b76:	3201      	adds	r2, #1
    1b78:	4290      	cmp	r0, r2
    1b7a:	dcf6      	bgt.n	1b6a <tcc_init+0x3a6>
	return STATUS_OK;
    1b7c:	2000      	movs	r0, #0
    1b7e:	e63b      	b.n	17f8 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    1b80:	2017      	movs	r0, #23
    1b82:	e639      	b.n	17f8 <tcc_init+0x34>
    1b84:	2017      	movs	r0, #23
    1b86:	e637      	b.n	17f8 <tcc_init+0x34>
    1b88:	2017      	movs	r0, #23
    1b8a:	e635      	b.n	17f8 <tcc_init+0x34>
    1b8c:	2017      	movs	r0, #23
    1b8e:	e633      	b.n	17f8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    1b90:	2017      	movs	r0, #23
    1b92:	e631      	b.n	17f8 <tcc_init+0x34>
			if (i >= ow_num) {
    1b94:	2017      	movs	r0, #23
    1b96:	e62f      	b.n	17f8 <tcc_init+0x34>
			if (i >= ow_num) {
    1b98:	2017      	movs	r0, #23
    1b9a:	e62d      	b.n	17f8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    1b9c:	2017      	movs	r0, #23
    1b9e:	e62b      	b.n	17f8 <tcc_init+0x34>
	return STATUS_OK;
    1ba0:	2000      	movs	r0, #0
    1ba2:	e629      	b.n	17f8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    1ba4:	2017      	movs	r0, #23
    1ba6:	e627      	b.n	17f8 <tcc_init+0x34>

00001ba8 <tcc_set_count_value>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid timer counter size was specified
 */
enum status_code tcc_set_count_value(
		const struct tcc_module *const module_inst,
		const uint32_t count)
{
    1ba8:	b570      	push	{r4, r5, r6, lr}
    1baa:	000d      	movs	r5, r1
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tcc *const tcc_module = module_inst->hw;
    1bac:	6804      	ldr	r4, [r0, #0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    1bae:	0020      	movs	r0, r4
    1bb0:	4b07      	ldr	r3, [pc, #28]	; (1bd0 <tcc_set_count_value+0x28>)
    1bb2:	4798      	blx	r3

	uint32_t max_count = _tcc_maxs[module_index];
    1bb4:	0080      	lsls	r0, r0, #2

	if (count > max_count) {
    1bb6:	4b07      	ldr	r3, [pc, #28]	; (1bd4 <tcc_set_count_value+0x2c>)
    1bb8:	58c3      	ldr	r3, [r0, r3]
		return STATUS_ERR_INVALID_ARG;
    1bba:	2017      	movs	r0, #23
	if (count > max_count) {
    1bbc:	42ab      	cmp	r3, r5
    1bbe:	d200      	bcs.n	1bc2 <tcc_set_count_value+0x1a>

	/* Write to based on the TCC dithering */
	tcc_module->COUNT.reg = (count);

	return STATUS_OK;
}
    1bc0:	bd70      	pop	{r4, r5, r6, pc}
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    1bc2:	2210      	movs	r2, #16
    1bc4:	68a3      	ldr	r3, [r4, #8]
    1bc6:	421a      	tst	r2, r3
    1bc8:	d1fc      	bne.n	1bc4 <tcc_set_count_value+0x1c>
	tcc_module->COUNT.reg = (count);
    1bca:	6365      	str	r5, [r4, #52]	; 0x34
	return STATUS_OK;
    1bcc:	2000      	movs	r0, #0
    1bce:	e7f7      	b.n	1bc0 <tcc_set_count_value+0x18>
    1bd0:	00001641 	.word	0x00001641
    1bd4:	00005710 	.word	0x00005710

00001bd8 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1bd8:	0092      	lsls	r2, r2, #2
    1bda:	1883      	adds	r3, r0, r2
    1bdc:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    1bde:	4b03      	ldr	r3, [pc, #12]	; (1bec <tcc_register_callback+0x14>)
    1be0:	58d3      	ldr	r3, [r2, r3]
    1be2:	6b42      	ldr	r2, [r0, #52]	; 0x34
    1be4:	4313      	orrs	r3, r2
    1be6:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    1be8:	2000      	movs	r0, #0
    1bea:	4770      	bx	lr
    1bec:	00005720 	.word	0x00005720

00001bf0 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    1bf0:	b570      	push	{r4, r5, r6, lr}
    1bf2:	0004      	movs	r4, r0
    1bf4:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    1bf6:	6800      	ldr	r0, [r0, #0]
    1bf8:	4b09      	ldr	r3, [pc, #36]	; (1c20 <tcc_enable_callback+0x30>)
    1bfa:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    1bfc:	4b09      	ldr	r3, [pc, #36]	; (1c24 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1bfe:	5c1b      	ldrb	r3, [r3, r0]
    1c00:	221f      	movs	r2, #31
    1c02:	401a      	ands	r2, r3
    1c04:	2301      	movs	r3, #1
    1c06:	4093      	lsls	r3, r2
    1c08:	4a07      	ldr	r2, [pc, #28]	; (1c28 <tcc_enable_callback+0x38>)
    1c0a:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    1c0c:	00ad      	lsls	r5, r5, #2
    1c0e:	4b07      	ldr	r3, [pc, #28]	; (1c2c <tcc_enable_callback+0x3c>)
    1c10:	58ea      	ldr	r2, [r5, r3]
    1c12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1c14:	4313      	orrs	r3, r2
    1c16:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    1c18:	6823      	ldr	r3, [r4, #0]
    1c1a:	629a      	str	r2, [r3, #40]	; 0x28
}
    1c1c:	bd70      	pop	{r4, r5, r6, pc}
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	00001641 	.word	0x00001641
    1c24:	00005750 	.word	0x00005750
    1c28:	e000e100 	.word	0xe000e100
    1c2c:	00005720 	.word	0x00005720

00001c30 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c32:	46c6      	mov	lr, r8
    1c34:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    1c36:	0080      	lsls	r0, r0, #2
    1c38:	4b0e      	ldr	r3, [pc, #56]	; (1c74 <_tcc_interrupt_handler+0x44>)
    1c3a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1c3c:	683b      	ldr	r3, [r7, #0]
    1c3e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    1c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1c44:	4013      	ands	r3, r2
    1c46:	401e      	ands	r6, r3
    1c48:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1c4a:	4b0b      	ldr	r3, [pc, #44]	; (1c78 <_tcc_interrupt_handler+0x48>)
    1c4c:	4698      	mov	r8, r3
    1c4e:	e002      	b.n	1c56 <_tcc_interrupt_handler+0x26>
    1c50:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1c52:	2c30      	cmp	r4, #48	; 0x30
    1c54:	d00a      	beq.n	1c6c <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1c56:	4643      	mov	r3, r8
    1c58:	58e5      	ldr	r5, [r4, r3]
    1c5a:	4235      	tst	r5, r6
    1c5c:	d0f8      	beq.n	1c50 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    1c5e:	193b      	adds	r3, r7, r4
    1c60:	685b      	ldr	r3, [r3, #4]
    1c62:	0038      	movs	r0, r7
    1c64:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1c66:	683b      	ldr	r3, [r7, #0]
    1c68:	62dd      	str	r5, [r3, #44]	; 0x2c
    1c6a:	e7f1      	b.n	1c50 <_tcc_interrupt_handler+0x20>
		}
	}
}
    1c6c:	bc04      	pop	{r2}
    1c6e:	4690      	mov	r8, r2
    1c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	200000e8 	.word	0x200000e8
    1c78:	00005720 	.word	0x00005720

00001c7c <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1c7c:	b510      	push	{r4, lr}
    1c7e:	2000      	movs	r0, #0
    1c80:	4b01      	ldr	r3, [pc, #4]	; (1c88 <TCC0_Handler+0xc>)
    1c82:	4798      	blx	r3
    1c84:	bd10      	pop	{r4, pc}
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	00001c31 	.word	0x00001c31

00001c8c <TCC1_Handler>:
    1c8c:	b510      	push	{r4, lr}
    1c8e:	2001      	movs	r0, #1
    1c90:	4b01      	ldr	r3, [pc, #4]	; (1c98 <TCC1_Handler+0xc>)
    1c92:	4798      	blx	r3
    1c94:	bd10      	pop	{r4, pc}
    1c96:	46c0      	nop			; (mov r8, r8)
    1c98:	00001c31 	.word	0x00001c31

00001c9c <TCC2_Handler>:
    1c9c:	b510      	push	{r4, lr}
    1c9e:	2002      	movs	r0, #2
    1ca0:	4b01      	ldr	r3, [pc, #4]	; (1ca8 <TCC2_Handler+0xc>)
    1ca2:	4798      	blx	r3
    1ca4:	bd10      	pop	{r4, pc}
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	00001c31 	.word	0x00001c31

00001cac <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1cac:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1cae:	0080      	lsls	r0, r0, #2
    1cb0:	4b16      	ldr	r3, [pc, #88]	; (1d0c <_tc_interrupt_handler+0x60>)
    1cb2:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1cb4:	6823      	ldr	r3, [r4, #0]
    1cb6:	7a9d      	ldrb	r5, [r3, #10]
    1cb8:	7e22      	ldrb	r2, [r4, #24]
    1cba:	7e63      	ldrb	r3, [r4, #25]
    1cbc:	4013      	ands	r3, r2
    1cbe:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1cc0:	07eb      	lsls	r3, r5, #31
    1cc2:	d406      	bmi.n	1cd2 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1cc4:	07ab      	lsls	r3, r5, #30
    1cc6:	d40b      	bmi.n	1ce0 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1cc8:	06eb      	lsls	r3, r5, #27
    1cca:	d410      	bmi.n	1cee <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1ccc:	06ab      	lsls	r3, r5, #26
    1cce:	d415      	bmi.n	1cfc <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1cd0:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1cd2:	0020      	movs	r0, r4
    1cd4:	68a3      	ldr	r3, [r4, #8]
    1cd6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1cd8:	2301      	movs	r3, #1
    1cda:	6822      	ldr	r2, [r4, #0]
    1cdc:	7293      	strb	r3, [r2, #10]
    1cde:	e7f1      	b.n	1cc4 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1ce0:	0020      	movs	r0, r4
    1ce2:	68e3      	ldr	r3, [r4, #12]
    1ce4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1ce6:	2302      	movs	r3, #2
    1ce8:	6822      	ldr	r2, [r4, #0]
    1cea:	7293      	strb	r3, [r2, #10]
    1cec:	e7ec      	b.n	1cc8 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1cee:	0020      	movs	r0, r4
    1cf0:	6923      	ldr	r3, [r4, #16]
    1cf2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1cf4:	2310      	movs	r3, #16
    1cf6:	6822      	ldr	r2, [r4, #0]
    1cf8:	7293      	strb	r3, [r2, #10]
    1cfa:	e7e7      	b.n	1ccc <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1cfc:	0020      	movs	r0, r4
    1cfe:	6963      	ldr	r3, [r4, #20]
    1d00:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1d02:	6823      	ldr	r3, [r4, #0]
    1d04:	2220      	movs	r2, #32
    1d06:	729a      	strb	r2, [r3, #10]
}
    1d08:	e7e2      	b.n	1cd0 <_tc_interrupt_handler+0x24>
    1d0a:	46c0      	nop			; (mov r8, r8)
    1d0c:	200000f4 	.word	0x200000f4

00001d10 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1d10:	b510      	push	{r4, lr}
    1d12:	2000      	movs	r0, #0
    1d14:	4b01      	ldr	r3, [pc, #4]	; (1d1c <TC0_Handler+0xc>)
    1d16:	4798      	blx	r3
    1d18:	bd10      	pop	{r4, pc}
    1d1a:	46c0      	nop			; (mov r8, r8)
    1d1c:	00001cad 	.word	0x00001cad

00001d20 <TC1_Handler>:
    1d20:	b510      	push	{r4, lr}
    1d22:	2001      	movs	r0, #1
    1d24:	4b01      	ldr	r3, [pc, #4]	; (1d2c <TC1_Handler+0xc>)
    1d26:	4798      	blx	r3
    1d28:	bd10      	pop	{r4, pc}
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	00001cad 	.word	0x00001cad

00001d30 <TC2_Handler>:
    1d30:	b510      	push	{r4, lr}
    1d32:	2002      	movs	r0, #2
    1d34:	4b01      	ldr	r3, [pc, #4]	; (1d3c <TC2_Handler+0xc>)
    1d36:	4798      	blx	r3
    1d38:	bd10      	pop	{r4, pc}
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	00001cad 	.word	0x00001cad

00001d40 <TC3_Handler>:
    1d40:	b510      	push	{r4, lr}
    1d42:	2003      	movs	r0, #3
    1d44:	4b01      	ldr	r3, [pc, #4]	; (1d4c <TC3_Handler+0xc>)
    1d46:	4798      	blx	r3
    1d48:	bd10      	pop	{r4, pc}
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	00001cad 	.word	0x00001cad

00001d50 <TC4_Handler>:
    1d50:	b510      	push	{r4, lr}
    1d52:	2004      	movs	r0, #4
    1d54:	4b01      	ldr	r3, [pc, #4]	; (1d5c <TC4_Handler+0xc>)
    1d56:	4798      	blx	r3
    1d58:	bd10      	pop	{r4, pc}
    1d5a:	46c0      	nop			; (mov r8, r8)
    1d5c:	00001cad 	.word	0x00001cad

00001d60 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1d60:	b530      	push	{r4, r5, lr}
    1d62:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1d64:	a901      	add	r1, sp, #4
    1d66:	4b0c      	ldr	r3, [pc, #48]	; (1d98 <_tc_get_inst_index+0x38>)
    1d68:	000a      	movs	r2, r1
    1d6a:	cb32      	ldmia	r3!, {r1, r4, r5}
    1d6c:	c232      	stmia	r2!, {r1, r4, r5}
    1d6e:	cb12      	ldmia	r3!, {r1, r4}
    1d70:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1d72:	9b01      	ldr	r3, [sp, #4]
    1d74:	4298      	cmp	r0, r3
    1d76:	d00b      	beq.n	1d90 <_tc_get_inst_index+0x30>
    1d78:	2301      	movs	r3, #1
    1d7a:	a901      	add	r1, sp, #4
    1d7c:	009a      	lsls	r2, r3, #2
    1d7e:	5852      	ldr	r2, [r2, r1]
    1d80:	4282      	cmp	r2, r0
    1d82:	d006      	beq.n	1d92 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1d84:	3301      	adds	r3, #1
    1d86:	2b05      	cmp	r3, #5
    1d88:	d1f8      	bne.n	1d7c <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1d8a:	2000      	movs	r0, #0
}
    1d8c:	b007      	add	sp, #28
    1d8e:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1d90:	2300      	movs	r3, #0
			return i;
    1d92:	b2d8      	uxtb	r0, r3
    1d94:	e7fa      	b.n	1d8c <_tc_get_inst_index+0x2c>
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	0000577c 	.word	0x0000577c

00001d9c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d9e:	46c6      	mov	lr, r8
    1da0:	b500      	push	{lr}
    1da2:	b08e      	sub	sp, #56	; 0x38
    1da4:	0004      	movs	r4, r0
    1da6:	000d      	movs	r5, r1
    1da8:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1daa:	0008      	movs	r0, r1
    1dac:	4bae      	ldr	r3, [pc, #696]	; (2068 <STACK_SIZE+0x68>)
    1dae:	4798      	blx	r3
    1db0:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    1db2:	ab0c      	add	r3, sp, #48	; 0x30
    1db4:	221b      	movs	r2, #27
    1db6:	701a      	strb	r2, [r3, #0]
    1db8:	705a      	strb	r2, [r3, #1]
    1dba:	3201      	adds	r2, #1
    1dbc:	709a      	strb	r2, [r3, #2]
    1dbe:	70da      	strb	r2, [r3, #3]
    1dc0:	3201      	adds	r2, #1
    1dc2:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    1dc4:	a902      	add	r1, sp, #8
    1dc6:	4ba9      	ldr	r3, [pc, #676]	; (206c <STACK_SIZE+0x6c>)
    1dc8:	3314      	adds	r3, #20
    1dca:	000a      	movs	r2, r1
    1dcc:	cb83      	ldmia	r3!, {r0, r1, r7}
    1dce:	c283      	stmia	r2!, {r0, r1, r7}
    1dd0:	cb83      	ldmia	r3!, {r0, r1, r7}
    1dd2:	c283      	stmia	r2!, {r0, r1, r7}
    1dd4:	cb83      	ldmia	r3!, {r0, r1, r7}
    1dd6:	c283      	stmia	r2!, {r0, r1, r7}
    1dd8:	681b      	ldr	r3, [r3, #0]
    1dda:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1ddc:	2300      	movs	r3, #0
    1dde:	60a3      	str	r3, [r4, #8]
    1de0:	60e3      	str	r3, [r4, #12]
    1de2:	6123      	str	r3, [r4, #16]
    1de4:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1de6:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1de8:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1dea:	4643      	mov	r3, r8
    1dec:	009a      	lsls	r2, r3, #2
    1dee:	4ba0      	ldr	r3, [pc, #640]	; (2070 <STACK_SIZE+0x70>)
    1df0:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1df2:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1df4:	2334      	movs	r3, #52	; 0x34
    1df6:	5cf3      	ldrb	r3, [r6, r3]
    1df8:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1dfa:	78f3      	ldrb	r3, [r6, #3]
    1dfc:	2b08      	cmp	r3, #8
    1dfe:	d008      	beq.n	1e12 <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1e00:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1e02:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1e04:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1e06:	07db      	lsls	r3, r3, #31
    1e08:	d508      	bpl.n	1e1c <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1e0a:	b00e      	add	sp, #56	; 0x38
    1e0c:	bc04      	pop	{r2}
    1e0e:	4690      	mov	r8, r2
    1e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1e12:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1e14:	4642      	mov	r2, r8
    1e16:	07d2      	lsls	r2, r2, #31
    1e18:	d4f7      	bmi.n	1e0a <tc_init+0x6e>
    1e1a:	e7f1      	b.n	1e00 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1e1c:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    1e1e:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1e20:	079b      	lsls	r3, r3, #30
    1e22:	d4f2      	bmi.n	1e0a <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1e24:	682b      	ldr	r3, [r5, #0]
    1e26:	079b      	lsls	r3, r3, #30
    1e28:	d4ef      	bmi.n	1e0a <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    1e2a:	7c33      	ldrb	r3, [r6, #16]
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d112      	bne.n	1e56 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    1e30:	7f33      	ldrb	r3, [r6, #28]
    1e32:	2b00      	cmp	r3, #0
    1e34:	d11b      	bne.n	1e6e <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    1e36:	4643      	mov	r3, r8
    1e38:	005a      	lsls	r2, r3, #1
    1e3a:	a902      	add	r1, sp, #8
    1e3c:	1c53      	adds	r3, r2, #1
    1e3e:	009b      	lsls	r3, r3, #2
    1e40:	5858      	ldr	r0, [r3, r1]
    1e42:	4643      	mov	r3, r8
    1e44:	00db      	lsls	r3, r3, #3
    1e46:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    1e48:	b2d9      	uxtb	r1, r3
    1e4a:	2904      	cmp	r1, #4
    1e4c:	d823      	bhi.n	1e96 <tc_init+0xfa>
    1e4e:	008b      	lsls	r3, r1, #2
    1e50:	4988      	ldr	r1, [pc, #544]	; (2074 <STACK_SIZE+0x74>)
    1e52:	58cb      	ldr	r3, [r1, r3]
    1e54:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1e56:	a901      	add	r1, sp, #4
    1e58:	2301      	movs	r3, #1
    1e5a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1e5c:	2200      	movs	r2, #0
    1e5e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1e60:	7e32      	ldrb	r2, [r6, #24]
    1e62:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1e64:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1e66:	7d30      	ldrb	r0, [r6, #20]
    1e68:	4b83      	ldr	r3, [pc, #524]	; (2078 <STACK_SIZE+0x78>)
    1e6a:	4798      	blx	r3
    1e6c:	e7e0      	b.n	1e30 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1e6e:	a901      	add	r1, sp, #4
    1e70:	2301      	movs	r3, #1
    1e72:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1e74:	2200      	movs	r2, #0
    1e76:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1e78:	3224      	adds	r2, #36	; 0x24
    1e7a:	18b2      	adds	r2, r6, r2
    1e7c:	7812      	ldrb	r2, [r2, #0]
    1e7e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1e80:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1e82:	331f      	adds	r3, #31
    1e84:	18f3      	adds	r3, r6, r3
    1e86:	7818      	ldrb	r0, [r3, #0]
    1e88:	4b7b      	ldr	r3, [pc, #492]	; (2078 <STACK_SIZE+0x78>)
    1e8a:	4798      	blx	r3
    1e8c:	e7d3      	b.n	1e36 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    1e8e:	497b      	ldr	r1, [pc, #492]	; (207c <STACK_SIZE+0x7c>)
    1e90:	694b      	ldr	r3, [r1, #20]
    1e92:	4318      	orrs	r0, r3
    1e94:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    1e96:	78f3      	ldrb	r3, [r6, #3]
    1e98:	2b08      	cmp	r3, #8
    1e9a:	d100      	bne.n	1e9e <tc_init+0x102>
    1e9c:	e086      	b.n	1fac <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    1e9e:	7833      	ldrb	r3, [r6, #0]
    1ea0:	466a      	mov	r2, sp
    1ea2:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1ea4:	ab0c      	add	r3, sp, #48	; 0x30
    1ea6:	4642      	mov	r2, r8
    1ea8:	5c9f      	ldrb	r7, [r3, r2]
    1eaa:	4669      	mov	r1, sp
    1eac:	0038      	movs	r0, r7
    1eae:	4b74      	ldr	r3, [pc, #464]	; (2080 <STACK_SIZE+0x80>)
    1eb0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1eb2:	0038      	movs	r0, r7
    1eb4:	4b73      	ldr	r3, [pc, #460]	; (2084 <STACK_SIZE+0x84>)
    1eb6:	4798      	blx	r3
			(uint32_t)config->counter_size |
    1eb8:	78f3      	ldrb	r3, [r6, #3]
    1eba:	79f2      	ldrb	r2, [r6, #7]
    1ebc:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    1ebe:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    1ec0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    1ec2:	7a72      	ldrb	r2, [r6, #9]
    1ec4:	2a00      	cmp	r2, #0
    1ec6:	d002      	beq.n	1ece <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    1ec8:	2280      	movs	r2, #128	; 0x80
    1eca:	0252      	lsls	r2, r2, #9
    1ecc:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    1ece:	7ab2      	ldrb	r2, [r6, #10]
    1ed0:	2a00      	cmp	r2, #0
    1ed2:	d002      	beq.n	1eda <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    1ed4:	2280      	movs	r2, #128	; 0x80
    1ed6:	0292      	lsls	r2, r2, #10
    1ed8:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    1eda:	7af2      	ldrb	r2, [r6, #11]
    1edc:	2a00      	cmp	r2, #0
    1ede:	d002      	beq.n	1ee6 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    1ee0:	2280      	movs	r2, #128	; 0x80
    1ee2:	0352      	lsls	r2, r2, #13
    1ee4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    1ee6:	7b32      	ldrb	r2, [r6, #12]
    1ee8:	2a00      	cmp	r2, #0
    1eea:	d002      	beq.n	1ef2 <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    1eec:	2280      	movs	r2, #128	; 0x80
    1eee:	0392      	lsls	r2, r2, #14
    1ef0:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    1ef2:	7871      	ldrb	r1, [r6, #1]
    1ef4:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    1ef6:	78b2      	ldrb	r2, [r6, #2]
    1ef8:	01d2      	lsls	r2, r2, #7
    1efa:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    1efc:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1efe:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
    1f00:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    1f02:	2b00      	cmp	r3, #0
    1f04:	d1fc      	bne.n	1f00 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1f06:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f08:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1f0a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    1f0c:	2b00      	cmp	r3, #0
    1f0e:	d1fc      	bne.n	1f0a <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    1f10:	79b3      	ldrb	r3, [r6, #6]
    1f12:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    1f14:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1f16:	1e4b      	subs	r3, r1, #1
    1f18:	4199      	sbcs	r1, r3
    1f1a:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    1f1c:	7bb3      	ldrb	r3, [r6, #14]
    1f1e:	2b00      	cmp	r3, #0
    1f20:	d001      	beq.n	1f26 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1f22:	2301      	movs	r3, #1
    1f24:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f26:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1f28:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	d1fc      	bne.n	1f28 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1f2e:	33ff      	adds	r3, #255	; 0xff
    1f30:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    1f32:	2900      	cmp	r1, #0
    1f34:	d004      	beq.n	1f40 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f36:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1f38:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	d1fc      	bne.n	1f38 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1f3e:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    1f40:	7a33      	ldrb	r3, [r6, #8]
    1f42:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f44:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1f46:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    1f48:	2b00      	cmp	r3, #0
    1f4a:	d1fc      	bne.n	1f46 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    1f4c:	7923      	ldrb	r3, [r4, #4]
    1f4e:	2b04      	cmp	r3, #4
    1f50:	d059      	beq.n	2006 <STACK_SIZE+0x6>
    1f52:	2b08      	cmp	r3, #8
    1f54:	d074      	beq.n	2040 <STACK_SIZE+0x40>
	return STATUS_ERR_INVALID_ARG;
    1f56:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d000      	beq.n	1f5e <tc_init+0x1c2>
    1f5c:	e755      	b.n	1e0a <tc_init+0x6e>
    1f5e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    1f60:	2b00      	cmp	r3, #0
    1f62:	d1fc      	bne.n	1f5e <tc_init+0x1c2>
				= config->counter_16_bit.value;
    1f64:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1f66:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f68:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1f6a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d1fc      	bne.n	1f6a <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    1f70:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1f72:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1f74:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    1f76:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d1fc      	bne.n	1f76 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    1f7c:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1f7e:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    1f80:	2000      	movs	r0, #0
    1f82:	e742      	b.n	1e0a <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    1f84:	493d      	ldr	r1, [pc, #244]	; (207c <STACK_SIZE+0x7c>)
    1f86:	698b      	ldr	r3, [r1, #24]
    1f88:	4318      	orrs	r0, r3
    1f8a:	6188      	str	r0, [r1, #24]
    1f8c:	e783      	b.n	1e96 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    1f8e:	493b      	ldr	r1, [pc, #236]	; (207c <STACK_SIZE+0x7c>)
    1f90:	69cb      	ldr	r3, [r1, #28]
    1f92:	4318      	orrs	r0, r3
    1f94:	61c8      	str	r0, [r1, #28]
    1f96:	e77e      	b.n	1e96 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    1f98:	4938      	ldr	r1, [pc, #224]	; (207c <STACK_SIZE+0x7c>)
    1f9a:	6a0b      	ldr	r3, [r1, #32]
    1f9c:	4318      	orrs	r0, r3
    1f9e:	6208      	str	r0, [r1, #32]
    1fa0:	e779      	b.n	1e96 <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    1fa2:	4b36      	ldr	r3, [pc, #216]	; (207c <STACK_SIZE+0x7c>)
    1fa4:	6a59      	ldr	r1, [r3, #36]	; 0x24
    1fa6:	4308      	orrs	r0, r1
    1fa8:	6258      	str	r0, [r3, #36]	; 0x24
    1faa:	e774      	b.n	1e96 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    1fac:	4643      	mov	r3, r8
    1fae:	3301      	adds	r3, #1
    1fb0:	2b04      	cmp	r3, #4
    1fb2:	dd00      	ble.n	1fb6 <tc_init+0x21a>
    1fb4:	e773      	b.n	1e9e <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    1fb6:	ab02      	add	r3, sp, #8
    1fb8:	1cd1      	adds	r1, r2, #3
    1fba:	0089      	lsls	r1, r1, #2
    1fbc:	58c9      	ldr	r1, [r1, r3]
    1fbe:	3202      	adds	r2, #2
    1fc0:	0092      	lsls	r2, r2, #2
    1fc2:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    1fc4:	b2da      	uxtb	r2, r3
    1fc6:	2a04      	cmp	r2, #4
    1fc8:	d900      	bls.n	1fcc <tc_init+0x230>
    1fca:	e768      	b.n	1e9e <tc_init+0x102>
    1fcc:	0093      	lsls	r3, r2, #2
    1fce:	4a2e      	ldr	r2, [pc, #184]	; (2088 <STACK_SIZE+0x88>)
    1fd0:	58d3      	ldr	r3, [r2, r3]
    1fd2:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    1fd4:	4a29      	ldr	r2, [pc, #164]	; (207c <STACK_SIZE+0x7c>)
    1fd6:	6953      	ldr	r3, [r2, #20]
    1fd8:	4319      	orrs	r1, r3
    1fda:	6151      	str	r1, [r2, #20]
    1fdc:	e75f      	b.n	1e9e <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    1fde:	4a27      	ldr	r2, [pc, #156]	; (207c <STACK_SIZE+0x7c>)
    1fe0:	6993      	ldr	r3, [r2, #24]
    1fe2:	4319      	orrs	r1, r3
    1fe4:	6191      	str	r1, [r2, #24]
    1fe6:	e75a      	b.n	1e9e <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    1fe8:	4a24      	ldr	r2, [pc, #144]	; (207c <STACK_SIZE+0x7c>)
    1fea:	69d3      	ldr	r3, [r2, #28]
    1fec:	4319      	orrs	r1, r3
    1fee:	61d1      	str	r1, [r2, #28]
    1ff0:	e755      	b.n	1e9e <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    1ff2:	4a22      	ldr	r2, [pc, #136]	; (207c <STACK_SIZE+0x7c>)
    1ff4:	6a13      	ldr	r3, [r2, #32]
    1ff6:	4319      	orrs	r1, r3
    1ff8:	6211      	str	r1, [r2, #32]
    1ffa:	e750      	b.n	1e9e <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    1ffc:	4b1f      	ldr	r3, [pc, #124]	; (207c <STACK_SIZE+0x7c>)
    1ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2000:	4311      	orrs	r1, r2
    2002:	6259      	str	r1, [r3, #36]	; 0x24
    2004:	e74b      	b.n	1e9e <tc_init+0x102>
    2006:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    2008:	2b00      	cmp	r3, #0
    200a:	d1fc      	bne.n	2006 <STACK_SIZE+0x6>
					config->counter_8_bit.value;
    200c:	3328      	adds	r3, #40	; 0x28
    200e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    2010:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2012:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    2014:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    2016:	2b00      	cmp	r3, #0
    2018:	d1fc      	bne.n	2014 <STACK_SIZE+0x14>
					config->counter_8_bit.period;
    201a:	3329      	adds	r3, #41	; 0x29
    201c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    201e:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2020:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    2022:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    2024:	2b00      	cmp	r3, #0
    2026:	d1fc      	bne.n	2022 <STACK_SIZE+0x22>
					config->counter_8_bit.compare_capture_channel[0];
    2028:	332a      	adds	r3, #42	; 0x2a
    202a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    202c:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    202e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    2030:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    2032:	2b00      	cmp	r3, #0
    2034:	d1fc      	bne.n	2030 <STACK_SIZE+0x30>
					config->counter_8_bit.compare_capture_channel[1];
    2036:	332b      	adds	r3, #43	; 0x2b
    2038:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    203a:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    203c:	2000      	movs	r0, #0
    203e:	e6e4      	b.n	1e0a <tc_init+0x6e>
    2040:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    2042:	2b00      	cmp	r3, #0
    2044:	d1fc      	bne.n	2040 <STACK_SIZE+0x40>
				= config->counter_32_bit.value;
    2046:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2048:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    204a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    204c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    204e:	2b00      	cmp	r3, #0
    2050:	d1fc      	bne.n	204c <STACK_SIZE+0x4c>
			hw->COUNT32.CC[0].reg =
    2052:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2054:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2056:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    2058:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    205a:	2b00      	cmp	r3, #0
    205c:	d1fc      	bne.n	2058 <STACK_SIZE+0x58>
					config->counter_32_bit.compare_capture_channel[1];
    205e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    2060:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    2062:	2000      	movs	r0, #0
    2064:	e6d1      	b.n	1e0a <tc_init+0x6e>
    2066:	46c0      	nop			; (mov r8, r8)
    2068:	00001d61 	.word	0x00001d61
    206c:	0000577c 	.word	0x0000577c
    2070:	200000f4 	.word	0x200000f4
    2074:	00005754 	.word	0x00005754
    2078:	000015e1 	.word	0x000015e1
    207c:	40000400 	.word	0x40000400
    2080:	000014e5 	.word	0x000014e5
    2084:	00001475 	.word	0x00001475
    2088:	00005768 	.word	0x00005768

0000208c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    208c:	e7fe      	b.n	208c <Dummy_Handler>
	...

00002090 <Reset_Handler>:
{
    2090:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    2092:	4a1a      	ldr	r2, [pc, #104]	; (20fc <Reset_Handler+0x6c>)
    2094:	4b1a      	ldr	r3, [pc, #104]	; (2100 <Reset_Handler+0x70>)
    2096:	429a      	cmp	r2, r3
    2098:	d011      	beq.n	20be <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    209a:	001a      	movs	r2, r3
    209c:	4b19      	ldr	r3, [pc, #100]	; (2104 <Reset_Handler+0x74>)
    209e:	429a      	cmp	r2, r3
    20a0:	d20d      	bcs.n	20be <Reset_Handler+0x2e>
    20a2:	4a19      	ldr	r2, [pc, #100]	; (2108 <Reset_Handler+0x78>)
    20a4:	3303      	adds	r3, #3
    20a6:	1a9b      	subs	r3, r3, r2
    20a8:	089b      	lsrs	r3, r3, #2
    20aa:	3301      	adds	r3, #1
    20ac:	009b      	lsls	r3, r3, #2
    20ae:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    20b0:	4813      	ldr	r0, [pc, #76]	; (2100 <Reset_Handler+0x70>)
    20b2:	4912      	ldr	r1, [pc, #72]	; (20fc <Reset_Handler+0x6c>)
    20b4:	588c      	ldr	r4, [r1, r2]
    20b6:	5084      	str	r4, [r0, r2]
    20b8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    20ba:	429a      	cmp	r2, r3
    20bc:	d1fa      	bne.n	20b4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    20be:	4a13      	ldr	r2, [pc, #76]	; (210c <Reset_Handler+0x7c>)
    20c0:	4b13      	ldr	r3, [pc, #76]	; (2110 <Reset_Handler+0x80>)
    20c2:	429a      	cmp	r2, r3
    20c4:	d20a      	bcs.n	20dc <Reset_Handler+0x4c>
    20c6:	43d3      	mvns	r3, r2
    20c8:	4911      	ldr	r1, [pc, #68]	; (2110 <Reset_Handler+0x80>)
    20ca:	185b      	adds	r3, r3, r1
    20cc:	2103      	movs	r1, #3
    20ce:	438b      	bics	r3, r1
    20d0:	3304      	adds	r3, #4
    20d2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    20d4:	2100      	movs	r1, #0
    20d6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    20d8:	4293      	cmp	r3, r2
    20da:	d1fc      	bne.n	20d6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    20dc:	4a0d      	ldr	r2, [pc, #52]	; (2114 <Reset_Handler+0x84>)
    20de:	21ff      	movs	r1, #255	; 0xff
    20e0:	4b0d      	ldr	r3, [pc, #52]	; (2118 <Reset_Handler+0x88>)
    20e2:	438b      	bics	r3, r1
    20e4:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    20e6:	4a0d      	ldr	r2, [pc, #52]	; (211c <Reset_Handler+0x8c>)
    20e8:	6853      	ldr	r3, [r2, #4]
    20ea:	397f      	subs	r1, #127	; 0x7f
    20ec:	430b      	orrs	r3, r1
    20ee:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    20f0:	4b0b      	ldr	r3, [pc, #44]	; (2120 <Reset_Handler+0x90>)
    20f2:	4798      	blx	r3
        main();
    20f4:	4b0b      	ldr	r3, [pc, #44]	; (2124 <Reset_Handler+0x94>)
    20f6:	4798      	blx	r3
    20f8:	e7fe      	b.n	20f8 <Reset_Handler+0x68>
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	00005950 	.word	0x00005950
    2100:	20000000 	.word	0x20000000
    2104:	2000001c 	.word	0x2000001c
    2108:	20000004 	.word	0x20000004
    210c:	2000001c 	.word	0x2000001c
    2110:	20000320 	.word	0x20000320
    2114:	e000ed00 	.word	0xe000ed00
    2118:	00000000 	.word	0x00000000
    211c:	41004000 	.word	0x41004000
    2120:	00005531 	.word	0x00005531
    2124:	00002e25 	.word	0x00002e25

00002128 <i2c_write_complete_callback>:
// i.e. after the Master has finished READING from the bus
//-----------------------------------------------------------------------------------
void i2c_write_complete_callback(struct i2c_slave_module *const module)
{
	// not used so far
	toggle ^= 1;
    2128:	4908      	ldr	r1, [pc, #32]	; (214c <i2c_write_complete_callback+0x24>)
    212a:	780a      	ldrb	r2, [r1, #0]
    212c:	2301      	movs	r3, #1
    212e:	4053      	eors	r3, r2
    2130:	700b      	strb	r3, [r1, #0]
	#ifdef XPLAINED_BOARD
      if (toggle == 1) {
    2132:	2a00      	cmp	r2, #0
    2134:	d004      	beq.n	2140 <i2c_write_complete_callback+0x18>
    2136:	2280      	movs	r2, #128	; 0x80
    2138:	00d2      	lsls	r2, r2, #3
    213a:	4b05      	ldr	r3, [pc, #20]	; (2150 <i2c_write_complete_callback+0x28>)
    213c:	619a      	str	r2, [r3, #24]
	    port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);			// turn on LED
	  } else {
	    port_pin_set_output_level(LED_0_PIN, !LED_0_ACTIVE);		// turn off LED
      }
    #endif
}
    213e:	4770      	bx	lr
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2140:	2280      	movs	r2, #128	; 0x80
    2142:	00d2      	lsls	r2, r2, #3
    2144:	4b02      	ldr	r3, [pc, #8]	; (2150 <i2c_write_complete_callback+0x28>)
    2146:	615a      	str	r2, [r3, #20]
    2148:	e7f9      	b.n	213e <i2c_write_complete_callback+0x16>
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	200000c4 	.word	0x200000c4
    2150:	40002880 	.word	0x40002880

00002154 <i2c_read_request_callback>:
{
    2154:	b510      	push	{r4, lr}
	i2c_packet.data_length = i2c_data_length;
    2156:	4905      	ldr	r1, [pc, #20]	; (216c <i2c_read_request_callback+0x18>)
    2158:	4b05      	ldr	r3, [pc, #20]	; (2170 <i2c_read_request_callback+0x1c>)
    215a:	881b      	ldrh	r3, [r3, #0]
    215c:	800b      	strh	r3, [r1, #0]
	i2c_packet.data        = i2c_data_ptr;	  // i2c_data_buffer;
    215e:	4b05      	ldr	r3, [pc, #20]	; (2174 <i2c_read_request_callback+0x20>)
    2160:	681b      	ldr	r3, [r3, #0]
    2162:	604b      	str	r3, [r1, #4]
	i2c_slave_write_packet_job(module, &i2c_packet);						// write buffer to master 
    2164:	4b04      	ldr	r3, [pc, #16]	; (2178 <i2c_read_request_callback+0x24>)
    2166:	4798      	blx	r3
}
    2168:	bd10      	pop	{r4, pc}
    216a:	46c0      	nop			; (mov r8, r8)
    216c:	20000118 	.word	0x20000118
    2170:	20000008 	.word	0x20000008
    2174:	200001f4 	.word	0x200001f4
    2178:	00000afb 	.word	0x00000afb

0000217c <i2c_write_request_callback>:

//-----------------------------------------------------------------------------------
// callback function triggered when the I2C Master performs a WRITE operation --> slave must READ
//-----------------------------------------------------------------------------------
void i2c_write_request_callback(struct i2c_slave_module *const module)
{
    217c:	b510      	push	{r4, lr}
	i2c_packet.data_length = I2C_MAX_DATA_LENGTH;
    217e:	4904      	ldr	r1, [pc, #16]	; (2190 <i2c_write_request_callback+0x14>)
    2180:	2340      	movs	r3, #64	; 0x40
    2182:	800b      	strh	r3, [r1, #0]
	i2c_packet.data        = i2c_data_buffer;
    2184:	4b03      	ldr	r3, [pc, #12]	; (2194 <i2c_write_request_callback+0x18>)
    2186:	604b      	str	r3, [r1, #4]
	if (i2c_slave_read_packet_job(module, &i2c_packet) != STATUS_OK) {		// read buffer from master
    2188:	4b03      	ldr	r3, [pc, #12]	; (2198 <i2c_write_request_callback+0x1c>)
    218a:	4798      	blx	r3
  	  // do something here in case of an error 
	}
	
}
    218c:	bd10      	pop	{r4, pc}
    218e:	46c0      	nop			; (mov r8, r8)
    2190:	20000118 	.word	0x20000118
    2194:	20000078 	.word	0x20000078
    2198:	00000ad3 	.word	0x00000ad3

0000219c <configure_gclock_generator>:

//-------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------
void configure_gclock_generator(void) 
{
    219c:	b510      	push	{r4, lr}
	config->high_when_disabled = false;
    219e:	4908      	ldr	r1, [pc, #32]	; (21c0 <configure_gclock_generator+0x24>)
    21a0:	2300      	movs	r3, #0
    21a2:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    21a4:	2206      	movs	r2, #6
    21a6:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
    21a8:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    21aa:	724b      	strb	r3, [r1, #9]
  system_gclk_gen_get_config_defaults(&gclock_gen_conf);
  gclock_gen_conf.source_clock    = SYSTEM_CLOCK_SOURCE_OSC16M;
  gclock_gen_conf.division_factor = 2;
    21ac:	3302      	adds	r3, #2
    21ae:	604b      	str	r3, [r1, #4]
  system_gclk_gen_set_config(GCLK_GENERATOR_1, &gclock_gen_conf);
    21b0:	2001      	movs	r0, #1
    21b2:	4b04      	ldr	r3, [pc, #16]	; (21c4 <configure_gclock_generator+0x28>)
    21b4:	4798      	blx	r3
  system_gclk_gen_enable(GCLK_GENERATOR_1);
    21b6:	2001      	movs	r0, #1
    21b8:	4b03      	ldr	r3, [pc, #12]	; (21c8 <configure_gclock_generator+0x2c>)
    21ba:	4798      	blx	r3
}
    21bc:	bd10      	pop	{r4, pc}
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	20000108 	.word	0x20000108
    21c4:	000012d1 	.word	0x000012d1
    21c8:	0000137d 	.word	0x0000137d

000021cc <configure_port_pins>:

//-------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------
void configure_port_pins(void) 
{
    21cc:	b530      	push	{r4, r5, lr}
    21ce:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    21d0:	ac01      	add	r4, sp, #4
    21d2:	2301      	movs	r3, #1
    21d4:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    21d6:	2200      	movs	r2, #0
    21d8:	70a2      	strb	r2, [r4, #2]
  struct port_config config_port_pin;
  port_get_config_defaults(&config_port_pin);
  config_port_pin.direction = PORT_PIN_DIR_OUTPUT; 
    21da:	7023      	strb	r3, [r4, #0]

  port_pin_set_config(ROW_SR_SET, &config_port_pin);
    21dc:	0021      	movs	r1, r4
    21de:	200a      	movs	r0, #10
    21e0:	4d1f      	ldr	r5, [pc, #124]	; (2260 <configure_port_pins+0x94>)
    21e2:	47a8      	blx	r5
  port_pin_set_config(ROW_SR_RST, &config_port_pin);
    21e4:	0021      	movs	r1, r4
    21e6:	200b      	movs	r0, #11
    21e8:	47a8      	blx	r5
  port_pin_set_config(RST_SR_D, &config_port_pin);
    21ea:	0021      	movs	r1, r4
    21ec:	2011      	movs	r0, #17
    21ee:	47a8      	blx	r5
  port_pin_set_config(RST_SR_CLK, &config_port_pin);
    21f0:	0021      	movs	r1, r4
    21f2:	200f      	movs	r0, #15
    21f4:	47a8      	blx	r5
  port_pin_set_config(RST_SR_SET, &config_port_pin);
    21f6:	0021      	movs	r1, r4
    21f8:	200c      	movs	r0, #12
    21fa:	47a8      	blx	r5
  port_pin_set_config(RST_SR_RST, &config_port_pin);
    21fc:	0021      	movs	r1, r4
    21fe:	200d      	movs	r0, #13
    2200:	47a8      	blx	r5
  port_pin_set_config(CDS_PHI1, &config_port_pin);
    2202:	0021      	movs	r1, r4
    2204:	2010      	movs	r0, #16
    2206:	47a8      	blx	r5
  port_pin_set_config(CDS_PHI2, &config_port_pin);
    2208:	0021      	movs	r1, r4
    220a:	2014      	movs	r0, #20
    220c:	47a8      	blx	r5
 
  port_pin_set_config(ROW_SR_D, &config_port_pin);
    220e:	0021      	movs	r1, r4
    2210:	2030      	movs	r0, #48	; 0x30
    2212:	47a8      	blx	r5
  port_pin_set_config(ROW_SR_CLK, &config_port_pin);
    2214:	0021      	movs	r1, r4
    2216:	2031      	movs	r0, #49	; 0x31
    2218:	47a8      	blx	r5
  port_pin_set_config(MUX_SR_D, &config_port_pin);
    221a:	0021      	movs	r1, r4
    221c:	201b      	movs	r0, #27
    221e:	47a8      	blx	r5
  port_pin_set_config(MUX_SR_SET, &config_port_pin);
    2220:	0021      	movs	r1, r4
    2222:	2037      	movs	r0, #55	; 0x37
    2224:	47a8      	blx	r5
  port_pin_set_config(MUX_SR_RST, &config_port_pin);
    2226:	0021      	movs	r1, r4
    2228:	2015      	movs	r0, #21
    222a:	47a8      	blx	r5
  port_pin_set_config(LED_POWER, &config_port_pin);
    222c:	0021      	movs	r1, r4
    222e:	203e      	movs	r0, #62	; 0x3e
    2230:	47a8      	blx	r5

  port_pin_set_config(MUX_SR_CLK, &config_port_pin);
    2232:	0021      	movs	r1, r4
    2234:	2036      	movs	r0, #54	; 0x36
    2236:	47a8      	blx	r5
  port_pin_set_config(AD8235_POWER, &config_port_pin);
    2238:	0021      	movs	r1, r4
    223a:	2028      	movs	r0, #40	; 0x28
    223c:	47a8      	blx	r5
  port_pin_set_config(EH_25, &config_port_pin);
    223e:	0021      	movs	r1, r4
    2240:	202d      	movs	r0, #45	; 0x2d
    2242:	47a8      	blx	r5
  port_pin_set_config(EH_50, &config_port_pin);
    2244:	0021      	movs	r1, r4
    2246:	202e      	movs	r0, #46	; 0x2e
    2248:	47a8      	blx	r5
  port_pin_set_config(EH_75, &config_port_pin);
    224a:	0021      	movs	r1, r4
    224c:	202f      	movs	r0, #47	; 0x2f
    224e:	47a8      	blx	r5
  port_pin_set_config(EH_100, &config_port_pin);
    2250:	0021      	movs	r1, r4
    2252:	202a      	movs	r0, #42	; 0x2a
    2254:	47a8      	blx	r5
  
  #ifdef XPLAINED_BOARD
   port_pin_set_config(PIN_PB05, &config_port_pin);
    2256:	0021      	movs	r1, r4
    2258:	2025      	movs	r0, #37	; 0x25
    225a:	47a8      	blx	r5
  #endif

}
    225c:	b003      	add	sp, #12
    225e:	bd30      	pop	{r4, r5, pc}
    2260:	00001115 	.word	0x00001115

00002264 <configure_adc>:

//--------------------------------------------------------------------------
// configures the ADC
//--------------------------------------------------------------------------
void configure_adc(void)
{
    2264:	b570      	push	{r4, r5, r6, lr}
	adc_get_config_defaults(&config_adc);
    2266:	4c13      	ldr	r4, [pc, #76]	; (22b4 <configure_adc+0x50>)
    2268:	0020      	movs	r0, r4
    226a:	4b13      	ldr	r3, [pc, #76]	; (22b8 <configure_adc+0x54>)
    226c:	4798      	blx	r3
	config_adc.reference       = ADC_REFERENCE_INTVCC2;
    226e:	2305      	movs	r3, #5
    2270:	7063      	strb	r3, [r4, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN0;    
    2272:	2300      	movs	r3, #0
    2274:	7123      	strb	r3, [r4, #4]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    2276:	3303      	adds	r3, #3
    2278:	70a3      	strb	r3, [r4, #2]
	adc_init(&adc_instance, ADC, &config_adc);
    227a:	4d10      	ldr	r5, [pc, #64]	; (22bc <configure_adc+0x58>)
    227c:	0022      	movs	r2, r4
    227e:	4910      	ldr	r1, [pc, #64]	; (22c0 <configure_adc+0x5c>)
    2280:	0028      	movs	r0, r5
    2282:	4b10      	ldr	r3, [pc, #64]	; (22c4 <configure_adc+0x60>)
    2284:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2286:	682a      	ldr	r2, [r5, #0]
    2288:	8c13      	ldrh	r3, [r2, #32]
    228a:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    228c:	2b00      	cmp	r3, #0
    228e:	d1fb      	bne.n	2288 <configure_adc+0x24>
    2290:	2180      	movs	r1, #128	; 0x80
    2292:	03c9      	lsls	r1, r1, #15
    2294:	4b0c      	ldr	r3, [pc, #48]	; (22c8 <configure_adc+0x64>)
    2296:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2298:	2307      	movs	r3, #7
    229a:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    229c:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    229e:	7813      	ldrb	r3, [r2, #0]
    22a0:	2102      	movs	r1, #2
    22a2:	430b      	orrs	r3, r1
    22a4:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    22a6:	4b05      	ldr	r3, [pc, #20]	; (22bc <configure_adc+0x58>)
    22a8:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    22aa:	8c13      	ldrh	r3, [r2, #32]
    22ac:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    22ae:	2b00      	cmp	r3, #0
    22b0:	d1fb      	bne.n	22aa <configure_adc+0x46>
	adc_enable(&adc_instance);
}
    22b2:	bd70      	pop	{r4, r5, r6, pc}
    22b4:	200001c8 	.word	0x200001c8
    22b8:	00000119 	.word	0x00000119
    22bc:	200002cc 	.word	0x200002cc
    22c0:	43000c00 	.word	0x43000c00
    22c4:	0000015d 	.word	0x0000015d
    22c8:	e000e100 	.word	0xe000e100

000022cc <configure_adc_pins>:

//--------------------------------------------------------------------------
// configures ADC pins 
//--------------------------------------------------------------------------
void configure_adc_pins(void)
{
    22cc:	b570      	push	{r4, r5, r6, lr}
    22ce:	b082      	sub	sp, #8
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    22d0:	ac01      	add	r4, sp, #4
    22d2:	2300      	movs	r3, #0
    22d4:	7063      	strb	r3, [r4, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    22d6:	2501      	movs	r5, #1
    22d8:	70a5      	strb	r5, [r4, #2]
	config->powersave    = false;
    22da:	70e3      	strb	r3, [r4, #3]
	// ADC general
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	// PIXEL_OUT
	config_pinmux.mux_position = MUX_PA03B_ADC_AIN1;
    22dc:	7025      	strb	r5, [r4, #0]
	system_pinmux_pin_set_config(PIN_PA03B_ADC_AIN1, &config_pinmux);
    22de:	0021      	movs	r1, r4
    22e0:	2003      	movs	r0, #3
    22e2:	4e04      	ldr	r6, [pc, #16]	; (22f4 <configure_adc_pins+0x28>)
    22e4:	47b0      	blx	r6
	
	// AD8235_OUT
	config_pinmux.mux_position = MUX_PA06B_ADC_AIN6;
    22e6:	7025      	strb	r5, [r4, #0]
	system_pinmux_pin_set_config(PIN_PA06B_ADC_AIN6, &config_pinmux);
    22e8:	0021      	movs	r1, r4
    22ea:	2006      	movs	r0, #6
    22ec:	47b0      	blx	r6
	
	// EH_OUT, not available in SAML21G18B
	//config_pinmux.mux_position = MUX_PB01B_ADC_AIN9;
	//system_pinmux_pin_set_config(PIN_PB01B_ADC_AIN9, &config_pinmux);
}
    22ee:	b002      	add	sp, #8
    22f0:	bd70      	pop	{r4, r5, r6, pc}
    22f2:	46c0      	nop			; (mov r8, r8)
    22f4:	000015e1 	.word	0x000015e1

000022f8 <adc_initialization>:
{
    22f8:	b510      	push	{r4, lr}
	configure_adc();
    22fa:	4b02      	ldr	r3, [pc, #8]	; (2304 <adc_initialization+0xc>)
    22fc:	4798      	blx	r3
	configure_adc_pins();
    22fe:	4b02      	ldr	r3, [pc, #8]	; (2308 <adc_initialization+0x10>)
    2300:	4798      	blx	r3
}
    2302:	bd10      	pop	{r4, pc}
    2304:	00002265 	.word	0x00002265
    2308:	000022cd 	.word	0x000022cd

0000230c <set_adc_channel>:

//--------------------------------------------------------------------------
// sets the ADC input to one of its several channels
//--------------------------------------------------------------------------
void set_adc_channel(uint8_t channel)
{
    230c:	b510      	push	{r4, lr}
    230e:	0004      	movs	r4, r0
	Adc *const adc_module = module_inst->hw;
    2310:	4b34      	ldr	r3, [pc, #208]	; (23e4 <set_adc_channel+0xd8>)
    2312:	681a      	ldr	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2314:	2080      	movs	r0, #128	; 0x80
    2316:	03c0      	lsls	r0, r0, #15
    2318:	2380      	movs	r3, #128	; 0x80
    231a:	4933      	ldr	r1, [pc, #204]	; (23e8 <set_adc_channel+0xdc>)
    231c:	50c8      	str	r0, [r1, r3]
    231e:	8c13      	ldrh	r3, [r2, #32]
    2320:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2322:	2b00      	cmp	r3, #0
    2324:	d1fb      	bne.n	231e <set_adc_channel+0x12>
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2326:	3307      	adds	r3, #7
    2328:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    232a:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    232c:	7813      	ldrb	r3, [r2, #0]
    232e:	2102      	movs	r1, #2
    2330:	438b      	bics	r3, r1
    2332:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    2334:	4b2b      	ldr	r3, [pc, #172]	; (23e4 <set_adc_channel+0xd8>)
    2336:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    2338:	8c13      	ldrh	r3, [r2, #32]
    233a:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    233c:	2b00      	cmp	r3, #0
    233e:	d1fb      	bne.n	2338 <set_adc_channel+0x2c>
	adc_disable(&adc_instance);
	adc_get_config_defaults(&config_adc);
    2340:	482a      	ldr	r0, [pc, #168]	; (23ec <set_adc_channel+0xe0>)
    2342:	4b2b      	ldr	r3, [pc, #172]	; (23f0 <set_adc_channel+0xe4>)
    2344:	4798      	blx	r3
	switch(channel) {	
    2346:	2c09      	cmp	r4, #9
    2348:	d806      	bhi.n	2358 <set_adc_channel+0x4c>
    234a:	00a4      	lsls	r4, r4, #2
    234c:	4b29      	ldr	r3, [pc, #164]	; (23f4 <set_adc_channel+0xe8>)
    234e:	591b      	ldr	r3, [r3, r4]
    2350:	469f      	mov	pc, r3
	   case ADC_CHANNEL_0:
	      config_adc.positive_input = ADC_POSITIVE_INPUT_PIN0;
    2352:	2200      	movs	r2, #0
    2354:	4b25      	ldr	r3, [pc, #148]	; (23ec <set_adc_channel+0xe0>)
    2356:	711a      	strb	r2, [r3, #4]
	      config_adc.positive_input = ADC_POSITIVE_INPUT_PIN9;
	      break;
	   default:	  
          break;		  
	}
	config_adc.reference       = ADC_REFERENCE_INTVCC2;
    2358:	4a24      	ldr	r2, [pc, #144]	; (23ec <set_adc_channel+0xe0>)
    235a:	2305      	movs	r3, #5
    235c:	7053      	strb	r3, [r2, #1]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    235e:	3b02      	subs	r3, #2
    2360:	7093      	strb	r3, [r2, #2]
	adc_init(&adc_instance, ADC, &config_adc);
    2362:	4c20      	ldr	r4, [pc, #128]	; (23e4 <set_adc_channel+0xd8>)
    2364:	4924      	ldr	r1, [pc, #144]	; (23f8 <set_adc_channel+0xec>)
    2366:	0020      	movs	r0, r4
    2368:	4b24      	ldr	r3, [pc, #144]	; (23fc <set_adc_channel+0xf0>)
    236a:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    236c:	6822      	ldr	r2, [r4, #0]
    236e:	8c13      	ldrh	r3, [r2, #32]
    2370:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2372:	2b00      	cmp	r3, #0
    2374:	d1fb      	bne.n	236e <set_adc_channel+0x62>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2376:	2180      	movs	r1, #128	; 0x80
    2378:	03c9      	lsls	r1, r1, #15
    237a:	4b1b      	ldr	r3, [pc, #108]	; (23e8 <set_adc_channel+0xdc>)
    237c:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    237e:	2307      	movs	r3, #7
    2380:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2382:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2384:	7813      	ldrb	r3, [r2, #0]
    2386:	2102      	movs	r1, #2
    2388:	430b      	orrs	r3, r1
    238a:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    238c:	4b15      	ldr	r3, [pc, #84]	; (23e4 <set_adc_channel+0xd8>)
    238e:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    2390:	8c13      	ldrh	r3, [r2, #32]
    2392:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2394:	2b00      	cmp	r3, #0
    2396:	d1fb      	bne.n	2390 <set_adc_channel+0x84>
	adc_enable(&adc_instance);
}
    2398:	bd10      	pop	{r4, pc}
	      config_adc.positive_input = ADC_POSITIVE_INPUT_PIN1;
    239a:	2201      	movs	r2, #1
    239c:	4b13      	ldr	r3, [pc, #76]	; (23ec <set_adc_channel+0xe0>)
    239e:	711a      	strb	r2, [r3, #4]
		  break;
    23a0:	e7da      	b.n	2358 <set_adc_channel+0x4c>
	      config_adc.positive_input = ADC_POSITIVE_INPUT_PIN2;
    23a2:	2202      	movs	r2, #2
    23a4:	4b11      	ldr	r3, [pc, #68]	; (23ec <set_adc_channel+0xe0>)
    23a6:	711a      	strb	r2, [r3, #4]
	      break;
    23a8:	e7d6      	b.n	2358 <set_adc_channel+0x4c>
	      config_adc.positive_input = ADC_POSITIVE_INPUT_PIN3;
    23aa:	2203      	movs	r2, #3
    23ac:	4b0f      	ldr	r3, [pc, #60]	; (23ec <set_adc_channel+0xe0>)
    23ae:	711a      	strb	r2, [r3, #4]
	      break;
    23b0:	e7d2      	b.n	2358 <set_adc_channel+0x4c>
	      config_adc.positive_input = ADC_POSITIVE_INPUT_PIN4;
    23b2:	2204      	movs	r2, #4
    23b4:	4b0d      	ldr	r3, [pc, #52]	; (23ec <set_adc_channel+0xe0>)
    23b6:	711a      	strb	r2, [r3, #4]
	      break;
    23b8:	e7ce      	b.n	2358 <set_adc_channel+0x4c>
	      config_adc.positive_input = ADC_POSITIVE_INPUT_PIN5;
    23ba:	2205      	movs	r2, #5
    23bc:	4b0b      	ldr	r3, [pc, #44]	; (23ec <set_adc_channel+0xe0>)
    23be:	711a      	strb	r2, [r3, #4]
	      break;
    23c0:	e7ca      	b.n	2358 <set_adc_channel+0x4c>
	      config_adc.positive_input = ADC_POSITIVE_INPUT_PIN6;
    23c2:	2206      	movs	r2, #6
    23c4:	4b09      	ldr	r3, [pc, #36]	; (23ec <set_adc_channel+0xe0>)
    23c6:	711a      	strb	r2, [r3, #4]
	      break;
    23c8:	e7c6      	b.n	2358 <set_adc_channel+0x4c>
	      config_adc.positive_input = ADC_POSITIVE_INPUT_PIN7;
    23ca:	2207      	movs	r2, #7
    23cc:	4b07      	ldr	r3, [pc, #28]	; (23ec <set_adc_channel+0xe0>)
    23ce:	711a      	strb	r2, [r3, #4]
	      break;
    23d0:	e7c2      	b.n	2358 <set_adc_channel+0x4c>
	      config_adc.positive_input = ADC_POSITIVE_INPUT_PIN8;
    23d2:	2208      	movs	r2, #8
    23d4:	4b05      	ldr	r3, [pc, #20]	; (23ec <set_adc_channel+0xe0>)
    23d6:	711a      	strb	r2, [r3, #4]
	      break;
    23d8:	e7be      	b.n	2358 <set_adc_channel+0x4c>
	      config_adc.positive_input = ADC_POSITIVE_INPUT_PIN9;
    23da:	2209      	movs	r2, #9
    23dc:	4b03      	ldr	r3, [pc, #12]	; (23ec <set_adc_channel+0xe0>)
    23de:	711a      	strb	r2, [r3, #4]
	      break;
    23e0:	e7ba      	b.n	2358 <set_adc_channel+0x4c>
    23e2:	46c0      	nop			; (mov r8, r8)
    23e4:	200002cc 	.word	0x200002cc
    23e8:	e000e100 	.word	0xe000e100
    23ec:	200001c8 	.word	0x200001c8
    23f0:	00000119 	.word	0x00000119
    23f4:	000057b8 	.word	0x000057b8
    23f8:	43000c00 	.word	0x43000c00
    23fc:	0000015d 	.word	0x0000015d

00002400 <read_adc>:

//--------------------------------------------------------------------------
// starts an analog-to-digital conversion and returns result of conversion
//--------------------------------------------------------------------------
uint16_t read_adc(void)
{
    2400:	b530      	push	{r4, r5, lr}
	Adc *const adc_module = module_inst->hw;
    2402:	4b19      	ldr	r3, [pc, #100]	; (2468 <read_adc+0x68>)
    2404:	6819      	ldr	r1, [r3, #0]
    2406:	8c0b      	ldrh	r3, [r1, #32]
    2408:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    240a:	2b00      	cmp	r3, #0
    240c:	d1fb      	bne.n	2406 <read_adc+0x6>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    240e:	7e0b      	ldrb	r3, [r1, #24]
    2410:	2202      	movs	r2, #2
    2412:	4313      	orrs	r3, r2
    2414:	760b      	strb	r3, [r1, #24]
    2416:	8c0b      	ldrh	r3, [r1, #32]
    2418:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    241a:	2b00      	cmp	r3, #0
    241c:	d1fb      	bne.n	2416 <read_adc+0x16>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    241e:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2420:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    2422:	2402      	movs	r4, #2
    2424:	e001      	b.n	242a <read_adc+0x2a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2426:	4210      	tst	r0, r2
    2428:	d10a      	bne.n	2440 <read_adc+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    242a:	798b      	ldrb	r3, [r1, #6]
    242c:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    242e:	0002      	movs	r2, r0
    2430:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    2432:	421d      	tst	r5, r3
    2434:	d000      	beq.n	2438 <read_adc+0x38>
		status_flags |= ADC_STATUS_WINDOW;
    2436:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2438:	421c      	tst	r4, r3
    243a:	d0f4      	beq.n	2426 <read_adc+0x26>
		status_flags |= ADC_STATUS_OVERRUN;
    243c:	432a      	orrs	r2, r5
    243e:	e7f2      	b.n	2426 <read_adc+0x26>
	*result = adc_module->RESULT.reg;
    2440:	8c88      	ldrh	r0, [r1, #36]	; 0x24
    2442:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    2444:	2301      	movs	r3, #1
    2446:	718b      	strb	r3, [r1, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2448:	798a      	ldrb	r2, [r1, #6]
    244a:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    244c:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    244e:	0754      	lsls	r4, r2, #29
    2450:	d501      	bpl.n	2456 <read_adc+0x56>
		status_flags |= ADC_STATUS_WINDOW;
    2452:	2402      	movs	r4, #2
    2454:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2456:	0792      	lsls	r2, r2, #30
    2458:	d501      	bpl.n	245e <read_adc+0x5e>
		status_flags |= ADC_STATUS_OVERRUN;
    245a:	2204      	movs	r2, #4
    245c:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    245e:	075b      	lsls	r3, r3, #29
    2460:	d501      	bpl.n	2466 <read_adc+0x66>
	adc_module->INTFLAG.reg = int_flags;
    2462:	2302      	movs	r3, #2
    2464:	718b      	strb	r3, [r1, #6]
	do {
		// wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
	
	return result;
}
    2466:	bd30      	pop	{r4, r5, pc}
    2468:	200002cc 	.word	0x200002cc

0000246c <configure_dac>:

//--------------------------------------------------------------------------
// configure DAC
//--------------------------------------------------------------------------
void configure_dac(void)
{
    246c:	b510      	push	{r4, lr}
    246e:	b082      	sub	sp, #8
	struct dac_config config_dac;
	dac_get_config_defaults(&config_dac);
    2470:	ac01      	add	r4, sp, #4
    2472:	0020      	movs	r0, r4
    2474:	4b05      	ldr	r3, [pc, #20]	; (248c <configure_dac+0x20>)
    2476:	4798      	blx	r3
	config_dac.reference = DAC_REFERENCE_VDDANA;
    2478:	2302      	movs	r3, #2
    247a:	7063      	strb	r3, [r4, #1]
	dac_init(&dac_instance, DAC, &config_dac);
    247c:	0022      	movs	r2, r4
    247e:	4904      	ldr	r1, [pc, #16]	; (2490 <configure_dac+0x24>)
    2480:	4804      	ldr	r0, [pc, #16]	; (2494 <configure_dac+0x28>)
    2482:	4b05      	ldr	r3, [pc, #20]	; (2498 <configure_dac+0x2c>)
    2484:	4798      	blx	r3
}
    2486:	b002      	add	sp, #8
    2488:	bd10      	pop	{r4, pc}
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	00000611 	.word	0x00000611
    2490:	42003000 	.word	0x42003000
    2494:	20000230 	.word	0x20000230
    2498:	0000061d 	.word	0x0000061d

0000249c <configure_dac_channel>:

//--------------------------------------------------------------------------
// configure DAC channel
//--------------------------------------------------------------------------
void configure_dac_channel(void)
{
    249c:	b570      	push	{r4, r5, r6, lr}
    249e:	b082      	sub	sp, #8
	struct dac_chan_config config_dac_chan;
	dac_chan_get_config_defaults(&config_dac_chan);
    24a0:	4668      	mov	r0, sp
    24a2:	4b0a      	ldr	r3, [pc, #40]	; (24cc <configure_dac_channel+0x30>)
    24a4:	4798      	blx	r3
	
	dac_chan_set_config(&dac_instance, DAC_CHANNEL_0, &config_dac_chan);
    24a6:	4c0a      	ldr	r4, [pc, #40]	; (24d0 <configure_dac_channel+0x34>)
    24a8:	466a      	mov	r2, sp
    24aa:	2100      	movs	r1, #0
    24ac:	0020      	movs	r0, r4
    24ae:	4e09      	ldr	r6, [pc, #36]	; (24d4 <configure_dac_channel+0x38>)
    24b0:	47b0      	blx	r6
	dac_chan_enable(&dac_instance, DAC_CHANNEL_0);
    24b2:	2100      	movs	r1, #0
    24b4:	0020      	movs	r0, r4
    24b6:	4d08      	ldr	r5, [pc, #32]	; (24d8 <configure_dac_channel+0x3c>)
    24b8:	47a8      	blx	r5
	
	dac_chan_set_config(&dac_instance, DAC_CHANNEL_1, &config_dac_chan);
    24ba:	466a      	mov	r2, sp
    24bc:	2101      	movs	r1, #1
    24be:	0020      	movs	r0, r4
    24c0:	47b0      	blx	r6
	dac_chan_enable(&dac_instance, DAC_CHANNEL_1);
    24c2:	2101      	movs	r1, #1
    24c4:	0020      	movs	r0, r4
    24c6:	47a8      	blx	r5
}
    24c8:	b002      	add	sp, #8
    24ca:	bd70      	pop	{r4, r5, r6, pc}
    24cc:	000006e5 	.word	0x000006e5
    24d0:	20000230 	.word	0x20000230
    24d4:	000006f9 	.word	0x000006f9
    24d8:	0000076d 	.word	0x0000076d

000024dc <configure_dac_pins>:

//--------------------------------------------------------------------------
// set output pins for DAC
//--------------------------------------------------------------------------
void configure_dac_pins(void)
{
    24dc:	b570      	push	{r4, r5, r6, lr}
    24de:	b082      	sub	sp, #8
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    24e0:	ac01      	add	r4, sp, #4
    24e2:	2300      	movs	r3, #0
    24e4:	7063      	strb	r3, [r4, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    24e6:	2501      	movs	r5, #1
    24e8:	70a5      	strb	r5, [r4, #2]
	config->powersave    = false;
    24ea:	70e3      	strb	r3, [r4, #3]
	// DAC General
	struct system_pinmux_config config_pinmux;
	system_pinmux_get_config_defaults(&config_pinmux);
	
	// DAC VOUT[0]
	config_pinmux.mux_position = MUX_PA02B_DAC_VOUT0; // set multiplexer pin to VOUT0
    24ec:	7025      	strb	r5, [r4, #0]
	system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT0, &config_pinmux);
    24ee:	0021      	movs	r1, r4
    24f0:	2002      	movs	r0, #2
    24f2:	4e04      	ldr	r6, [pc, #16]	; (2504 <configure_dac_pins+0x28>)
    24f4:	47b0      	blx	r6
	
	// DAC VOUT[1]
	config_pinmux.mux_position = MUX_PA05B_DAC_VOUT1; // set pin multiplexer pin to VOUT1
    24f6:	7025      	strb	r5, [r4, #0]
	system_pinmux_pin_set_config(PIN_PA05B_DAC_VOUT1, &config_pinmux);
    24f8:	0021      	movs	r1, r4
    24fa:	2005      	movs	r0, #5
    24fc:	47b0      	blx	r6
}
    24fe:	b002      	add	sp, #8
    2500:	bd70      	pop	{r4, r5, r6, pc}
    2502:	46c0      	nop			; (mov r8, r8)
    2504:	000015e1 	.word	0x000015e1

00002508 <dac_initialization>:
{
    2508:	b510      	push	{r4, lr}
	configure_dac();
    250a:	4b05      	ldr	r3, [pc, #20]	; (2520 <dac_initialization+0x18>)
    250c:	4798      	blx	r3
	configure_dac_channel();
    250e:	4b05      	ldr	r3, [pc, #20]	; (2524 <dac_initialization+0x1c>)
    2510:	4798      	blx	r3
	configure_dac_pins();
    2512:	4b05      	ldr	r3, [pc, #20]	; (2528 <dac_initialization+0x20>)
    2514:	4798      	blx	r3
	dac_enable(&dac_instance);
    2516:	4805      	ldr	r0, [pc, #20]	; (252c <dac_initialization+0x24>)
    2518:	4b05      	ldr	r3, [pc, #20]	; (2530 <dac_initialization+0x28>)
    251a:	4798      	blx	r3
}
    251c:	bd10      	pop	{r4, pc}
    251e:	46c0      	nop			; (mov r8, r8)
    2520:	0000246d 	.word	0x0000246d
    2524:	0000249d 	.word	0x0000249d
    2528:	000024dd 	.word	0x000024dd
    252c:	20000230 	.word	0x20000230
    2530:	00000691 	.word	0x00000691

00002534 <controller_fsm>:

//-------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------
uint32_t controller_fsm(uint8_t *state)
{
    2534:	b570      	push	{r4, r5, r6, lr}
    2536:	0004      	movs	r4, r0
     static uint16_t row_count, col_count, pixel_count;
	 static uint32_t nxt_state_wait = 1000;			// wait time until next state in micro-seconds
	 uint16_t adc_result;
	 uint16_t dac_CDS_Vbp2;
	     	 
		switch (*state) 
    2538:	7803      	ldrb	r3, [r0, #0]
    253a:	2b13      	cmp	r3, #19
    253c:	d900      	bls.n	2540 <controller_fsm+0xc>
    253e:	e14a      	b.n	27d6 <controller_fsm+0x2a2>
    2540:	009b      	lsls	r3, r3, #2
    2542:	4aa6      	ldr	r2, [pc, #664]	; (27dc <controller_fsm+0x2a8>)
    2544:	58d3      	ldr	r3, [r2, r3]
    2546:	469f      	mov	pc, r3
		port_base->OUTCLR.reg = pin_mask;
    2548:	4ba5      	ldr	r3, [pc, #660]	; (27e0 <controller_fsm+0x2ac>)
    254a:	4aa6      	ldr	r2, [pc, #664]	; (27e4 <controller_fsm+0x2b0>)
    254c:	2180      	movs	r1, #128	; 0x80
    254e:	0249      	lsls	r1, r1, #9
    2550:	6151      	str	r1, [r2, #20]
    2552:	2080      	movs	r0, #128	; 0x80
    2554:	0280      	lsls	r0, r0, #10
    2556:	6150      	str	r0, [r2, #20]
		port_base->OUTSET.reg = pin_mask;
    2558:	2580      	movs	r5, #128	; 0x80
    255a:	012d      	lsls	r5, r5, #4
    255c:	619d      	str	r5, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    255e:	2580      	movs	r5, #128	; 0x80
    2560:	00ed      	lsls	r5, r5, #3
    2562:	615d      	str	r5, [r3, #20]
    2564:	6158      	str	r0, [r3, #20]
    2566:	2080      	movs	r0, #128	; 0x80
    2568:	0200      	lsls	r0, r0, #8
    256a:	6158      	str	r0, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    256c:	2080      	movs	r0, #128	; 0x80
    256e:	0180      	lsls	r0, r0, #6
    2570:	6198      	str	r0, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    2572:	2080      	movs	r0, #128	; 0x80
    2574:	0140      	lsls	r0, r0, #5
    2576:	6158      	str	r0, [r3, #20]
    2578:	2080      	movs	r0, #128	; 0x80
    257a:	0500      	lsls	r0, r0, #20
    257c:	6158      	str	r0, [r3, #20]
    257e:	2080      	movs	r0, #128	; 0x80
    2580:	03c0      	lsls	r0, r0, #15
    2582:	6150      	str	r0, [r2, #20]
		port_base->OUTSET.reg = pin_mask;
    2584:	2080      	movs	r0, #128	; 0x80
    2586:	0380      	lsls	r0, r0, #14
    2588:	6198      	str	r0, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    258a:	2080      	movs	r0, #128	; 0x80
    258c:	0400      	lsls	r0, r0, #16
    258e:	6150      	str	r0, [r2, #20]
    2590:	6159      	str	r1, [r3, #20]
    2592:	2280      	movs	r2, #128	; 0x80
    2594:	0352      	lsls	r2, r2, #13
    2596:	615a      	str	r2, [r3, #20]
			   
			   port_pin_set_output_level(CDS_PHI1, 0);
			   port_pin_set_output_level(CDS_PHI2, 0);
			   
			   dac_CDS_Vbp2 = 2895;													// added 07/12/17 FC
			   dac_chan_write(&dac_instance, CDS_VBP2, mV_to_int(dac_CDS_Vbp2) );
    2598:	4a93      	ldr	r2, [pc, #588]	; (27e8 <controller_fsm+0x2b4>)
    259a:	2101      	movs	r1, #1
    259c:	4893      	ldr	r0, [pc, #588]	; (27ec <controller_fsm+0x2b8>)
    259e:	4b94      	ldr	r3, [pc, #592]	; (27f0 <controller_fsm+0x2bc>)
    25a0:	4798      	blx	r3
			   			   			   
			   row_count         = 0;
    25a2:	2300      	movs	r3, #0
    25a4:	4a93      	ldr	r2, [pc, #588]	; (27f4 <controller_fsm+0x2c0>)
    25a6:	8013      	strh	r3, [r2, #0]
               col_count         = 0;
    25a8:	4a93      	ldr	r2, [pc, #588]	; (27f8 <controller_fsm+0x2c4>)
    25aa:	8013      	strh	r3, [r2, #0]
			   pixel_count       = 0;
    25ac:	4a93      	ldr	r2, [pc, #588]	; (27fc <controller_fsm+0x2c8>)
    25ae:	8013      	strh	r3, [r2, #0]
		       nxt_state_wait    = default_fsm_wait;
    25b0:	4b93      	ldr	r3, [pc, #588]	; (2800 <controller_fsm+0x2cc>)
    25b2:	681a      	ldr	r2, [r3, #0]
    25b4:	4b93      	ldr	r3, [pc, #588]	; (2804 <controller_fsm+0x2d0>)
    25b6:	601a      	str	r2, [r3, #0]
			   *state = IDLE;
    25b8:	2301      	movs	r3, #1
    25ba:	7023      	strb	r3, [r4, #0]
			default:
			   *state = RESET;
			   break;
			
		} 
	return nxt_state_wait;	
    25bc:	4b91      	ldr	r3, [pc, #580]	; (2804 <controller_fsm+0x2d0>)
    25be:	6818      	ldr	r0, [r3, #0]
}
    25c0:	bd70      	pop	{r4, r5, r6, pc}
			   *state = WAIT_TRIGGER;
    25c2:	2302      	movs	r3, #2
    25c4:	7003      	strb	r3, [r0, #0]
			   break;
    25c6:	e7f9      	b.n	25bc <controller_fsm+0x88>
			   if (free_running_image_acq == 1)
    25c8:	4b8f      	ldr	r3, [pc, #572]	; (2808 <controller_fsm+0x2d4>)
    25ca:	781b      	ldrb	r3, [r3, #0]
    25cc:	2b01      	cmp	r3, #1
    25ce:	d006      	beq.n	25de <controller_fsm+0xaa>
				   if (trigger_image_acq == 1)
    25d0:	4b8e      	ldr	r3, [pc, #568]	; (280c <controller_fsm+0x2d8>)
    25d2:	781b      	ldrb	r3, [r3, #0]
    25d4:	2b01      	cmp	r3, #1
    25d6:	d005      	beq.n	25e4 <controller_fsm+0xb0>
				     *state = WAIT_TRIGGER;
    25d8:	2302      	movs	r3, #2
    25da:	7003      	strb	r3, [r0, #0]
    25dc:	e7ee      	b.n	25bc <controller_fsm+0x88>
			      *state = INT0;
    25de:	3302      	adds	r3, #2
    25e0:	7003      	strb	r3, [r0, #0]
    25e2:	e7eb      	b.n	25bc <controller_fsm+0x88>
				     *state = INT0;
    25e4:	3302      	adds	r3, #2
    25e6:	7003      	strb	r3, [r0, #0]
    25e8:	e7e8      	b.n	25bc <controller_fsm+0x88>
    25ea:	4b7d      	ldr	r3, [pc, #500]	; (27e0 <controller_fsm+0x2ac>)
    25ec:	2180      	movs	r1, #128	; 0x80
    25ee:	0289      	lsls	r1, r1, #10
    25f0:	6159      	str	r1, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    25f2:	4a7c      	ldr	r2, [pc, #496]	; (27e4 <controller_fsm+0x2b0>)
    25f4:	2080      	movs	r0, #128	; 0x80
    25f6:	0240      	lsls	r0, r0, #9
    25f8:	6190      	str	r0, [r2, #24]
		port_base->OUTCLR.reg = pin_mask;
    25fa:	2080      	movs	r0, #128	; 0x80
    25fc:	0500      	lsls	r0, r0, #20
    25fe:	6158      	str	r0, [r3, #20]
    2600:	2080      	movs	r0, #128	; 0x80
    2602:	0200      	lsls	r0, r0, #8
    2604:	6158      	str	r0, [r3, #20]
    2606:	6151      	str	r1, [r2, #20]
    2608:	2180      	movs	r1, #128	; 0x80
    260a:	03c9      	lsls	r1, r1, #15
    260c:	6151      	str	r1, [r2, #20]
    260e:	2280      	movs	r2, #128	; 0x80
    2610:	0192      	lsls	r2, r2, #6
    2612:	615a      	str	r2, [r3, #20]
    2614:	2280      	movs	r2, #128	; 0x80
    2616:	0112      	lsls	r2, r2, #4
    2618:	615a      	str	r2, [r3, #20]
    261a:	2280      	movs	r2, #128	; 0x80
    261c:	0392      	lsls	r2, r2, #14
    261e:	615a      	str	r2, [r3, #20]
			   row_count   = 0;
    2620:	2300      	movs	r3, #0
    2622:	4a74      	ldr	r2, [pc, #464]	; (27f4 <controller_fsm+0x2c0>)
    2624:	8013      	strh	r3, [r2, #0]
			   pixel_count = 0;
    2626:	4a75      	ldr	r2, [pc, #468]	; (27fc <controller_fsm+0x2c8>)
    2628:	8013      	strh	r3, [r2, #0]
		       nxt_state_wait = default_fsm_wait;
    262a:	4b75      	ldr	r3, [pc, #468]	; (2800 <controller_fsm+0x2cc>)
    262c:	681a      	ldr	r2, [r3, #0]
    262e:	4b75      	ldr	r3, [pc, #468]	; (2804 <controller_fsm+0x2d0>)
    2630:	601a      	str	r2, [r3, #0]
			   set_adc_channel(PIXEL_OUT);
    2632:	2001      	movs	r0, #1
    2634:	4b76      	ldr	r3, [pc, #472]	; (2810 <controller_fsm+0x2dc>)
    2636:	4798      	blx	r3
			   *state = INT0_A;
    2638:	2304      	movs	r3, #4
    263a:	7023      	strb	r3, [r4, #0]
			   break;
    263c:	e7be      	b.n	25bc <controller_fsm+0x88>
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    263e:	2280      	movs	r2, #128	; 0x80
    2640:	0292      	lsls	r2, r2, #10
    2642:	4b67      	ldr	r3, [pc, #412]	; (27e0 <controller_fsm+0x2ac>)
    2644:	61da      	str	r2, [r3, #28]
			   col_count = 0;
    2646:	2200      	movs	r2, #0
    2648:	4b6b      	ldr	r3, [pc, #428]	; (27f8 <controller_fsm+0x2c4>)
    264a:	801a      	strh	r2, [r3, #0]
			   *state = INT1;
    264c:	2305      	movs	r3, #5
    264e:	7003      	strb	r3, [r0, #0]
			   break;
    2650:	e7b4      	b.n	25bc <controller_fsm+0x88>
		port_base->OUTSET.reg = pin_mask;
    2652:	2280      	movs	r2, #128	; 0x80
    2654:	0212      	lsls	r2, r2, #8
    2656:	4b62      	ldr	r3, [pc, #392]	; (27e0 <controller_fsm+0x2ac>)
    2658:	619a      	str	r2, [r3, #24]
			   *state = INT2;
    265a:	2306      	movs	r3, #6
    265c:	7003      	strb	r3, [r0, #0]
			   break;
    265e:	e7ad      	b.n	25bc <controller_fsm+0x88>
		port_base->OUTCLR.reg = pin_mask;
    2660:	2280      	movs	r2, #128	; 0x80
    2662:	0212      	lsls	r2, r2, #8
    2664:	4b5e      	ldr	r3, [pc, #376]	; (27e0 <controller_fsm+0x2ac>)
    2666:	615a      	str	r2, [r3, #20]
			   *state = INT2_A;
    2668:	2307      	movs	r3, #7
    266a:	7003      	strb	r3, [r0, #0]
			   break;
    266c:	e7a6      	b.n	25bc <controller_fsm+0x88>
	port_base->OUTTGL.reg = pin_mask;
    266e:	2280      	movs	r2, #128	; 0x80
    2670:	0292      	lsls	r2, r2, #10
    2672:	4b5b      	ldr	r3, [pc, #364]	; (27e0 <controller_fsm+0x2ac>)
    2674:	61da      	str	r2, [r3, #28]
			   *state = INT2_B;
    2676:	2308      	movs	r3, #8
    2678:	7003      	strb	r3, [r0, #0]
			   break;
    267a:	e79f      	b.n	25bc <controller_fsm+0x88>
		port_base->OUTSET.reg = pin_mask;
    267c:	2220      	movs	r2, #32
    267e:	4b59      	ldr	r3, [pc, #356]	; (27e4 <controller_fsm+0x2b0>)
    2680:	619a      	str	r2, [r3, #24]
    2682:	2280      	movs	r2, #128	; 0x80
    2684:	0212      	lsls	r2, r2, #8
    2686:	4b56      	ldr	r3, [pc, #344]	; (27e0 <controller_fsm+0x2ac>)
    2688:	619a      	str	r2, [r3, #24]
			   nxt_state_wait = integration_time;
    268a:	4b62      	ldr	r3, [pc, #392]	; (2814 <controller_fsm+0x2e0>)
    268c:	681a      	ldr	r2, [r3, #0]
    268e:	4b5d      	ldr	r3, [pc, #372]	; (2804 <controller_fsm+0x2d0>)
    2690:	601a      	str	r2, [r3, #0]
			   *state = VSCAN0;
    2692:	2309      	movs	r3, #9
    2694:	7003      	strb	r3, [r0, #0]
			   break;
    2696:	e791      	b.n	25bc <controller_fsm+0x88>
		port_base->OUTCLR.reg = pin_mask;
    2698:	4b52      	ldr	r3, [pc, #328]	; (27e4 <controller_fsm+0x2b0>)
    269a:	2220      	movs	r2, #32
    269c:	615a      	str	r2, [r3, #20]
    269e:	2180      	movs	r1, #128	; 0x80
    26a0:	0209      	lsls	r1, r1, #8
    26a2:	4a4f      	ldr	r2, [pc, #316]	; (27e0 <controller_fsm+0x2ac>)
    26a4:	6151      	str	r1, [r2, #20]
		port_base->OUTSET.reg = pin_mask;
    26a6:	2280      	movs	r2, #128	; 0x80
    26a8:	0292      	lsls	r2, r2, #10
    26aa:	619a      	str	r2, [r3, #24]
			   nxt_state_wait = default_fsm_wait;
    26ac:	4b54      	ldr	r3, [pc, #336]	; (2800 <controller_fsm+0x2cc>)
    26ae:	681a      	ldr	r2, [r3, #0]
    26b0:	4b54      	ldr	r3, [pc, #336]	; (2804 <controller_fsm+0x2d0>)
    26b2:	601a      	str	r2, [r3, #0]
			   *state = VSCAN1;
    26b4:	230a      	movs	r3, #10
    26b6:	7003      	strb	r3, [r0, #0]
			   break;
    26b8:	e780      	b.n	25bc <controller_fsm+0x88>
    26ba:	4b49      	ldr	r3, [pc, #292]	; (27e0 <controller_fsm+0x2ac>)
    26bc:	2280      	movs	r2, #128	; 0x80
    26be:	0252      	lsls	r2, r2, #9
    26c0:	619a      	str	r2, [r3, #24]
	port_base->OUTTGL.reg = pin_mask;
    26c2:	2280      	movs	r2, #128	; 0x80
    26c4:	0292      	lsls	r2, r2, #10
    26c6:	61da      	str	r2, [r3, #28]
			   *state = VSCAN2;
    26c8:	230b      	movs	r3, #11
    26ca:	7003      	strb	r3, [r0, #0]
			   break;   
    26cc:	e776      	b.n	25bc <controller_fsm+0x88>
		port_base->OUTCLR.reg = pin_mask;
    26ce:	2280      	movs	r2, #128	; 0x80
    26d0:	0252      	lsls	r2, r2, #9
    26d2:	4b43      	ldr	r3, [pc, #268]	; (27e0 <controller_fsm+0x2ac>)
    26d4:	615a      	str	r2, [r3, #20]
			   *state = VSCAN3;
    26d6:	230c      	movs	r3, #12
    26d8:	7003      	strb	r3, [r0, #0]
			   break;			
    26da:	e76f      	b.n	25bc <controller_fsm+0x88>
		port_base->OUTSET.reg = pin_mask;
    26dc:	2280      	movs	r2, #128	; 0x80
    26de:	0212      	lsls	r2, r2, #8
    26e0:	4b3f      	ldr	r3, [pc, #252]	; (27e0 <controller_fsm+0x2ac>)
    26e2:	619a      	str	r2, [r3, #24]
			   *state = VSCAN4;
    26e4:	230d      	movs	r3, #13
    26e6:	7003      	strb	r3, [r0, #0]
			   break;
    26e8:	e768      	b.n	25bc <controller_fsm+0x88>
    26ea:	4b3d      	ldr	r3, [pc, #244]	; (27e0 <controller_fsm+0x2ac>)
    26ec:	2280      	movs	r2, #128	; 0x80
    26ee:	0352      	lsls	r2, r2, #13
    26f0:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    26f2:	2280      	movs	r2, #128	; 0x80
    26f4:	0212      	lsls	r2, r2, #8
    26f6:	615a      	str	r2, [r3, #20]
			   *state = VSCAN5;
    26f8:	230e      	movs	r3, #14
    26fa:	7003      	strb	r3, [r0, #0]
			   break;
    26fc:	e75e      	b.n	25bc <controller_fsm+0x88>
    26fe:	2280      	movs	r2, #128	; 0x80
    2700:	0352      	lsls	r2, r2, #13
    2702:	4b37      	ldr	r3, [pc, #220]	; (27e0 <controller_fsm+0x2ac>)
    2704:	615a      	str	r2, [r3, #20]
    2706:	4b37      	ldr	r3, [pc, #220]	; (27e4 <controller_fsm+0x2b0>)
    2708:	2280      	movs	r2, #128	; 0x80
    270a:	0292      	lsls	r2, r2, #10
    270c:	615a      	str	r2, [r3, #20]
    270e:	2280      	movs	r2, #128	; 0x80
    2710:	0252      	lsls	r2, r2, #9
    2712:	615a      	str	r2, [r3, #20]
			   *state = HSCAN0;
    2714:	2310      	movs	r3, #16
    2716:	7003      	strb	r3, [r0, #0]
			   break;   
    2718:	e750      	b.n	25bc <controller_fsm+0x88>
		port_base->OUTSET.reg = pin_mask;
    271a:	2280      	movs	r2, #128	; 0x80
    271c:	0512      	lsls	r2, r2, #20
    271e:	4b30      	ldr	r3, [pc, #192]	; (27e0 <controller_fsm+0x2ac>)
    2720:	619a      	str	r2, [r3, #24]
			   col_count = 0;
    2722:	2200      	movs	r2, #0
    2724:	4b34      	ldr	r3, [pc, #208]	; (27f8 <controller_fsm+0x2c4>)
    2726:	801a      	strh	r2, [r3, #0]
			   *state = HSCAN1;
    2728:	2311      	movs	r3, #17
    272a:	7003      	strb	r3, [r0, #0]
			   break;   
    272c:	e746      	b.n	25bc <controller_fsm+0x88>
    272e:	2280      	movs	r2, #128	; 0x80
    2730:	03d2      	lsls	r2, r2, #15
    2732:	4b2c      	ldr	r3, [pc, #176]	; (27e4 <controller_fsm+0x2b0>)
    2734:	619a      	str	r2, [r3, #24]
			   *state = HSCAN_A2D;
    2736:	2312      	movs	r3, #18
    2738:	7003      	strb	r3, [r0, #0]
			   break;
    273a:	e73f      	b.n	25bc <controller_fsm+0x88>
 		       adc_result = read_adc();
    273c:	4b36      	ldr	r3, [pc, #216]	; (2818 <controller_fsm+0x2e4>)
    273e:	4798      	blx	r3
			   if(pixel_count % 2 == 1) {
    2740:	4b2e      	ldr	r3, [pc, #184]	; (27fc <controller_fsm+0x2c8>)
    2742:	881b      	ldrh	r3, [r3, #0]
    2744:	07da      	lsls	r2, r3, #31
    2746:	d50e      	bpl.n	2766 <controller_fsm+0x232>
				  image_array[pixel_count]   = (adc_result >> 4) & 0xFF;	// high byte
    2748:	4a34      	ldr	r2, [pc, #208]	; (281c <controller_fsm+0x2e8>)
    274a:	0901      	lsrs	r1, r0, #4
    274c:	6815      	ldr	r5, [r2, #0]
    274e:	54e9      	strb	r1, [r5, r3]
				  image_array[pixel_count+1] = (adc_result << 4) & 0xF0;	// last four bits
    2750:	6812      	ldr	r2, [r2, #0]
    2752:	18d3      	adds	r3, r2, r3
    2754:	0100      	lsls	r0, r0, #4
    2756:	7058      	strb	r0, [r3, #1]
			   pixel_count ++;	
    2758:	4a28      	ldr	r2, [pc, #160]	; (27fc <controller_fsm+0x2c8>)
    275a:	8813      	ldrh	r3, [r2, #0]
    275c:	3301      	adds	r3, #1
    275e:	8013      	strh	r3, [r2, #0]
			   *state = HSCAN2;
    2760:	2313      	movs	r3, #19
    2762:	7023      	strb	r3, [r4, #0]
			   break;
    2764:	e72a      	b.n	25bc <controller_fsm+0x88>
			  	  image_array[pixel_count]   = (image_array[pixel_count] & 0xF0) + ((adc_result >> 8) & 0x0F);
    2766:	4e2d      	ldr	r6, [pc, #180]	; (281c <controller_fsm+0x2e8>)
    2768:	6832      	ldr	r2, [r6, #0]
    276a:	18d1      	adds	r1, r2, r3
    276c:	780a      	ldrb	r2, [r1, #0]
    276e:	250f      	movs	r5, #15
    2770:	43aa      	bics	r2, r5
    2772:	0505      	lsls	r5, r0, #20
    2774:	0f2d      	lsrs	r5, r5, #28
    2776:	432a      	orrs	r2, r5
    2778:	700a      	strb	r2, [r1, #0]
				  image_array[pixel_count+1] = (adc_result & 0xFF);
    277a:	6832      	ldr	r2, [r6, #0]
    277c:	18d3      	adds	r3, r2, r3
    277e:	7058      	strb	r0, [r3, #1]
    2780:	e7ea      	b.n	2758 <controller_fsm+0x224>
		port_base->OUTCLR.reg = pin_mask;
    2782:	2280      	movs	r2, #128	; 0x80
    2784:	0512      	lsls	r2, r2, #20
    2786:	4b16      	ldr	r3, [pc, #88]	; (27e0 <controller_fsm+0x2ac>)
    2788:	615a      	str	r2, [r3, #20]
    278a:	2280      	movs	r2, #128	; 0x80
    278c:	03d2      	lsls	r2, r2, #15
    278e:	4b15      	ldr	r3, [pc, #84]	; (27e4 <controller_fsm+0x2b0>)
    2790:	615a      	str	r2, [r3, #20]
			   col_count ++;
    2792:	4a19      	ldr	r2, [pc, #100]	; (27f8 <controller_fsm+0x2c4>)
    2794:	8813      	ldrh	r3, [r2, #0]
    2796:	3301      	adds	r3, #1
    2798:	b29b      	uxth	r3, r3
    279a:	8013      	strh	r3, [r2, #0]
			   if (col_count >= NUM_COLS) {
    279c:	2b03      	cmp	r3, #3
    279e:	d905      	bls.n	27ac <controller_fsm+0x278>
			      col_count = 0;
    27a0:	2200      	movs	r2, #0
    27a2:	4b15      	ldr	r3, [pc, #84]	; (27f8 <controller_fsm+0x2c4>)
    27a4:	801a      	strh	r2, [r3, #0]
				  *state = VSCAN6;
    27a6:	230f      	movs	r3, #15
    27a8:	7003      	strb	r3, [r0, #0]
    27aa:	e707      	b.n	25bc <controller_fsm+0x88>
				  *state = HSCAN1; 
    27ac:	2311      	movs	r3, #17
    27ae:	7003      	strb	r3, [r0, #0]
    27b0:	e704      	b.n	25bc <controller_fsm+0x88>
			   row_count++;
    27b2:	4a10      	ldr	r2, [pc, #64]	; (27f4 <controller_fsm+0x2c0>)
    27b4:	8813      	ldrh	r3, [r2, #0]
    27b6:	3301      	adds	r3, #1
    27b8:	b29b      	uxth	r3, r3
    27ba:	8013      	strh	r3, [r2, #0]
			   if (row_count >= NUM_ROWS) {
    27bc:	2b03      	cmp	r3, #3
    27be:	d907      	bls.n	27d0 <controller_fsm+0x29c>
				  row_count = 0; 
    27c0:	2200      	movs	r2, #0
    27c2:	4b0c      	ldr	r3, [pc, #48]	; (27f4 <controller_fsm+0x2c0>)
    27c4:	801a      	strh	r2, [r3, #0]
				  trigger_image_acq = 0;			// clear trigger
    27c6:	4b11      	ldr	r3, [pc, #68]	; (280c <controller_fsm+0x2d8>)
    27c8:	701a      	strb	r2, [r3, #0]
				  *state = WAIT_TRIGGER;		    // image fully acquired, wait for trigger to acquire next image
    27ca:	2302      	movs	r3, #2
    27cc:	7003      	strb	r3, [r0, #0]
    27ce:	e6f5      	b.n	25bc <controller_fsm+0x88>
				  *state = INT0_A;					// get next image row
    27d0:	2304      	movs	r3, #4
    27d2:	7003      	strb	r3, [r0, #0]
    27d4:	e6f2      	b.n	25bc <controller_fsm+0x88>
			   *state = RESET;
    27d6:	2300      	movs	r3, #0
    27d8:	7003      	strb	r3, [r0, #0]
			   break;
    27da:	e6ef      	b.n	25bc <controller_fsm+0x88>
    27dc:	000057e0 	.word	0x000057e0
    27e0:	40002800 	.word	0x40002800
    27e4:	40002880 	.word	0x40002880
    27e8:	00000ce7 	.word	0x00000ce7
    27ec:	20000230 	.word	0x20000230
    27f0:	0000077d 	.word	0x0000077d
    27f4:	200000bc 	.word	0x200000bc
    27f8:	20000074 	.word	0x20000074
    27fc:	200000ba 	.word	0x200000ba
    2800:	20000004 	.word	0x20000004
    2804:	20000018 	.word	0x20000018
    2808:	20000076 	.word	0x20000076
    280c:	200000c5 	.word	0x200000c5
    2810:	0000230d 	.word	0x0000230d
    2814:	20000014 	.word	0x20000014
    2818:	00002401 	.word	0x00002401
    281c:	2000000c 	.word	0x2000000c

00002820 <tcc0_callback>:

//-------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------
void tcc0_callback(struct tcc_module *const module_inst)
{
    2820:	b510      	push	{r4, lr}
    2822:	0004      	movs	r4, r0

    if(manual_fsm_debugging == 1) {
    2824:	4b1c      	ldr	r3, [pc, #112]	; (2898 <tcc0_callback+0x78>)
    2826:	781b      	ldrb	r3, [r3, #0]
    2828:	2b01      	cmp	r3, #1
    282a:	d01d      	beq.n	2868 <tcc0_callback+0x48>
//         tcc_restart_counter(module_inst);
	   }


	}else {
	   req_fsm_wait = controller_fsm(&fsm_state);
    282c:	481b      	ldr	r0, [pc, #108]	; (289c <tcc0_callback+0x7c>)
    282e:	4b1c      	ldr	r3, [pc, #112]	; (28a0 <tcc0_callback+0x80>)
    2830:	4798      	blx	r3
    2832:	4b1c      	ldr	r3, [pc, #112]	; (28a4 <tcc0_callback+0x84>)
    2834:	6018      	str	r0, [r3, #0]
       tcc0_start_count = 0xFFFFFF - req_fsm_wait;
    2836:	4b1c      	ldr	r3, [pc, #112]	; (28a8 <tcc0_callback+0x88>)
    2838:	1a18      	subs	r0, r3, r0
    283a:	4b1c      	ldr	r3, [pc, #112]	; (28ac <tcc0_callback+0x8c>)
    283c:	6018      	str	r0, [r3, #0]
//       tcc_set_count_value(module_inst, tcc0_start_count);
//       tcc_restart_counter(module_inst);		
	}  

    tcc_set_count_value(module_inst, tcc0_start_count);
    283e:	4b1b      	ldr	r3, [pc, #108]	; (28ac <tcc0_callback+0x8c>)
    2840:	6819      	ldr	r1, [r3, #0]
    2842:	0020      	movs	r0, r4
    2844:	4b1a      	ldr	r3, [pc, #104]	; (28b0 <tcc0_callback+0x90>)
    2846:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    2848:	6822      	ldr	r2, [r4, #0]
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    284a:	2104      	movs	r1, #4
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    284c:	201f      	movs	r0, #31
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
			/* Command have been issued */
			return;
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
			/* Cancel STOP command and issue RETRIGGER */
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    284e:	24e0      	movs	r4, #224	; 0xe0
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2850:	6893      	ldr	r3, [r2, #8]
    2852:	4219      	tst	r1, r3
    2854:	d1fc      	bne.n	2850 <tcc0_callback+0x30>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
    2856:	7953      	ldrb	r3, [r2, #5]
    2858:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
    285a:	d01a      	beq.n	2892 <tcc0_callback+0x72>
		} else if (last_cmd == TCC_CTRLBSET_CMD_RETRIGGER) {
    285c:	2b20      	cmp	r3, #32
    285e:	d01a      	beq.n	2896 <tcc0_callback+0x76>
		} else if (last_cmd == TCC_CTRLBSET_CMD_STOP) {
    2860:	2b40      	cmp	r3, #64	; 0x40
    2862:	d1f5      	bne.n	2850 <tcc0_callback+0x30>
			tcc_module->CTRLBCLR.reg = TCC_CTRLBCLR_CMD_Msk;
    2864:	7114      	strb	r4, [r2, #4]
    2866:	e7f3      	b.n	2850 <tcc0_callback+0x30>
       if(manual_fsm_advance == 1) {						// added 07/12/17 FC/DLS
    2868:	4b12      	ldr	r3, [pc, #72]	; (28b4 <tcc0_callback+0x94>)
    286a:	781b      	ldrb	r3, [r3, #0]
    286c:	2b01      	cmp	r3, #1
    286e:	d003      	beq.n	2878 <tcc0_callback+0x58>
         tcc0_start_count = 0xFFFFFF - 100000;
    2870:	4a11      	ldr	r2, [pc, #68]	; (28b8 <tcc0_callback+0x98>)
    2872:	4b0e      	ldr	r3, [pc, #56]	; (28ac <tcc0_callback+0x8c>)
    2874:	601a      	str	r2, [r3, #0]
    2876:	e7e2      	b.n	283e <tcc0_callback+0x1e>
	      req_fsm_wait = controller_fsm(&fsm_state);
    2878:	4808      	ldr	r0, [pc, #32]	; (289c <tcc0_callback+0x7c>)
    287a:	4b09      	ldr	r3, [pc, #36]	; (28a0 <tcc0_callback+0x80>)
    287c:	4798      	blx	r3
    287e:	4b09      	ldr	r3, [pc, #36]	; (28a4 <tcc0_callback+0x84>)
    2880:	6018      	str	r0, [r3, #0]
          tcc0_start_count = 0xFFFFFF - req_fsm_wait;
    2882:	4b09      	ldr	r3, [pc, #36]	; (28a8 <tcc0_callback+0x88>)
    2884:	1a18      	subs	r0, r3, r0
    2886:	4b09      	ldr	r3, [pc, #36]	; (28ac <tcc0_callback+0x8c>)
    2888:	6018      	str	r0, [r3, #0]
		  manual_fsm_advance = 0;
    288a:	2200      	movs	r2, #0
    288c:	4b09      	ldr	r3, [pc, #36]	; (28b4 <tcc0_callback+0x94>)
    288e:	701a      	strb	r2, [r3, #0]
    2890:	e7d5      	b.n	283e <tcc0_callback+0x1e>
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_RETRIGGER;
    2892:	2320      	movs	r3, #32
    2894:	7153      	strb	r3, [r2, #5]


	#ifdef XPLAINED_BOARD
	 //port_pin_toggle_output_level(PIN_PB05);
	#endif
}
    2896:	bd10      	pop	{r4, pc}
    2898:	200000b9 	.word	0x200000b9
    289c:	20000077 	.word	0x20000077
    28a0:	00002535 	.word	0x00002535
    28a4:	20000288 	.word	0x20000288
    28a8:	00ffffff 	.word	0x00ffffff
    28ac:	200000c0 	.word	0x200000c0
    28b0:	00001ba9 	.word	0x00001ba9
    28b4:	200000b8 	.word	0x200000b8
    28b8:	00fe795f 	.word	0x00fe795f

000028bc <configure_tc4>:
{
    28bc:	b510      	push	{r4, lr}
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    28be:	4b14      	ldr	r3, [pc, #80]	; (2910 <configure_tc4+0x54>)
    28c0:	2100      	movs	r1, #0
    28c2:	2000      	movs	r0, #0
    28c4:	8099      	strh	r1, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    28c6:	2200      	movs	r2, #0
    28c8:	71d8      	strb	r0, [r3, #7]
	config->run_in_standby             = false;
    28ca:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
    28cc:	709a      	strb	r2, [r3, #2]
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    28ce:	721a      	strb	r2, [r3, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    28d0:	725a      	strb	r2, [r3, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    28d2:	729a      	strb	r2, [r3, #10]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    28d4:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    28d6:	731a      	strb	r2, [r3, #12]
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    28d8:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    28da:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    28dc:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    28de:	6219      	str	r1, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    28e0:	6259      	str	r1, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    28e2:	8519      	strh	r1, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    28e4:	8559      	strh	r1, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    28e6:	8599      	strh	r1, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
    28e8:	2234      	movs	r2, #52	; 0x34
    28ea:	5498      	strb	r0, [r3, r2]
	config_tc4.counter_size    = TC_COUNTER_SIZE_8BIT;
    28ec:	3a30      	subs	r2, #48	; 0x30
    28ee:	70da      	strb	r2, [r3, #3]
	config_tc4.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
    28f0:	3102      	adds	r1, #2
    28f2:	7199      	strb	r1, [r3, #6]
	config_tc4.clock_source    = GCLK_GENERATOR_1;
    28f4:	3901      	subs	r1, #1
    28f6:	7019      	strb	r1, [r3, #0]
	config_tc4.counter_8_bit.compare_capture_channel[0] = (20);
    28f8:	2414      	movs	r4, #20
    28fa:	202a      	movs	r0, #42	; 0x2a
    28fc:	541c      	strb	r4, [r3, r0]
	config_tc4.counter_8_bit.period = 200;
    28fe:	34b4      	adds	r4, #180	; 0xb4
    2900:	3801      	subs	r0, #1
    2902:	541c      	strb	r4, [r3, r0]
	config_tc4.pwm_channel[0].enabled = true;
    2904:	7419      	strb	r1, [r3, #16]
	 config_tc4.pwm_channel[0].pin_out = PIN_PA18E_TC4_WO0;
    2906:	3111      	adds	r1, #17
    2908:	6159      	str	r1, [r3, #20]
	 config_tc4.pwm_channel[0].pin_mux = MUX_PA18E_TC4_WO0;
    290a:	619a      	str	r2, [r3, #24]
}
    290c:	bd10      	pop	{r4, pc}
    290e:	46c0      	nop			; (mov r8, r8)
    2910:	200001f8 	.word	0x200001f8

00002914 <set_pwm>:
{
    2914:	b5f0      	push	{r4, r5, r6, r7, lr}
    2916:	46d6      	mov	lr, sl
    2918:	4647      	mov	r7, r8
    291a:	b580      	push	{r7, lr}
    291c:	b083      	sub	sp, #12
    291e:	9100      	str	r1, [sp, #0]
	if ( (frequency >= 15686) && (frequency < 20915) )
    2920:	4b32      	ldr	r3, [pc, #200]	; (29ec <set_pwm+0xd8>)
    2922:	18c1      	adds	r1, r0, r3
    2924:	4a32      	ldr	r2, [pc, #200]	; (29f0 <set_pwm+0xdc>)
		pwm_div = 4;
    2926:	2304      	movs	r3, #4
	if ( (frequency >= 15686) && (frequency < 20915) )
    2928:	4291      	cmp	r1, r2
    292a:	d90c      	bls.n	2946 <set_pwm+0x32>
	else if ( (frequency >= 20915) && (frequency < 31372) )
    292c:	4931      	ldr	r1, [pc, #196]	; (29f4 <set_pwm+0xe0>)
		pwm_div = 3;
    292e:	3b01      	subs	r3, #1
	else if ( (frequency >= 20915) && (frequency < 31372) )
    2930:	4a31      	ldr	r2, [pc, #196]	; (29f8 <set_pwm+0xe4>)
    2932:	1882      	adds	r2, r0, r2
    2934:	428a      	cmp	r2, r1
    2936:	d906      	bls.n	2946 <set_pwm+0x32>
	uint8_t pwm_div = 1;
    2938:	2200      	movs	r2, #0
    293a:	4930      	ldr	r1, [pc, #192]	; (29fc <set_pwm+0xe8>)
    293c:	4b30      	ldr	r3, [pc, #192]	; (2a00 <set_pwm+0xec>)
    293e:	18c3      	adds	r3, r0, r3
    2940:	4299      	cmp	r1, r3
    2942:	4152      	adcs	r2, r2
    2944:	1c53      	adds	r3, r2, #1
	pwm_per = (uint8_t)round(PWM_CLK_FREQ/(pwm_div * frequency));
    2946:	4698      	mov	r8, r3
    2948:	4358      	muls	r0, r3
    294a:	4b2e      	ldr	r3, [pc, #184]	; (2a04 <set_pwm+0xf0>)
    294c:	4798      	blx	r3
    294e:	0002      	movs	r2, r0
    2950:	000b      	movs	r3, r1
    2952:	4e2d      	ldr	r6, [pc, #180]	; (2a08 <set_pwm+0xf4>)
    2954:	2000      	movs	r0, #0
    2956:	492d      	ldr	r1, [pc, #180]	; (2a0c <set_pwm+0xf8>)
    2958:	47b0      	blx	r6
    295a:	4b2d      	ldr	r3, [pc, #180]	; (2a10 <set_pwm+0xfc>)
    295c:	469a      	mov	sl, r3
    295e:	4798      	blx	r3
    2960:	4d2c      	ldr	r5, [pc, #176]	; (2a14 <set_pwm+0x100>)
    2962:	47a8      	blx	r5
    2964:	b2c7      	uxtb	r7, r0
	pwm_ccc = (uint8_t)round((dutycycle/100.0) * pwm_per);
    2966:	4c2c      	ldr	r4, [pc, #176]	; (2a18 <set_pwm+0x104>)
    2968:	9800      	ldr	r0, [sp, #0]
    296a:	47a0      	blx	r4
    296c:	2200      	movs	r2, #0
    296e:	4b2b      	ldr	r3, [pc, #172]	; (2a1c <set_pwm+0x108>)
    2970:	47b0      	blx	r6
    2972:	9000      	str	r0, [sp, #0]
    2974:	9101      	str	r1, [sp, #4]
    2976:	0038      	movs	r0, r7
    2978:	47a0      	blx	r4
    297a:	0002      	movs	r2, r0
    297c:	000b      	movs	r3, r1
    297e:	9800      	ldr	r0, [sp, #0]
    2980:	9901      	ldr	r1, [sp, #4]
    2982:	4c27      	ldr	r4, [pc, #156]	; (2a20 <set_pwm+0x10c>)
    2984:	47a0      	blx	r4
    2986:	47d0      	blx	sl
    2988:	47a8      	blx	r5
    298a:	b2c0      	uxtb	r0, r0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    298c:	4b25      	ldr	r3, [pc, #148]	; (2a24 <set_pwm+0x110>)
    298e:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    2990:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    2992:	2b00      	cmp	r3, #0
    2994:	d1fc      	bne.n	2990 <set_pwm+0x7c>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    2996:	3333      	adds	r3, #51	; 0x33
    2998:	7213      	strb	r3, [r2, #8]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    299a:	7293      	strb	r3, [r2, #10]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    299c:	6813      	ldr	r3, [r2, #0]
    299e:	2102      	movs	r1, #2
    29a0:	438b      	bics	r3, r1
    29a2:	6013      	str	r3, [r2, #0]
	config_tc4.counter_8_bit.compare_capture_channel[0] = (pwm_ccc);
    29a4:	4a20      	ldr	r2, [pc, #128]	; (2a28 <set_pwm+0x114>)
    29a6:	232a      	movs	r3, #42	; 0x2a
    29a8:	54d0      	strb	r0, [r2, r3]
	config_tc4.counter_8_bit.period = pwm_per;
    29aa:	3b01      	subs	r3, #1
    29ac:	54d7      	strb	r7, [r2, r3]
	tc_init(&tc4_instance, TC4, &config_tc4);
    29ae:	4c1d      	ldr	r4, [pc, #116]	; (2a24 <set_pwm+0x110>)
    29b0:	491e      	ldr	r1, [pc, #120]	; (2a2c <set_pwm+0x118>)
    29b2:	0020      	movs	r0, r4
    29b4:	4b1e      	ldr	r3, [pc, #120]	; (2a30 <set_pwm+0x11c>)
    29b6:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    29b8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    29ba:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    29bc:	2b00      	cmp	r3, #0
    29be:	d1fc      	bne.n	29ba <set_pwm+0xa6>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    29c0:	6813      	ldr	r3, [r2, #0]
    29c2:	2102      	movs	r1, #2
    29c4:	430b      	orrs	r3, r1
    29c6:	6013      	str	r3, [r2, #0]
	system_gclk_gen_disable(GCLK_GENERATOR_1);
    29c8:	2001      	movs	r0, #1
    29ca:	4b1a      	ldr	r3, [pc, #104]	; (2a34 <set_pwm+0x120>)
    29cc:	4798      	blx	r3
	gclock_gen_conf.division_factor = pwm_div;
    29ce:	491a      	ldr	r1, [pc, #104]	; (2a38 <set_pwm+0x124>)
    29d0:	4643      	mov	r3, r8
    29d2:	604b      	str	r3, [r1, #4]
	system_gclk_gen_set_config(GCLK_GENERATOR_1, &gclock_gen_conf);
    29d4:	2001      	movs	r0, #1
    29d6:	4b19      	ldr	r3, [pc, #100]	; (2a3c <set_pwm+0x128>)
    29d8:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_1);
    29da:	2001      	movs	r0, #1
    29dc:	4b18      	ldr	r3, [pc, #96]	; (2a40 <set_pwm+0x12c>)
    29de:	4798      	blx	r3
}
    29e0:	b003      	add	sp, #12
    29e2:	bc0c      	pop	{r2, r3}
    29e4:	4690      	mov	r8, r2
    29e6:	469a      	mov	sl, r3
    29e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29ea:	46c0      	nop			; (mov r8, r8)
    29ec:	ffffc2ba 	.word	0xffffc2ba
    29f0:	0000146c 	.word	0x0000146c
    29f4:	000028d8 	.word	0x000028d8
    29f8:	ffffae4d 	.word	0xffffae4d
    29fc:	00007a8c 	.word	0x00007a8c
    2a00:	ffff8574 	.word	0xffff8574
    2a04:	00005045 	.word	0x00005045
    2a08:	00003dc5 	.word	0x00003dc5
    2a0c:	416e8480 	.word	0x416e8480
    2a10:	00002f1d 	.word	0x00002f1d
    2a14:	00003111 	.word	0x00003111
    2a18:	00004fc1 	.word	0x00004fc1
    2a1c:	40590000 	.word	0x40590000
    2a20:	0000442d 	.word	0x0000442d
    2a24:	2000026c 	.word	0x2000026c
    2a28:	200001f8 	.word	0x200001f8
    2a2c:	43000800 	.word	0x43000800
    2a30:	00001d9d 	.word	0x00001d9d
    2a34:	000013bd 	.word	0x000013bd
    2a38:	20000108 	.word	0x20000108
    2a3c:	000012d1 	.word	0x000012d1
    2a40:	0000137d 	.word	0x0000137d

00002a44 <configure_tcc0>:
{
    2a44:	b510      	push	{r4, lr}
    tcc_get_config_defaults(&config_tcc0, TCC0);
    2a46:	4c07      	ldr	r4, [pc, #28]	; (2a64 <configure_tcc0+0x20>)
    2a48:	4907      	ldr	r1, [pc, #28]	; (2a68 <configure_tcc0+0x24>)
    2a4a:	0020      	movs	r0, r4
    2a4c:	4b07      	ldr	r3, [pc, #28]	; (2a6c <configure_tcc0+0x28>)
    2a4e:	4798      	blx	r3
    config_tcc0.counter.clock_source    = GCLK_GENERATOR_0;
    2a50:	2300      	movs	r3, #0
    2a52:	72e3      	strb	r3, [r4, #11]
    config_tcc0.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV4;
    2a54:	3302      	adds	r3, #2
    2a56:	7323      	strb	r3, [r4, #12]
    config_tcc0.counter.period  = 0xFFFFFF;			//can go to 24 bits on ATSAML21J18A, check ATSAML21J17B-UUT 
    2a58:	4b05      	ldr	r3, [pc, #20]	; (2a70 <configure_tcc0+0x2c>)
    2a5a:	6063      	str	r3, [r4, #4]
    config_tcc0.counter.oneshot = true;
    2a5c:	2301      	movs	r3, #1
    2a5e:	7223      	strb	r3, [r4, #8]
}
    2a60:	bd10      	pop	{r4, pc}
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	20000120 	.word	0x20000120
    2a68:	42001400 	.word	0x42001400
    2a6c:	00001675 	.word	0x00001675
    2a70:	00ffffff 	.word	0x00ffffff

00002a74 <configure_timers>:
{
    2a74:	b510      	push	{r4, lr}
    configure_tc4();
    2a76:	4b02      	ldr	r3, [pc, #8]	; (2a80 <configure_timers+0xc>)
    2a78:	4798      	blx	r3
    configure_tcc0();
    2a7a:	4b02      	ldr	r3, [pc, #8]	; (2a84 <configure_timers+0x10>)
    2a7c:	4798      	blx	r3
}
    2a7e:	bd10      	pop	{r4, pc}
    2a80:	000028bd 	.word	0x000028bd
    2a84:	00002a45 	.word	0x00002a45

00002a88 <configure_tcc0_callbacks>:
{
    2a88:	b510      	push	{r4, lr}
    tcc_register_callback(&tcc0_instance, tcc0_callback, TCC_CALLBACK_OVERFLOW);
    2a8a:	4c05      	ldr	r4, [pc, #20]	; (2aa0 <configure_tcc0_callbacks+0x18>)
    2a8c:	2200      	movs	r2, #0
    2a8e:	4905      	ldr	r1, [pc, #20]	; (2aa4 <configure_tcc0_callbacks+0x1c>)
    2a90:	0020      	movs	r0, r4
    2a92:	4b05      	ldr	r3, [pc, #20]	; (2aa8 <configure_tcc0_callbacks+0x20>)
    2a94:	4798      	blx	r3
    tcc_enable_callback(&tcc0_instance, TCC_CALLBACK_OVERFLOW);
    2a96:	2100      	movs	r1, #0
    2a98:	0020      	movs	r0, r4
    2a9a:	4b04      	ldr	r3, [pc, #16]	; (2aac <configure_tcc0_callbacks+0x24>)
    2a9c:	4798      	blx	r3
}
    2a9e:	bd10      	pop	{r4, pc}
    2aa0:	2000028c 	.word	0x2000028c
    2aa4:	00002821 	.word	0x00002821
    2aa8:	00001bd9 	.word	0x00001bd9
    2aac:	00001bf1 	.word	0x00001bf1

00002ab0 <initialize_timers>:
{
    2ab0:	b510      	push	{r4, lr}
	tc_init(&tc4_instance, TC4, &config_tc4);
    2ab2:	4c13      	ldr	r4, [pc, #76]	; (2b00 <initialize_timers+0x50>)
    2ab4:	4a13      	ldr	r2, [pc, #76]	; (2b04 <initialize_timers+0x54>)
    2ab6:	4914      	ldr	r1, [pc, #80]	; (2b08 <initialize_timers+0x58>)
    2ab8:	0020      	movs	r0, r4
    2aba:	4b14      	ldr	r3, [pc, #80]	; (2b0c <initialize_timers+0x5c>)
    2abc:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2abe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    2ac0:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d1fc      	bne.n	2ac0 <initialize_timers+0x10>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2ac6:	6813      	ldr	r3, [r2, #0]
    2ac8:	2102      	movs	r1, #2
    2aca:	430b      	orrs	r3, r1
    2acc:	6013      	str	r3, [r2, #0]
    tcc0_start_count = 0xFFFFFF - default_fsm_wait;				//start TCC0 with some delay to trigger first call to callback
    2ace:	4b10      	ldr	r3, [pc, #64]	; (2b10 <initialize_timers+0x60>)
    2ad0:	681a      	ldr	r2, [r3, #0]
    2ad2:	4b10      	ldr	r3, [pc, #64]	; (2b14 <initialize_timers+0x64>)
    2ad4:	1a9b      	subs	r3, r3, r2
    2ad6:	4a10      	ldr	r2, [pc, #64]	; (2b18 <initialize_timers+0x68>)
    2ad8:	6013      	str	r3, [r2, #0]
	config_tcc0.counter.count = tcc0_start_count;
    2ada:	4a10      	ldr	r2, [pc, #64]	; (2b1c <initialize_timers+0x6c>)
    2adc:	6013      	str	r3, [r2, #0]
    tcc_init(&tcc0_instance, TCC0, &config_tcc0);
    2ade:	4c10      	ldr	r4, [pc, #64]	; (2b20 <initialize_timers+0x70>)
    2ae0:	4910      	ldr	r1, [pc, #64]	; (2b24 <initialize_timers+0x74>)
    2ae2:	0020      	movs	r0, r4
    2ae4:	4b10      	ldr	r3, [pc, #64]	; (2b28 <initialize_timers+0x78>)
    2ae6:	4798      	blx	r3
	Tcc *const tcc_module = module_inst->hw;
    2ae8:	6822      	ldr	r2, [r4, #0]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    2aea:	2102      	movs	r1, #2
    2aec:	6893      	ldr	r3, [r2, #8]
    2aee:	4219      	tst	r1, r3
    2af0:	d1fc      	bne.n	2aec <initialize_timers+0x3c>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    2af2:	6813      	ldr	r3, [r2, #0]
    2af4:	2102      	movs	r1, #2
    2af6:	430b      	orrs	r3, r1
    2af8:	6013      	str	r3, [r2, #0]
    configure_tcc0_callbacks();	
    2afa:	4b0c      	ldr	r3, [pc, #48]	; (2b2c <initialize_timers+0x7c>)
    2afc:	4798      	blx	r3
}
    2afe:	bd10      	pop	{r4, pc}
    2b00:	2000026c 	.word	0x2000026c
    2b04:	200001f8 	.word	0x200001f8
    2b08:	43000800 	.word	0x43000800
    2b0c:	00001d9d 	.word	0x00001d9d
    2b10:	20000004 	.word	0x20000004
    2b14:	00ffffff 	.word	0x00ffffff
    2b18:	200000c0 	.word	0x200000c0
    2b1c:	20000120 	.word	0x20000120
    2b20:	2000028c 	.word	0x2000028c
    2b24:	42001400 	.word	0x42001400
    2b28:	000017c5 	.word	0x000017c5
    2b2c:	00002a89 	.word	0x00002a89

00002b30 <execute_command>:

//--------------------------------------------------------------------------
// decodes command received in the command_buffer array and executes it
//--------------------------------------------------------------------------
uint16_t execute_command(uint8_t *data_buffer, uint8_t *data_ptr)
{
    2b30:	b510      	push	{r4, lr}
    2b32:	0004      	movs	r4, r0
    uint16_t dac_mV;
    uint16_t adc_result;
	uint16_t data_length=0;
   
    command = data_buffer[0];	
	switch (command)
    2b34:	7803      	ldrb	r3, [r0, #0]
    2b36:	2b0f      	cmp	r3, #15
    2b38:	d900      	bls.n	2b3c <execute_command+0xc>
    2b3a:	e095      	b.n	2c68 <execute_command+0x138>
    2b3c:	009b      	lsls	r3, r3, #2
    2b3e:	4a4b      	ldr	r2, [pc, #300]	; (2c6c <execute_command+0x13c>)
    2b40:	58d3      	ldr	r3, [r2, r3]
    2b42:	469f      	mov	pc, r3
	{
		case SET_PWM:
		   pwm_frequency = data_buffer[2]*65536 + data_buffer[3]*256 + data_buffer[4];
    2b44:	7880      	ldrb	r0, [r0, #2]
    2b46:	0200      	lsls	r0, r0, #8
    2b48:	78e3      	ldrb	r3, [r4, #3]
    2b4a:	18c0      	adds	r0, r0, r3
    2b4c:	0200      	lsls	r0, r0, #8
    2b4e:	7923      	ldrb	r3, [r4, #4]
    2b50:	1818      	adds	r0, r3, r0
    2b52:	b280      	uxth	r0, r0
    2b54:	4b46      	ldr	r3, [pc, #280]	; (2c70 <execute_command+0x140>)
    2b56:	8018      	strh	r0, [r3, #0]
//		   pwm_frequency = (data_buffer[2]<<16) + (data_buffer[3]<<8) + data_buffer[4];
		   pwm_dutycycle = data_buffer[1];
    2b58:	7861      	ldrb	r1, [r4, #1]
    2b5a:	4b46      	ldr	r3, [pc, #280]	; (2c74 <execute_command+0x144>)
    2b5c:	8019      	strh	r1, [r3, #0]
		   set_pwm(pwm_frequency, pwm_dutycycle);
    2b5e:	4b46      	ldr	r3, [pc, #280]	; (2c78 <execute_command+0x148>)
    2b60:	4798      	blx	r3
	uint16_t data_length=0;
    2b62:	2000      	movs	r0, #0
		default:
		  break;
						
     } // switch (state)			
     return data_length;
}
    2b64:	bd10      	pop	{r4, pc}
		   dac_mV = data_buffer[1]*256 + data_buffer[2];
    2b66:	7843      	ldrb	r3, [r0, #1]
    2b68:	021b      	lsls	r3, r3, #8
    2b6a:	7880      	ldrb	r0, [r0, #2]
    2b6c:	18c0      	adds	r0, r0, r3
{
	float 		k, temp;
	uint16_t 	output_value;
	
	k = 4095/(uC_VDD*1000);
	temp = voltage_mV * k;
    2b6e:	b280      	uxth	r0, r0
    2b70:	4b42      	ldr	r3, [pc, #264]	; (2c7c <execute_command+0x14c>)
    2b72:	4798      	blx	r3
    2b74:	4942      	ldr	r1, [pc, #264]	; (2c80 <execute_command+0x150>)
    2b76:	4b43      	ldr	r3, [pc, #268]	; (2c84 <execute_command+0x154>)
    2b78:	4798      	blx	r3
	output_value = ((uint16_t)temp) & 0xFFF;
    2b7a:	4b43      	ldr	r3, [pc, #268]	; (2c88 <execute_command+0x158>)
    2b7c:	4798      	blx	r3
    2b7e:	0502      	lsls	r2, r0, #20
		   dac_chan_write(&dac_instance, CDS_VBP2, mV_to_int(dac_mV) );
    2b80:	0d12      	lsrs	r2, r2, #20
    2b82:	2101      	movs	r1, #1
    2b84:	4841      	ldr	r0, [pc, #260]	; (2c8c <execute_command+0x15c>)
    2b86:	4b42      	ldr	r3, [pc, #264]	; (2c90 <execute_command+0x160>)
    2b88:	4798      	blx	r3
	uint16_t data_length=0;
    2b8a:	2000      	movs	r0, #0
		   break;
    2b8c:	e7ea      	b.n	2b64 <execute_command+0x34>
		   dac_mV = data_buffer[1]*256 + data_buffer[2];
    2b8e:	7843      	ldrb	r3, [r0, #1]
    2b90:	021b      	lsls	r3, r3, #8
    2b92:	7880      	ldrb	r0, [r0, #2]
    2b94:	18c0      	adds	r0, r0, r3
	temp = voltage_mV * k;
    2b96:	b280      	uxth	r0, r0
    2b98:	4b38      	ldr	r3, [pc, #224]	; (2c7c <execute_command+0x14c>)
    2b9a:	4798      	blx	r3
    2b9c:	4938      	ldr	r1, [pc, #224]	; (2c80 <execute_command+0x150>)
    2b9e:	4b39      	ldr	r3, [pc, #228]	; (2c84 <execute_command+0x154>)
    2ba0:	4798      	blx	r3
	output_value = ((uint16_t)temp) & 0xFFF;
    2ba2:	4b39      	ldr	r3, [pc, #228]	; (2c88 <execute_command+0x158>)
    2ba4:	4798      	blx	r3
    2ba6:	0502      	lsls	r2, r0, #20
		   dac_chan_write(&dac_instance, AD8235_VREF, mV_to_int(dac_mV) );
    2ba8:	0d12      	lsrs	r2, r2, #20
    2baa:	2100      	movs	r1, #0
    2bac:	4837      	ldr	r0, [pc, #220]	; (2c8c <execute_command+0x15c>)
    2bae:	4b38      	ldr	r3, [pc, #224]	; (2c90 <execute_command+0x160>)
    2bb0:	4798      	blx	r3
	uint16_t data_length=0;
    2bb2:	2000      	movs	r0, #0
		   break;
    2bb4:	e7d6      	b.n	2b64 <execute_command+0x34>
		   set_adc_channel(PIXEL_OUT);
    2bb6:	2001      	movs	r0, #1
    2bb8:	4b36      	ldr	r3, [pc, #216]	; (2c94 <execute_command+0x164>)
    2bba:	4798      	blx	r3
		   adc_result = read_adc();
    2bbc:	4b36      	ldr	r3, [pc, #216]	; (2c98 <execute_command+0x168>)
    2bbe:	4798      	blx	r3
		   data_buffer[0] = command;
    2bc0:	2304      	movs	r3, #4
    2bc2:	7023      	strb	r3, [r4, #0]
		   data_buffer[1] = (adc_result >>    8); // high byte
    2bc4:	0a03      	lsrs	r3, r0, #8
    2bc6:	7063      	strb	r3, [r4, #1]
		   data_buffer[2] = (adc_result &  0xFF); // low byte
    2bc8:	70a0      	strb	r0, [r4, #2]
		   data_length = 3;
    2bca:	2003      	movs	r0, #3
		   break;					
    2bcc:	e7ca      	b.n	2b64 <execute_command+0x34>
		   set_adc_channel(EH_OUT);
    2bce:	2009      	movs	r0, #9
    2bd0:	4b30      	ldr	r3, [pc, #192]	; (2c94 <execute_command+0x164>)
    2bd2:	4798      	blx	r3
		   adc_result = read_adc();
    2bd4:	4b30      	ldr	r3, [pc, #192]	; (2c98 <execute_command+0x168>)
    2bd6:	4798      	blx	r3
		   data_buffer[0] = command;
    2bd8:	2305      	movs	r3, #5
    2bda:	7023      	strb	r3, [r4, #0]
		   data_buffer[1] = (adc_result >>    8); // high byte
    2bdc:	0a03      	lsrs	r3, r0, #8
    2bde:	7063      	strb	r3, [r4, #1]
		   data_buffer[2] = (adc_result &  0xFF); // low byte
    2be0:	70a0      	strb	r0, [r4, #2]
		   data_length = 3;
    2be2:	2003      	movs	r0, #3
		   break;
    2be4:	e7be      	b.n	2b64 <execute_command+0x34>
		   set_adc_channel(AD8235_OUT);
    2be6:	2006      	movs	r0, #6
    2be8:	4b2a      	ldr	r3, [pc, #168]	; (2c94 <execute_command+0x164>)
    2bea:	4798      	blx	r3
		   adc_result = read_adc();
    2bec:	4b2a      	ldr	r3, [pc, #168]	; (2c98 <execute_command+0x168>)
    2bee:	4798      	blx	r3
		   data_buffer[0] = command;
    2bf0:	2306      	movs	r3, #6
    2bf2:	7023      	strb	r3, [r4, #0]
		   data_buffer[1] = (adc_result >>    8); // high byte
    2bf4:	0a03      	lsrs	r3, r0, #8
    2bf6:	7063      	strb	r3, [r4, #1]
		   data_buffer[2] = (adc_result &  0xFF); // low byte   
    2bf8:	70a0      	strb	r0, [r4, #2]
		   data_length = 3;
    2bfa:	2003      	movs	r0, #3
		   break;
    2bfc:	e7b2      	b.n	2b64 <execute_command+0x34>
		   trigger_image_acq = 1;
    2bfe:	2201      	movs	r2, #1
    2c00:	4b26      	ldr	r3, [pc, #152]	; (2c9c <execute_command+0x16c>)
    2c02:	701a      	strb	r2, [r3, #0]
	uint16_t data_length=0;
    2c04:	2000      	movs	r0, #0
		   break;		
    2c06:	e7ad      	b.n	2b64 <execute_command+0x34>
		   data_length = image_array_size;
    2c08:	4b25      	ldr	r3, [pc, #148]	; (2ca0 <execute_command+0x170>)
    2c0a:	8818      	ldrh	r0, [r3, #0]
	       break;
    2c0c:	e7aa      	b.n	2b64 <execute_command+0x34>
		   integration_time = (data_buffer[1]<<16) + (data_buffer[2]<<8) + data_buffer[3];
    2c0e:	7843      	ldrb	r3, [r0, #1]
    2c10:	041b      	lsls	r3, r3, #16
    2c12:	7882      	ldrb	r2, [r0, #2]
    2c14:	0212      	lsls	r2, r2, #8
    2c16:	189b      	adds	r3, r3, r2
    2c18:	78c2      	ldrb	r2, [r0, #3]
    2c1a:	189b      	adds	r3, r3, r2
    2c1c:	4a21      	ldr	r2, [pc, #132]	; (2ca4 <execute_command+0x174>)
    2c1e:	6013      	str	r3, [r2, #0]
	uint16_t data_length=0;
    2c20:	2000      	movs	r0, #0
		   break;   
    2c22:	e79f      	b.n	2b64 <execute_command+0x34>
		    fsm_state = RESET;
    2c24:	4820      	ldr	r0, [pc, #128]	; (2ca8 <execute_command+0x178>)
    2c26:	2300      	movs	r3, #0
    2c28:	7003      	strb	r3, [r0, #0]
			controller_fsm(&fsm_state);
    2c2a:	4b20      	ldr	r3, [pc, #128]	; (2cac <execute_command+0x17c>)
    2c2c:	4798      	blx	r3
	uint16_t data_length=0;
    2c2e:	2000      	movs	r0, #0
			break;
    2c30:	e798      	b.n	2b64 <execute_command+0x34>
			free_running_image_acq = 1;
    2c32:	2201      	movs	r2, #1
    2c34:	4b1e      	ldr	r3, [pc, #120]	; (2cb0 <execute_command+0x180>)
    2c36:	701a      	strb	r2, [r3, #0]
	uint16_t data_length=0;
    2c38:	2000      	movs	r0, #0
			break;
    2c3a:	e793      	b.n	2b64 <execute_command+0x34>
			free_running_image_acq = 0;
    2c3c:	2200      	movs	r2, #0
    2c3e:	4b1c      	ldr	r3, [pc, #112]	; (2cb0 <execute_command+0x180>)
    2c40:	701a      	strb	r2, [r3, #0]
	uint16_t data_length=0;
    2c42:	2000      	movs	r0, #0
			break;
    2c44:	e78e      	b.n	2b64 <execute_command+0x34>
			manual_fsm_debugging = 1;
    2c46:	2201      	movs	r2, #1
    2c48:	4b1a      	ldr	r3, [pc, #104]	; (2cb4 <execute_command+0x184>)
    2c4a:	701a      	strb	r2, [r3, #0]
	uint16_t data_length=0;
    2c4c:	2000      	movs	r0, #0
			break;
    2c4e:	e789      	b.n	2b64 <execute_command+0x34>
			manual_fsm_debugging = 0;
    2c50:	2200      	movs	r2, #0
    2c52:	4b18      	ldr	r3, [pc, #96]	; (2cb4 <execute_command+0x184>)
    2c54:	701a      	strb	r2, [r3, #0]
	uint16_t data_length=0;
    2c56:	2000      	movs	r0, #0
			break;
    2c58:	e784      	b.n	2b64 <execute_command+0x34>
			manual_fsm_advance = 1;
    2c5a:	2301      	movs	r3, #1
    2c5c:	4a16      	ldr	r2, [pc, #88]	; (2cb8 <execute_command+0x188>)
    2c5e:	7013      	strb	r3, [r2, #0]
			trigger_image_acq  = 1;
    2c60:	4a0e      	ldr	r2, [pc, #56]	; (2c9c <execute_command+0x16c>)
    2c62:	7013      	strb	r3, [r2, #0]
	uint16_t data_length=0;
    2c64:	2000      	movs	r0, #0
			break;
    2c66:	e77d      	b.n	2b64 <execute_command+0x34>
	uint16_t data_length=0;
    2c68:	2000      	movs	r0, #0
    2c6a:	e77b      	b.n	2b64 <execute_command+0x34>
    2c6c:	00005830 	.word	0x00005830
    2c70:	20000114 	.word	0x20000114
    2c74:	200001c4 	.word	0x200001c4
    2c78:	00002915 	.word	0x00002915
    2c7c:	00003705 	.word	0x00003705
    2c80:	3f920bd7 	.word	0x3f920bd7
    2c84:	0000314d 	.word	0x0000314d
    2c88:	000030e1 	.word	0x000030e1
    2c8c:	20000230 	.word	0x20000230
    2c90:	0000077d 	.word	0x0000077d
    2c94:	0000230d 	.word	0x0000230d
    2c98:	00002401 	.word	0x00002401
    2c9c:	200000c5 	.word	0x200000c5
    2ca0:	20000010 	.word	0x20000010
    2ca4:	20000014 	.word	0x20000014
    2ca8:	20000077 	.word	0x20000077
    2cac:	00002535 	.word	0x00002535
    2cb0:	20000076 	.word	0x20000076
    2cb4:	200000b9 	.word	0x200000b9
    2cb8:	200000b8 	.word	0x200000b8

00002cbc <i2c_read_complete_callback>:
//-----------------------------------------------------------------------------------
// function called after a READ operation has been completed
// i.e. after the Master has finished WRITING to the bus
//-----------------------------------------------------------------------------------
void i2c_read_complete_callback(struct i2c_slave_module *const module)
{
    2cbc:	b510      	push	{r4, lr}
    i2c_data_length = execute_command(i2c_data_buffer, i2c_data_ptr);
    2cbe:	4b04      	ldr	r3, [pc, #16]	; (2cd0 <i2c_read_complete_callback+0x14>)
    2cc0:	6819      	ldr	r1, [r3, #0]
    2cc2:	4804      	ldr	r0, [pc, #16]	; (2cd4 <i2c_read_complete_callback+0x18>)
    2cc4:	4b04      	ldr	r3, [pc, #16]	; (2cd8 <i2c_read_complete_callback+0x1c>)
    2cc6:	4798      	blx	r3
    2cc8:	4b04      	ldr	r3, [pc, #16]	; (2cdc <i2c_read_complete_callback+0x20>)
    2cca:	8018      	strh	r0, [r3, #0]
}
    2ccc:	bd10      	pop	{r4, pc}
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	200001f4 	.word	0x200001f4
    2cd4:	20000078 	.word	0x20000078
    2cd8:	00002b31 	.word	0x00002b31
    2cdc:	20000008 	.word	0x20000008

00002ce0 <configure_i2c_slave>:
{
    2ce0:	b530      	push	{r4, r5, lr}
    2ce2:	b08b      	sub	sp, #44	; 0x2c
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
    2ce4:	2300      	movs	r3, #0
    2ce6:	466a      	mov	r2, sp
    2ce8:	7013      	strb	r3, [r2, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
    2cea:	2280      	movs	r2, #128	; 0x80
    2cec:	0392      	lsls	r2, r2, #14
    2cee:	9201      	str	r2, [sp, #4]
	config->buffer_timeout = 65535;
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
	config->address = 0;
	config->address_mask = 0;
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
    2cf0:	466a      	mov	r2, sp
    2cf2:	7413      	strb	r3, [r2, #16]
#endif
	config->enable_general_call_address = false;
    2cf4:	7453      	strb	r3, [r2, #17]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
    2cf6:	9305      	str	r3, [sp, #20]
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
    2cf8:	7613      	strb	r3, [r2, #24]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2cfa:	7653      	strb	r3, [r2, #25]
	config->run_in_standby = false;
    2cfc:	7693      	strb	r3, [r2, #26]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    2cfe:	9307      	str	r3, [sp, #28]
	config->pinmux_pad1 = PINMUX_DEFAULT;
    2d00:	9308      	str	r3, [sp, #32]
	config->scl_low_timeout  = false;
    2d02:	2224      	movs	r2, #36	; 0x24
    2d04:	4669      	mov	r1, sp
    2d06:	548b      	strb	r3, [r1, r2]
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2d08:	3201      	adds	r2, #1
    2d0a:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2d0c:	3201      	adds	r2, #1
    2d0e:	548b      	strb	r3, [r1, r2]
	config_i2c_slave.address        = SLAVE_SINGLE_ADDRESS;
    2d10:	3328      	adds	r3, #40	; 0x28
    2d12:	466a      	mov	r2, sp
    2d14:	818b      	strh	r3, [r1, #12]
	config_i2c_slave.address_mask	= SLAVE_MULTI_ADDRESS;
    2d16:	334f      	adds	r3, #79	; 0x4f
    2d18:	81cb      	strh	r3, [r1, #14]
	config_i2c_slave.address_mode   = I2C_SLAVE_ADDRESS_MODE_TWO_ADDRESSES;
    2d1a:	2380      	movs	r3, #128	; 0x80
    2d1c:	01db      	lsls	r3, r3, #7
    2d1e:	814b      	strh	r3, [r1, #10]
	config_i2c_slave.buffer_timeout = 1000;
    2d20:	23fa      	movs	r3, #250	; 0xfa
    2d22:	009b      	lsls	r3, r3, #2
    2d24:	810b      	strh	r3, [r1, #8]
	 i2c_slave_init(&i2c_slave_instance, SERCOM2, &config_i2c_slave);
    2d26:	4d0d      	ldr	r5, [pc, #52]	; (2d5c <configure_i2c_slave+0x7c>)
    2d28:	490d      	ldr	r1, [pc, #52]	; (2d60 <configure_i2c_slave+0x80>)
    2d2a:	0028      	movs	r0, r5
    2d2c:	4b0d      	ldr	r3, [pc, #52]	; (2d64 <configure_i2c_slave+0x84>)
    2d2e:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    2d30:	682c      	ldr	r4, [r5, #0]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2d32:	0020      	movs	r0, r4
    2d34:	4b0c      	ldr	r3, [pc, #48]	; (2d68 <configure_i2c_slave+0x88>)
    2d36:	4798      	blx	r3
    2d38:	231f      	movs	r3, #31
    2d3a:	4018      	ands	r0, r3
    2d3c:	3b1e      	subs	r3, #30
    2d3e:	4083      	lsls	r3, r0
    2d40:	4a0a      	ldr	r2, [pc, #40]	; (2d6c <configure_i2c_slave+0x8c>)
    2d42:	6013      	str	r3, [r2, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
    2d44:	6829      	ldr	r1, [r5, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CS_SYNCBUSY_MASK);
    2d46:	2203      	movs	r2, #3
    2d48:	69cb      	ldr	r3, [r1, #28]
	while (i2c_slave_is_syncing(module)) {
    2d4a:	421a      	tst	r2, r3
    2d4c:	d1fc      	bne.n	2d48 <configure_i2c_slave+0x68>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    2d4e:	6823      	ldr	r3, [r4, #0]
    2d50:	2202      	movs	r2, #2
    2d52:	4313      	orrs	r3, r2
    2d54:	6023      	str	r3, [r4, #0]
}
    2d56:	b00b      	add	sp, #44	; 0x2c
    2d58:	bd30      	pop	{r4, r5, pc}
    2d5a:	46c0      	nop			; (mov r8, r8)
    2d5c:	200002ec 	.word	0x200002ec
    2d60:	42000800 	.word	0x42000800
    2d64:	0000092d 	.word	0x0000092d
    2d68:	00000fdd 	.word	0x00000fdd
    2d6c:	e000e100 	.word	0xe000e100

00002d70 <configure_i2c_pins>:
{
    2d70:	b570      	push	{r4, r5, r6, lr}
    2d72:	b082      	sub	sp, #8
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2d74:	ac01      	add	r4, sp, #4
    2d76:	2300      	movs	r3, #0
    2d78:	7063      	strb	r3, [r4, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2d7a:	2201      	movs	r2, #1
    2d7c:	70a2      	strb	r2, [r4, #2]
	config->powersave    = false;
    2d7e:	70e3      	strb	r3, [r4, #3]
	 config_pinmux.mux_position = MUX_PA08D_SERCOM2_PAD0;
    2d80:	2603      	movs	r6, #3
    2d82:	7026      	strb	r6, [r4, #0]
	 system_pinmux_pin_set_config(PIN_PA08D_SERCOM2_PAD0, &config_pinmux);
    2d84:	0021      	movs	r1, r4
    2d86:	2008      	movs	r0, #8
    2d88:	4d03      	ldr	r5, [pc, #12]	; (2d98 <configure_i2c_pins+0x28>)
    2d8a:	47a8      	blx	r5
	 config_pinmux.mux_position = MUX_PA09D_SERCOM2_PAD1;
    2d8c:	7026      	strb	r6, [r4, #0]
	 system_pinmux_pin_set_config(PIN_PA09D_SERCOM2_PAD1, &config_pinmux);
    2d8e:	0021      	movs	r1, r4
    2d90:	2009      	movs	r0, #9
    2d92:	47a8      	blx	r5
}
    2d94:	b002      	add	sp, #8
    2d96:	bd70      	pop	{r4, r5, r6, pc}
    2d98:	000015e1 	.word	0x000015e1

00002d9c <configure_i2c_slave_callbacks>:
{
    2d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_request_callback,
    2d9e:	4c14      	ldr	r4, [pc, #80]	; (2df0 <configure_i2c_slave_callbacks+0x54>)
    2da0:	2202      	movs	r2, #2
    2da2:	4914      	ldr	r1, [pc, #80]	; (2df4 <configure_i2c_slave_callbacks+0x58>)
    2da4:	0020      	movs	r0, r4
    2da6:	4e14      	ldr	r6, [pc, #80]	; (2df8 <configure_i2c_slave_callbacks+0x5c>)
    2da8:	47b0      	blx	r6
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    2daa:	2525      	movs	r5, #37	; 0x25
    2dac:	5d63      	ldrb	r3, [r4, r5]
    2dae:	2204      	movs	r2, #4
    2db0:	4313      	orrs	r3, r2
    2db2:	5563      	strb	r3, [r4, r5]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    2db4:	2702      	movs	r7, #2
    2db6:	6823      	ldr	r3, [r4, #0]
    2db8:	759f      	strb	r7, [r3, #22]
	i2c_slave_register_callback(&i2c_slave_instance, i2c_write_request_callback,
    2dba:	3a01      	subs	r2, #1
    2dbc:	490f      	ldr	r1, [pc, #60]	; (2dfc <configure_i2c_slave_callbacks+0x60>)
    2dbe:	0020      	movs	r0, r4
    2dc0:	47b0      	blx	r6
	module->enabled_callback |= (1 << callback_type);
    2dc2:	5d63      	ldrb	r3, [r4, r5]
    2dc4:	2208      	movs	r2, #8
    2dc6:	4313      	orrs	r3, r2
    2dc8:	5563      	strb	r3, [r4, r5]
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
    2dca:	6823      	ldr	r3, [r4, #0]
    2dcc:	759f      	strb	r7, [r3, #22]
	i2c_slave_register_callback(&i2c_slave_instance, i2c_write_complete_callback,
    2dce:	2200      	movs	r2, #0
    2dd0:	490b      	ldr	r1, [pc, #44]	; (2e00 <configure_i2c_slave_callbacks+0x64>)
    2dd2:	0020      	movs	r0, r4
    2dd4:	47b0      	blx	r6
	module->enabled_callback |= (1 << callback_type);
    2dd6:	5d63      	ldrb	r3, [r4, r5]
    2dd8:	2201      	movs	r2, #1
    2dda:	4313      	orrs	r3, r2
    2ddc:	5563      	strb	r3, [r4, r5]
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_complete_callback,
    2dde:	4909      	ldr	r1, [pc, #36]	; (2e04 <configure_i2c_slave_callbacks+0x68>)
    2de0:	0020      	movs	r0, r4
    2de2:	47b0      	blx	r6
    2de4:	5d63      	ldrb	r3, [r4, r5]
    2de6:	2202      	movs	r2, #2
    2de8:	4313      	orrs	r3, r2
    2dea:	5563      	strb	r3, [r4, r5]
}
    2dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dee:	46c0      	nop			; (mov r8, r8)
    2df0:	200002ec 	.word	0x200002ec
    2df4:	00002155 	.word	0x00002155
    2df8:	00000ab9 	.word	0x00000ab9
    2dfc:	0000217d 	.word	0x0000217d
    2e00:	00002129 	.word	0x00002129
    2e04:	00002cbd 	.word	0x00002cbd

00002e08 <i2c_initialization>:
{
    2e08:	b510      	push	{r4, lr}
	configure_i2c_pins();
    2e0a:	4b03      	ldr	r3, [pc, #12]	; (2e18 <i2c_initialization+0x10>)
    2e0c:	4798      	blx	r3
	configure_i2c_slave();
    2e0e:	4b03      	ldr	r3, [pc, #12]	; (2e1c <i2c_initialization+0x14>)
    2e10:	4798      	blx	r3
	configure_i2c_slave_callbacks();
    2e12:	4b03      	ldr	r3, [pc, #12]	; (2e20 <i2c_initialization+0x18>)
    2e14:	4798      	blx	r3
}
    2e16:	bd10      	pop	{r4, pc}
    2e18:	00002d71 	.word	0x00002d71
    2e1c:	00002ce1 	.word	0x00002ce1
    2e20:	00002d9d 	.word	0x00002d9d

00002e24 <main>:
//uint32_t controller_fsm_period = 1000;			// time between states in controller fsm
//extern uint8_t fsm_state;


int main (void)
{
    2e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int led_toggle = 0;
	int button_pressed = 0, button_pressed_1 = 0;

	system_init();
    2e26:	4b27      	ldr	r3, [pc, #156]	; (2ec4 <main+0xa0>)
    2e28:	4798      	blx	r3
	configure_gclock_generator();
    2e2a:	4b27      	ldr	r3, [pc, #156]	; (2ec8 <main+0xa4>)
    2e2c:	4798      	blx	r3
	configure_port_pins();
    2e2e:	4b27      	ldr	r3, [pc, #156]	; (2ecc <main+0xa8>)
    2e30:	4798      	blx	r3
	i2c_initialization();
    2e32:	4b27      	ldr	r3, [pc, #156]	; (2ed0 <main+0xac>)
    2e34:	4798      	blx	r3
	dac_initialization();
    2e36:	4b27      	ldr	r3, [pc, #156]	; (2ed4 <main+0xb0>)
    2e38:	4798      	blx	r3
	adc_initialization();
    2e3a:	4b27      	ldr	r3, [pc, #156]	; (2ed8 <main+0xb4>)
    2e3c:	4798      	blx	r3


    dac_chan_write(&dac_instance, CDS_VBP2, mV_to_int(1000) );
    2e3e:	4d27      	ldr	r5, [pc, #156]	; (2edc <main+0xb8>)
    2e40:	4a27      	ldr	r2, [pc, #156]	; (2ee0 <main+0xbc>)
    2e42:	2101      	movs	r1, #1
    2e44:	0028      	movs	r0, r5
    2e46:	4c27      	ldr	r4, [pc, #156]	; (2ee4 <main+0xc0>)
    2e48:	47a0      	blx	r4
    dac_chan_write(&dac_instance, AD8235_VREF, mV_to_int(1500) );
    2e4a:	4a27      	ldr	r2, [pc, #156]	; (2ee8 <main+0xc4>)
    2e4c:	2100      	movs	r1, #0
    2e4e:	0028      	movs	r0, r5
    2e50:	47a0      	blx	r4


    fsm_state        = RESET;
    2e52:	2200      	movs	r2, #0
    2e54:	4b25      	ldr	r3, [pc, #148]	; (2eec <main+0xc8>)
    2e56:	701a      	strb	r2, [r3, #0]
	default_fsm_wait = 1500;
    2e58:	4a25      	ldr	r2, [pc, #148]	; (2ef0 <main+0xcc>)
    2e5a:	4b26      	ldr	r3, [pc, #152]	; (2ef4 <main+0xd0>)
    2e5c:	601a      	str	r2, [r3, #0]
	integration_time = 20000;
    2e5e:	4a26      	ldr	r2, [pc, #152]	; (2ef8 <main+0xd4>)
    2e60:	4b26      	ldr	r3, [pc, #152]	; (2efc <main+0xd8>)
    2e62:	601a      	str	r2, [r3, #0]
	configure_timers();
    2e64:	4b26      	ldr	r3, [pc, #152]	; (2f00 <main+0xdc>)
    2e66:	4798      	blx	r3
	initialize_timers();
    2e68:	4b26      	ldr	r3, [pc, #152]	; (2f04 <main+0xe0>)
    2e6a:	4798      	blx	r3
	
	free_running_image_acq = 1;
    2e6c:	2201      	movs	r2, #1
    2e6e:	4b26      	ldr	r3, [pc, #152]	; (2f08 <main+0xe4>)
    2e70:	701a      	strb	r2, [r3, #0]
	
	uint8_t i;
	
	for (i=0 ; i < image_array_size ; i++ )
    2e72:	4b26      	ldr	r3, [pc, #152]	; (2f0c <main+0xe8>)
    2e74:	881b      	ldrh	r3, [r3, #0]
    2e76:	2b00      	cmp	r3, #0
    2e78:	d00a      	beq.n	2e90 <main+0x6c>
    2e7a:	2300      	movs	r3, #0
	{
		image_array[i] = 77;
    2e7c:	4824      	ldr	r0, [pc, #144]	; (2f10 <main+0xec>)
    2e7e:	214d      	movs	r1, #77	; 0x4d
	for (i=0 ; i < image_array_size ; i++ )
    2e80:	4a22      	ldr	r2, [pc, #136]	; (2f0c <main+0xe8>)
		image_array[i] = 77;
    2e82:	6804      	ldr	r4, [r0, #0]
    2e84:	54e1      	strb	r1, [r4, r3]
	for (i=0 ; i < image_array_size ; i++ )
    2e86:	3301      	adds	r3, #1
    2e88:	b2db      	uxtb	r3, r3
    2e8a:	8814      	ldrh	r4, [r2, #0]
    2e8c:	429c      	cmp	r4, r3
    2e8e:	d8f8      	bhi.n	2e82 <main+0x5e>
		port_base->OUTSET.reg = pin_mask;
    2e90:	2200      	movs	r2, #0
    2e92:	2500      	movs	r5, #0
	return (port_base->IN.reg & pin_mask);
    2e94:	481f      	ldr	r0, [pc, #124]	; (2f14 <main+0xf0>)
    2e96:	2104      	movs	r1, #4
		port_base->OUTSET.reg = pin_mask;
    2e98:	4e1f      	ldr	r6, [pc, #124]	; (2f18 <main+0xf4>)
    2e9a:	2780      	movs	r7, #128	; 0x80
    2e9c:	00ff      	lsls	r7, r7, #3
    2e9e:	2400      	movs	r4, #0
    2ea0:	e000      	b.n	2ea4 <main+0x80>
    2ea2:	0022      	movs	r2, r4
	return (port_base->IN.reg & pin_mask);
    2ea4:	6a03      	ldr	r3, [r0, #32]
		#ifdef XPLAINED_BOARD
		  if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {   // is button pressed
			  button_pressed = 1;
		  } else button_pressed = 0;
		
		  if (button_pressed == 1 && button_pressed_1 == 0) {
    2ea6:	4219      	tst	r1, r3
    2ea8:	d1fb      	bne.n	2ea2 <main+0x7e>
    2eaa:	2a00      	cmp	r2, #0
    2eac:	d1fa      	bne.n	2ea4 <main+0x80>
		    led_toggle ^=1;
		
		    if (led_toggle == 1) {
    2eae:	2d00      	cmp	r5, #0
    2eb0:	d103      	bne.n	2eba <main+0x96>
		port_base->OUTCLR.reg = pin_mask;
    2eb2:	6177      	str	r7, [r6, #20]
    2eb4:	3201      	adds	r2, #1
		    led_toggle ^=1;
    2eb6:	3501      	adds	r5, #1
    2eb8:	e7f4      	b.n	2ea4 <main+0x80>
		port_base->OUTSET.reg = pin_mask;
    2eba:	61b7      	str	r7, [r6, #24]
    2ebc:	002b      	movs	r3, r5
    2ebe:	0015      	movs	r5, r2
    2ec0:	001a      	movs	r2, r3
    2ec2:	e7ef      	b.n	2ea4 <main+0x80>
    2ec4:	00001615 	.word	0x00001615
    2ec8:	0000219d 	.word	0x0000219d
    2ecc:	000021cd 	.word	0x000021cd
    2ed0:	00002e09 	.word	0x00002e09
    2ed4:	00002509 	.word	0x00002509
    2ed8:	000022f9 	.word	0x000022f9
    2edc:	20000230 	.word	0x20000230
    2ee0:	00000474 	.word	0x00000474
    2ee4:	0000077d 	.word	0x0000077d
    2ee8:	000006af 	.word	0x000006af
    2eec:	20000077 	.word	0x20000077
    2ef0:	000005dc 	.word	0x000005dc
    2ef4:	20000004 	.word	0x20000004
    2ef8:	00004e20 	.word	0x00004e20
    2efc:	20000014 	.word	0x20000014
    2f00:	00002a75 	.word	0x00002a75
    2f04:	00002ab1 	.word	0x00002ab1
    2f08:	20000076 	.word	0x20000076
    2f0c:	20000010 	.word	0x20000010
    2f10:	2000000c 	.word	0x2000000c
    2f14:	40002800 	.word	0x40002800
    2f18:	40002880 	.word	0x40002880

00002f1c <round>:
    2f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f1e:	4a26      	ldr	r2, [pc, #152]	; (2fb8 <round+0x9c>)
    2f20:	004b      	lsls	r3, r1, #1
    2f22:	0d5b      	lsrs	r3, r3, #21
    2f24:	189a      	adds	r2, r3, r2
    2f26:	0007      	movs	r7, r0
    2f28:	000c      	movs	r4, r1
    2f2a:	2a13      	cmp	r2, #19
    2f2c:	dc10      	bgt.n	2f50 <round+0x34>
    2f2e:	2a00      	cmp	r2, #0
    2f30:	db39      	blt.n	2fa6 <round+0x8a>
    2f32:	4b22      	ldr	r3, [pc, #136]	; (2fbc <round+0xa0>)
    2f34:	4113      	asrs	r3, r2
    2f36:	420b      	tst	r3, r1
    2f38:	d030      	beq.n	2f9c <round+0x80>
    2f3a:	2480      	movs	r4, #128	; 0x80
    2f3c:	0324      	lsls	r4, r4, #12
    2f3e:	4114      	asrs	r4, r2
    2f40:	2000      	movs	r0, #0
    2f42:	1864      	adds	r4, r4, r1
    2f44:	439c      	bics	r4, r3
    2f46:	0006      	movs	r6, r0
    2f48:	0025      	movs	r5, r4
    2f4a:	0030      	movs	r0, r6
    2f4c:	0029      	movs	r1, r5
    2f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f50:	2a33      	cmp	r2, #51	; 0x33
    2f52:	dd0c      	ble.n	2f6e <round+0x52>
    2f54:	2380      	movs	r3, #128	; 0x80
    2f56:	0006      	movs	r6, r0
    2f58:	00db      	lsls	r3, r3, #3
    2f5a:	000d      	movs	r5, r1
    2f5c:	429a      	cmp	r2, r3
    2f5e:	d1f4      	bne.n	2f4a <round+0x2e>
    2f60:	0002      	movs	r2, r0
    2f62:	000b      	movs	r3, r1
    2f64:	f000 fc1e 	bl	37a4 <__aeabi_dadd>
    2f68:	0006      	movs	r6, r0
    2f6a:	000d      	movs	r5, r1
    2f6c:	e7ed      	b.n	2f4a <round+0x2e>
    2f6e:	4d14      	ldr	r5, [pc, #80]	; (2fc0 <round+0xa4>)
    2f70:	0006      	movs	r6, r0
    2f72:	46ac      	mov	ip, r5
    2f74:	2501      	movs	r5, #1
    2f76:	4463      	add	r3, ip
    2f78:	426d      	negs	r5, r5
    2f7a:	40dd      	lsrs	r5, r3
    2f7c:	46ac      	mov	ip, r5
    2f7e:	4663      	mov	r3, ip
    2f80:	000d      	movs	r5, r1
    2f82:	4203      	tst	r3, r0
    2f84:	d0e1      	beq.n	2f4a <round+0x2e>
    2f86:	2333      	movs	r3, #51	; 0x33
    2f88:	1a9a      	subs	r2, r3, r2
    2f8a:	3b32      	subs	r3, #50	; 0x32
    2f8c:	4093      	lsls	r3, r2
    2f8e:	1818      	adds	r0, r3, r0
    2f90:	4287      	cmp	r7, r0
    2f92:	d900      	bls.n	2f96 <round+0x7a>
    2f94:	1c4c      	adds	r4, r1, #1
    2f96:	4663      	mov	r3, ip
    2f98:	4398      	bics	r0, r3
    2f9a:	e7d4      	b.n	2f46 <round+0x2a>
    2f9c:	0006      	movs	r6, r0
    2f9e:	000d      	movs	r5, r1
    2fa0:	2800      	cmp	r0, #0
    2fa2:	d1ca      	bne.n	2f3a <round+0x1e>
    2fa4:	e7d1      	b.n	2f4a <round+0x2e>
    2fa6:	0fc9      	lsrs	r1, r1, #31
    2fa8:	07cc      	lsls	r4, r1, #31
    2faa:	2000      	movs	r0, #0
    2fac:	1c53      	adds	r3, r2, #1
    2fae:	d1ca      	bne.n	2f46 <round+0x2a>
    2fb0:	4b04      	ldr	r3, [pc, #16]	; (2fc4 <round+0xa8>)
    2fb2:	431c      	orrs	r4, r3
    2fb4:	e7c7      	b.n	2f46 <round+0x2a>
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	fffffc01 	.word	0xfffffc01
    2fbc:	000fffff 	.word	0x000fffff
    2fc0:	fffffbed 	.word	0xfffffbed
    2fc4:	3ff00000 	.word	0x3ff00000

00002fc8 <__udivsi3>:
    2fc8:	2200      	movs	r2, #0
    2fca:	0843      	lsrs	r3, r0, #1
    2fcc:	428b      	cmp	r3, r1
    2fce:	d374      	bcc.n	30ba <__udivsi3+0xf2>
    2fd0:	0903      	lsrs	r3, r0, #4
    2fd2:	428b      	cmp	r3, r1
    2fd4:	d35f      	bcc.n	3096 <__udivsi3+0xce>
    2fd6:	0a03      	lsrs	r3, r0, #8
    2fd8:	428b      	cmp	r3, r1
    2fda:	d344      	bcc.n	3066 <__udivsi3+0x9e>
    2fdc:	0b03      	lsrs	r3, r0, #12
    2fde:	428b      	cmp	r3, r1
    2fe0:	d328      	bcc.n	3034 <__udivsi3+0x6c>
    2fe2:	0c03      	lsrs	r3, r0, #16
    2fe4:	428b      	cmp	r3, r1
    2fe6:	d30d      	bcc.n	3004 <__udivsi3+0x3c>
    2fe8:	22ff      	movs	r2, #255	; 0xff
    2fea:	0209      	lsls	r1, r1, #8
    2fec:	ba12      	rev	r2, r2
    2fee:	0c03      	lsrs	r3, r0, #16
    2ff0:	428b      	cmp	r3, r1
    2ff2:	d302      	bcc.n	2ffa <__udivsi3+0x32>
    2ff4:	1212      	asrs	r2, r2, #8
    2ff6:	0209      	lsls	r1, r1, #8
    2ff8:	d065      	beq.n	30c6 <__udivsi3+0xfe>
    2ffa:	0b03      	lsrs	r3, r0, #12
    2ffc:	428b      	cmp	r3, r1
    2ffe:	d319      	bcc.n	3034 <__udivsi3+0x6c>
    3000:	e000      	b.n	3004 <__udivsi3+0x3c>
    3002:	0a09      	lsrs	r1, r1, #8
    3004:	0bc3      	lsrs	r3, r0, #15
    3006:	428b      	cmp	r3, r1
    3008:	d301      	bcc.n	300e <__udivsi3+0x46>
    300a:	03cb      	lsls	r3, r1, #15
    300c:	1ac0      	subs	r0, r0, r3
    300e:	4152      	adcs	r2, r2
    3010:	0b83      	lsrs	r3, r0, #14
    3012:	428b      	cmp	r3, r1
    3014:	d301      	bcc.n	301a <__udivsi3+0x52>
    3016:	038b      	lsls	r3, r1, #14
    3018:	1ac0      	subs	r0, r0, r3
    301a:	4152      	adcs	r2, r2
    301c:	0b43      	lsrs	r3, r0, #13
    301e:	428b      	cmp	r3, r1
    3020:	d301      	bcc.n	3026 <__udivsi3+0x5e>
    3022:	034b      	lsls	r3, r1, #13
    3024:	1ac0      	subs	r0, r0, r3
    3026:	4152      	adcs	r2, r2
    3028:	0b03      	lsrs	r3, r0, #12
    302a:	428b      	cmp	r3, r1
    302c:	d301      	bcc.n	3032 <__udivsi3+0x6a>
    302e:	030b      	lsls	r3, r1, #12
    3030:	1ac0      	subs	r0, r0, r3
    3032:	4152      	adcs	r2, r2
    3034:	0ac3      	lsrs	r3, r0, #11
    3036:	428b      	cmp	r3, r1
    3038:	d301      	bcc.n	303e <__udivsi3+0x76>
    303a:	02cb      	lsls	r3, r1, #11
    303c:	1ac0      	subs	r0, r0, r3
    303e:	4152      	adcs	r2, r2
    3040:	0a83      	lsrs	r3, r0, #10
    3042:	428b      	cmp	r3, r1
    3044:	d301      	bcc.n	304a <__udivsi3+0x82>
    3046:	028b      	lsls	r3, r1, #10
    3048:	1ac0      	subs	r0, r0, r3
    304a:	4152      	adcs	r2, r2
    304c:	0a43      	lsrs	r3, r0, #9
    304e:	428b      	cmp	r3, r1
    3050:	d301      	bcc.n	3056 <__udivsi3+0x8e>
    3052:	024b      	lsls	r3, r1, #9
    3054:	1ac0      	subs	r0, r0, r3
    3056:	4152      	adcs	r2, r2
    3058:	0a03      	lsrs	r3, r0, #8
    305a:	428b      	cmp	r3, r1
    305c:	d301      	bcc.n	3062 <__udivsi3+0x9a>
    305e:	020b      	lsls	r3, r1, #8
    3060:	1ac0      	subs	r0, r0, r3
    3062:	4152      	adcs	r2, r2
    3064:	d2cd      	bcs.n	3002 <__udivsi3+0x3a>
    3066:	09c3      	lsrs	r3, r0, #7
    3068:	428b      	cmp	r3, r1
    306a:	d301      	bcc.n	3070 <__udivsi3+0xa8>
    306c:	01cb      	lsls	r3, r1, #7
    306e:	1ac0      	subs	r0, r0, r3
    3070:	4152      	adcs	r2, r2
    3072:	0983      	lsrs	r3, r0, #6
    3074:	428b      	cmp	r3, r1
    3076:	d301      	bcc.n	307c <__udivsi3+0xb4>
    3078:	018b      	lsls	r3, r1, #6
    307a:	1ac0      	subs	r0, r0, r3
    307c:	4152      	adcs	r2, r2
    307e:	0943      	lsrs	r3, r0, #5
    3080:	428b      	cmp	r3, r1
    3082:	d301      	bcc.n	3088 <__udivsi3+0xc0>
    3084:	014b      	lsls	r3, r1, #5
    3086:	1ac0      	subs	r0, r0, r3
    3088:	4152      	adcs	r2, r2
    308a:	0903      	lsrs	r3, r0, #4
    308c:	428b      	cmp	r3, r1
    308e:	d301      	bcc.n	3094 <__udivsi3+0xcc>
    3090:	010b      	lsls	r3, r1, #4
    3092:	1ac0      	subs	r0, r0, r3
    3094:	4152      	adcs	r2, r2
    3096:	08c3      	lsrs	r3, r0, #3
    3098:	428b      	cmp	r3, r1
    309a:	d301      	bcc.n	30a0 <__udivsi3+0xd8>
    309c:	00cb      	lsls	r3, r1, #3
    309e:	1ac0      	subs	r0, r0, r3
    30a0:	4152      	adcs	r2, r2
    30a2:	0883      	lsrs	r3, r0, #2
    30a4:	428b      	cmp	r3, r1
    30a6:	d301      	bcc.n	30ac <__udivsi3+0xe4>
    30a8:	008b      	lsls	r3, r1, #2
    30aa:	1ac0      	subs	r0, r0, r3
    30ac:	4152      	adcs	r2, r2
    30ae:	0843      	lsrs	r3, r0, #1
    30b0:	428b      	cmp	r3, r1
    30b2:	d301      	bcc.n	30b8 <__udivsi3+0xf0>
    30b4:	004b      	lsls	r3, r1, #1
    30b6:	1ac0      	subs	r0, r0, r3
    30b8:	4152      	adcs	r2, r2
    30ba:	1a41      	subs	r1, r0, r1
    30bc:	d200      	bcs.n	30c0 <__udivsi3+0xf8>
    30be:	4601      	mov	r1, r0
    30c0:	4152      	adcs	r2, r2
    30c2:	4610      	mov	r0, r2
    30c4:	4770      	bx	lr
    30c6:	e7ff      	b.n	30c8 <__udivsi3+0x100>
    30c8:	b501      	push	{r0, lr}
    30ca:	2000      	movs	r0, #0
    30cc:	f000 f806 	bl	30dc <__aeabi_idiv0>
    30d0:	bd02      	pop	{r1, pc}
    30d2:	46c0      	nop			; (mov r8, r8)

000030d4 <__aeabi_uidivmod>:
    30d4:	2900      	cmp	r1, #0
    30d6:	d0f7      	beq.n	30c8 <__udivsi3+0x100>
    30d8:	e776      	b.n	2fc8 <__udivsi3>
    30da:	4770      	bx	lr

000030dc <__aeabi_idiv0>:
    30dc:	4770      	bx	lr
    30de:	46c0      	nop			; (mov r8, r8)

000030e0 <__aeabi_f2uiz>:
    30e0:	219e      	movs	r1, #158	; 0x9e
    30e2:	b510      	push	{r4, lr}
    30e4:	05c9      	lsls	r1, r1, #23
    30e6:	1c04      	adds	r4, r0, #0
    30e8:	f002 f852 	bl	5190 <__aeabi_fcmpge>
    30ec:	2800      	cmp	r0, #0
    30ee:	d103      	bne.n	30f8 <__aeabi_f2uiz+0x18>
    30f0:	1c20      	adds	r0, r4, #0
    30f2:	f000 fae7 	bl	36c4 <__aeabi_f2iz>
    30f6:	bd10      	pop	{r4, pc}
    30f8:	219e      	movs	r1, #158	; 0x9e
    30fa:	1c20      	adds	r0, r4, #0
    30fc:	05c9      	lsls	r1, r1, #23
    30fe:	f000 f945 	bl	338c <__aeabi_fsub>
    3102:	f000 fadf 	bl	36c4 <__aeabi_f2iz>
    3106:	2380      	movs	r3, #128	; 0x80
    3108:	061b      	lsls	r3, r3, #24
    310a:	469c      	mov	ip, r3
    310c:	4460      	add	r0, ip
    310e:	e7f2      	b.n	30f6 <__aeabi_f2uiz+0x16>

00003110 <__aeabi_d2uiz>:
    3110:	b570      	push	{r4, r5, r6, lr}
    3112:	2200      	movs	r2, #0
    3114:	4b0c      	ldr	r3, [pc, #48]	; (3148 <__aeabi_d2uiz+0x38>)
    3116:	0004      	movs	r4, r0
    3118:	000d      	movs	r5, r1
    311a:	f001 ffff 	bl	511c <__aeabi_dcmpge>
    311e:	2800      	cmp	r0, #0
    3120:	d104      	bne.n	312c <__aeabi_d2uiz+0x1c>
    3122:	0020      	movs	r0, r4
    3124:	0029      	movs	r1, r5
    3126:	f001 ff17 	bl	4f58 <__aeabi_d2iz>
    312a:	bd70      	pop	{r4, r5, r6, pc}
    312c:	4b06      	ldr	r3, [pc, #24]	; (3148 <__aeabi_d2uiz+0x38>)
    312e:	2200      	movs	r2, #0
    3130:	0020      	movs	r0, r4
    3132:	0029      	movs	r1, r5
    3134:	f001 fbfa 	bl	492c <__aeabi_dsub>
    3138:	f001 ff0e 	bl	4f58 <__aeabi_d2iz>
    313c:	2380      	movs	r3, #128	; 0x80
    313e:	061b      	lsls	r3, r3, #24
    3140:	469c      	mov	ip, r3
    3142:	4460      	add	r0, ip
    3144:	e7f1      	b.n	312a <__aeabi_d2uiz+0x1a>
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	41e00000 	.word	0x41e00000

0000314c <__aeabi_fmul>:
    314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    314e:	4657      	mov	r7, sl
    3150:	464e      	mov	r6, r9
    3152:	4645      	mov	r5, r8
    3154:	46de      	mov	lr, fp
    3156:	b5e0      	push	{r5, r6, r7, lr}
    3158:	0247      	lsls	r7, r0, #9
    315a:	0046      	lsls	r6, r0, #1
    315c:	4688      	mov	r8, r1
    315e:	0a7f      	lsrs	r7, r7, #9
    3160:	0e36      	lsrs	r6, r6, #24
    3162:	0fc4      	lsrs	r4, r0, #31
    3164:	2e00      	cmp	r6, #0
    3166:	d047      	beq.n	31f8 <__aeabi_fmul+0xac>
    3168:	2eff      	cmp	r6, #255	; 0xff
    316a:	d024      	beq.n	31b6 <__aeabi_fmul+0x6a>
    316c:	00fb      	lsls	r3, r7, #3
    316e:	2780      	movs	r7, #128	; 0x80
    3170:	04ff      	lsls	r7, r7, #19
    3172:	431f      	orrs	r7, r3
    3174:	2300      	movs	r3, #0
    3176:	4699      	mov	r9, r3
    3178:	469a      	mov	sl, r3
    317a:	3e7f      	subs	r6, #127	; 0x7f
    317c:	4643      	mov	r3, r8
    317e:	025d      	lsls	r5, r3, #9
    3180:	0058      	lsls	r0, r3, #1
    3182:	0fdb      	lsrs	r3, r3, #31
    3184:	0a6d      	lsrs	r5, r5, #9
    3186:	0e00      	lsrs	r0, r0, #24
    3188:	4698      	mov	r8, r3
    318a:	d043      	beq.n	3214 <__aeabi_fmul+0xc8>
    318c:	28ff      	cmp	r0, #255	; 0xff
    318e:	d03b      	beq.n	3208 <__aeabi_fmul+0xbc>
    3190:	00eb      	lsls	r3, r5, #3
    3192:	2580      	movs	r5, #128	; 0x80
    3194:	2200      	movs	r2, #0
    3196:	04ed      	lsls	r5, r5, #19
    3198:	431d      	orrs	r5, r3
    319a:	387f      	subs	r0, #127	; 0x7f
    319c:	1836      	adds	r6, r6, r0
    319e:	1c73      	adds	r3, r6, #1
    31a0:	4641      	mov	r1, r8
    31a2:	469b      	mov	fp, r3
    31a4:	464b      	mov	r3, r9
    31a6:	4061      	eors	r1, r4
    31a8:	4313      	orrs	r3, r2
    31aa:	2b0f      	cmp	r3, #15
    31ac:	d864      	bhi.n	3278 <__aeabi_fmul+0x12c>
    31ae:	4875      	ldr	r0, [pc, #468]	; (3384 <__aeabi_fmul+0x238>)
    31b0:	009b      	lsls	r3, r3, #2
    31b2:	58c3      	ldr	r3, [r0, r3]
    31b4:	469f      	mov	pc, r3
    31b6:	2f00      	cmp	r7, #0
    31b8:	d142      	bne.n	3240 <__aeabi_fmul+0xf4>
    31ba:	2308      	movs	r3, #8
    31bc:	4699      	mov	r9, r3
    31be:	3b06      	subs	r3, #6
    31c0:	26ff      	movs	r6, #255	; 0xff
    31c2:	469a      	mov	sl, r3
    31c4:	e7da      	b.n	317c <__aeabi_fmul+0x30>
    31c6:	4641      	mov	r1, r8
    31c8:	2a02      	cmp	r2, #2
    31ca:	d028      	beq.n	321e <__aeabi_fmul+0xd2>
    31cc:	2a03      	cmp	r2, #3
    31ce:	d100      	bne.n	31d2 <__aeabi_fmul+0x86>
    31d0:	e0ce      	b.n	3370 <__aeabi_fmul+0x224>
    31d2:	2a01      	cmp	r2, #1
    31d4:	d000      	beq.n	31d8 <__aeabi_fmul+0x8c>
    31d6:	e0ac      	b.n	3332 <__aeabi_fmul+0x1e6>
    31d8:	4011      	ands	r1, r2
    31da:	2000      	movs	r0, #0
    31dc:	2200      	movs	r2, #0
    31de:	b2cc      	uxtb	r4, r1
    31e0:	0240      	lsls	r0, r0, #9
    31e2:	05d2      	lsls	r2, r2, #23
    31e4:	0a40      	lsrs	r0, r0, #9
    31e6:	07e4      	lsls	r4, r4, #31
    31e8:	4310      	orrs	r0, r2
    31ea:	4320      	orrs	r0, r4
    31ec:	bc3c      	pop	{r2, r3, r4, r5}
    31ee:	4690      	mov	r8, r2
    31f0:	4699      	mov	r9, r3
    31f2:	46a2      	mov	sl, r4
    31f4:	46ab      	mov	fp, r5
    31f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31f8:	2f00      	cmp	r7, #0
    31fa:	d115      	bne.n	3228 <__aeabi_fmul+0xdc>
    31fc:	2304      	movs	r3, #4
    31fe:	4699      	mov	r9, r3
    3200:	3b03      	subs	r3, #3
    3202:	2600      	movs	r6, #0
    3204:	469a      	mov	sl, r3
    3206:	e7b9      	b.n	317c <__aeabi_fmul+0x30>
    3208:	20ff      	movs	r0, #255	; 0xff
    320a:	2202      	movs	r2, #2
    320c:	2d00      	cmp	r5, #0
    320e:	d0c5      	beq.n	319c <__aeabi_fmul+0x50>
    3210:	2203      	movs	r2, #3
    3212:	e7c3      	b.n	319c <__aeabi_fmul+0x50>
    3214:	2d00      	cmp	r5, #0
    3216:	d119      	bne.n	324c <__aeabi_fmul+0x100>
    3218:	2000      	movs	r0, #0
    321a:	2201      	movs	r2, #1
    321c:	e7be      	b.n	319c <__aeabi_fmul+0x50>
    321e:	2401      	movs	r4, #1
    3220:	22ff      	movs	r2, #255	; 0xff
    3222:	400c      	ands	r4, r1
    3224:	2000      	movs	r0, #0
    3226:	e7db      	b.n	31e0 <__aeabi_fmul+0x94>
    3228:	0038      	movs	r0, r7
    322a:	f001 ffbb 	bl	51a4 <__clzsi2>
    322e:	2676      	movs	r6, #118	; 0x76
    3230:	1f43      	subs	r3, r0, #5
    3232:	409f      	lsls	r7, r3
    3234:	2300      	movs	r3, #0
    3236:	4276      	negs	r6, r6
    3238:	1a36      	subs	r6, r6, r0
    323a:	4699      	mov	r9, r3
    323c:	469a      	mov	sl, r3
    323e:	e79d      	b.n	317c <__aeabi_fmul+0x30>
    3240:	230c      	movs	r3, #12
    3242:	4699      	mov	r9, r3
    3244:	3b09      	subs	r3, #9
    3246:	26ff      	movs	r6, #255	; 0xff
    3248:	469a      	mov	sl, r3
    324a:	e797      	b.n	317c <__aeabi_fmul+0x30>
    324c:	0028      	movs	r0, r5
    324e:	f001 ffa9 	bl	51a4 <__clzsi2>
    3252:	1f43      	subs	r3, r0, #5
    3254:	409d      	lsls	r5, r3
    3256:	2376      	movs	r3, #118	; 0x76
    3258:	425b      	negs	r3, r3
    325a:	1a18      	subs	r0, r3, r0
    325c:	2200      	movs	r2, #0
    325e:	e79d      	b.n	319c <__aeabi_fmul+0x50>
    3260:	2080      	movs	r0, #128	; 0x80
    3262:	2400      	movs	r4, #0
    3264:	03c0      	lsls	r0, r0, #15
    3266:	22ff      	movs	r2, #255	; 0xff
    3268:	e7ba      	b.n	31e0 <__aeabi_fmul+0x94>
    326a:	003d      	movs	r5, r7
    326c:	4652      	mov	r2, sl
    326e:	e7ab      	b.n	31c8 <__aeabi_fmul+0x7c>
    3270:	003d      	movs	r5, r7
    3272:	0021      	movs	r1, r4
    3274:	4652      	mov	r2, sl
    3276:	e7a7      	b.n	31c8 <__aeabi_fmul+0x7c>
    3278:	0c3b      	lsrs	r3, r7, #16
    327a:	469c      	mov	ip, r3
    327c:	042a      	lsls	r2, r5, #16
    327e:	0c12      	lsrs	r2, r2, #16
    3280:	0c2b      	lsrs	r3, r5, #16
    3282:	0014      	movs	r4, r2
    3284:	4660      	mov	r0, ip
    3286:	4665      	mov	r5, ip
    3288:	043f      	lsls	r7, r7, #16
    328a:	0c3f      	lsrs	r7, r7, #16
    328c:	437c      	muls	r4, r7
    328e:	4342      	muls	r2, r0
    3290:	435d      	muls	r5, r3
    3292:	437b      	muls	r3, r7
    3294:	0c27      	lsrs	r7, r4, #16
    3296:	189b      	adds	r3, r3, r2
    3298:	18ff      	adds	r7, r7, r3
    329a:	42ba      	cmp	r2, r7
    329c:	d903      	bls.n	32a6 <__aeabi_fmul+0x15a>
    329e:	2380      	movs	r3, #128	; 0x80
    32a0:	025b      	lsls	r3, r3, #9
    32a2:	469c      	mov	ip, r3
    32a4:	4465      	add	r5, ip
    32a6:	0424      	lsls	r4, r4, #16
    32a8:	043a      	lsls	r2, r7, #16
    32aa:	0c24      	lsrs	r4, r4, #16
    32ac:	1912      	adds	r2, r2, r4
    32ae:	0193      	lsls	r3, r2, #6
    32b0:	1e5c      	subs	r4, r3, #1
    32b2:	41a3      	sbcs	r3, r4
    32b4:	0c3f      	lsrs	r7, r7, #16
    32b6:	0e92      	lsrs	r2, r2, #26
    32b8:	197d      	adds	r5, r7, r5
    32ba:	431a      	orrs	r2, r3
    32bc:	01ad      	lsls	r5, r5, #6
    32be:	4315      	orrs	r5, r2
    32c0:	012b      	lsls	r3, r5, #4
    32c2:	d504      	bpl.n	32ce <__aeabi_fmul+0x182>
    32c4:	2301      	movs	r3, #1
    32c6:	465e      	mov	r6, fp
    32c8:	086a      	lsrs	r2, r5, #1
    32ca:	401d      	ands	r5, r3
    32cc:	4315      	orrs	r5, r2
    32ce:	0032      	movs	r2, r6
    32d0:	327f      	adds	r2, #127	; 0x7f
    32d2:	2a00      	cmp	r2, #0
    32d4:	dd25      	ble.n	3322 <__aeabi_fmul+0x1d6>
    32d6:	076b      	lsls	r3, r5, #29
    32d8:	d004      	beq.n	32e4 <__aeabi_fmul+0x198>
    32da:	230f      	movs	r3, #15
    32dc:	402b      	ands	r3, r5
    32de:	2b04      	cmp	r3, #4
    32e0:	d000      	beq.n	32e4 <__aeabi_fmul+0x198>
    32e2:	3504      	adds	r5, #4
    32e4:	012b      	lsls	r3, r5, #4
    32e6:	d503      	bpl.n	32f0 <__aeabi_fmul+0x1a4>
    32e8:	0032      	movs	r2, r6
    32ea:	4b27      	ldr	r3, [pc, #156]	; (3388 <__aeabi_fmul+0x23c>)
    32ec:	3280      	adds	r2, #128	; 0x80
    32ee:	401d      	ands	r5, r3
    32f0:	2afe      	cmp	r2, #254	; 0xfe
    32f2:	dc94      	bgt.n	321e <__aeabi_fmul+0xd2>
    32f4:	2401      	movs	r4, #1
    32f6:	01a8      	lsls	r0, r5, #6
    32f8:	0a40      	lsrs	r0, r0, #9
    32fa:	b2d2      	uxtb	r2, r2
    32fc:	400c      	ands	r4, r1
    32fe:	e76f      	b.n	31e0 <__aeabi_fmul+0x94>
    3300:	2080      	movs	r0, #128	; 0x80
    3302:	03c0      	lsls	r0, r0, #15
    3304:	4207      	tst	r7, r0
    3306:	d007      	beq.n	3318 <__aeabi_fmul+0x1cc>
    3308:	4205      	tst	r5, r0
    330a:	d105      	bne.n	3318 <__aeabi_fmul+0x1cc>
    330c:	4328      	orrs	r0, r5
    330e:	0240      	lsls	r0, r0, #9
    3310:	0a40      	lsrs	r0, r0, #9
    3312:	4644      	mov	r4, r8
    3314:	22ff      	movs	r2, #255	; 0xff
    3316:	e763      	b.n	31e0 <__aeabi_fmul+0x94>
    3318:	4338      	orrs	r0, r7
    331a:	0240      	lsls	r0, r0, #9
    331c:	0a40      	lsrs	r0, r0, #9
    331e:	22ff      	movs	r2, #255	; 0xff
    3320:	e75e      	b.n	31e0 <__aeabi_fmul+0x94>
    3322:	2401      	movs	r4, #1
    3324:	1aa3      	subs	r3, r4, r2
    3326:	2b1b      	cmp	r3, #27
    3328:	dd05      	ble.n	3336 <__aeabi_fmul+0x1ea>
    332a:	400c      	ands	r4, r1
    332c:	2200      	movs	r2, #0
    332e:	2000      	movs	r0, #0
    3330:	e756      	b.n	31e0 <__aeabi_fmul+0x94>
    3332:	465e      	mov	r6, fp
    3334:	e7cb      	b.n	32ce <__aeabi_fmul+0x182>
    3336:	002a      	movs	r2, r5
    3338:	2020      	movs	r0, #32
    333a:	40da      	lsrs	r2, r3
    333c:	1ac3      	subs	r3, r0, r3
    333e:	409d      	lsls	r5, r3
    3340:	002b      	movs	r3, r5
    3342:	1e5d      	subs	r5, r3, #1
    3344:	41ab      	sbcs	r3, r5
    3346:	4313      	orrs	r3, r2
    3348:	075a      	lsls	r2, r3, #29
    334a:	d004      	beq.n	3356 <__aeabi_fmul+0x20a>
    334c:	220f      	movs	r2, #15
    334e:	401a      	ands	r2, r3
    3350:	2a04      	cmp	r2, #4
    3352:	d000      	beq.n	3356 <__aeabi_fmul+0x20a>
    3354:	3304      	adds	r3, #4
    3356:	015a      	lsls	r2, r3, #5
    3358:	d504      	bpl.n	3364 <__aeabi_fmul+0x218>
    335a:	2401      	movs	r4, #1
    335c:	2201      	movs	r2, #1
    335e:	400c      	ands	r4, r1
    3360:	2000      	movs	r0, #0
    3362:	e73d      	b.n	31e0 <__aeabi_fmul+0x94>
    3364:	2401      	movs	r4, #1
    3366:	019b      	lsls	r3, r3, #6
    3368:	0a58      	lsrs	r0, r3, #9
    336a:	400c      	ands	r4, r1
    336c:	2200      	movs	r2, #0
    336e:	e737      	b.n	31e0 <__aeabi_fmul+0x94>
    3370:	2080      	movs	r0, #128	; 0x80
    3372:	2401      	movs	r4, #1
    3374:	03c0      	lsls	r0, r0, #15
    3376:	4328      	orrs	r0, r5
    3378:	0240      	lsls	r0, r0, #9
    337a:	0a40      	lsrs	r0, r0, #9
    337c:	400c      	ands	r4, r1
    337e:	22ff      	movs	r2, #255	; 0xff
    3380:	e72e      	b.n	31e0 <__aeabi_fmul+0x94>
    3382:	46c0      	nop			; (mov r8, r8)
    3384:	00005870 	.word	0x00005870
    3388:	f7ffffff 	.word	0xf7ffffff

0000338c <__aeabi_fsub>:
    338c:	b5f0      	push	{r4, r5, r6, r7, lr}
    338e:	464f      	mov	r7, r9
    3390:	46d6      	mov	lr, sl
    3392:	4646      	mov	r6, r8
    3394:	0044      	lsls	r4, r0, #1
    3396:	b5c0      	push	{r6, r7, lr}
    3398:	0fc2      	lsrs	r2, r0, #31
    339a:	0247      	lsls	r7, r0, #9
    339c:	0248      	lsls	r0, r1, #9
    339e:	0a40      	lsrs	r0, r0, #9
    33a0:	4684      	mov	ip, r0
    33a2:	4666      	mov	r6, ip
    33a4:	0a7b      	lsrs	r3, r7, #9
    33a6:	0048      	lsls	r0, r1, #1
    33a8:	0fc9      	lsrs	r1, r1, #31
    33aa:	469a      	mov	sl, r3
    33ac:	0e24      	lsrs	r4, r4, #24
    33ae:	0015      	movs	r5, r2
    33b0:	00db      	lsls	r3, r3, #3
    33b2:	0e00      	lsrs	r0, r0, #24
    33b4:	4689      	mov	r9, r1
    33b6:	00f6      	lsls	r6, r6, #3
    33b8:	28ff      	cmp	r0, #255	; 0xff
    33ba:	d100      	bne.n	33be <__aeabi_fsub+0x32>
    33bc:	e08f      	b.n	34de <__aeabi_fsub+0x152>
    33be:	2101      	movs	r1, #1
    33c0:	464f      	mov	r7, r9
    33c2:	404f      	eors	r7, r1
    33c4:	0039      	movs	r1, r7
    33c6:	4291      	cmp	r1, r2
    33c8:	d066      	beq.n	3498 <__aeabi_fsub+0x10c>
    33ca:	1a22      	subs	r2, r4, r0
    33cc:	2a00      	cmp	r2, #0
    33ce:	dc00      	bgt.n	33d2 <__aeabi_fsub+0x46>
    33d0:	e09d      	b.n	350e <__aeabi_fsub+0x182>
    33d2:	2800      	cmp	r0, #0
    33d4:	d13d      	bne.n	3452 <__aeabi_fsub+0xc6>
    33d6:	2e00      	cmp	r6, #0
    33d8:	d100      	bne.n	33dc <__aeabi_fsub+0x50>
    33da:	e08b      	b.n	34f4 <__aeabi_fsub+0x168>
    33dc:	1e51      	subs	r1, r2, #1
    33de:	2900      	cmp	r1, #0
    33e0:	d000      	beq.n	33e4 <__aeabi_fsub+0x58>
    33e2:	e0b5      	b.n	3550 <__aeabi_fsub+0x1c4>
    33e4:	2401      	movs	r4, #1
    33e6:	1b9b      	subs	r3, r3, r6
    33e8:	015a      	lsls	r2, r3, #5
    33ea:	d544      	bpl.n	3476 <__aeabi_fsub+0xea>
    33ec:	019b      	lsls	r3, r3, #6
    33ee:	099f      	lsrs	r7, r3, #6
    33f0:	0038      	movs	r0, r7
    33f2:	f001 fed7 	bl	51a4 <__clzsi2>
    33f6:	3805      	subs	r0, #5
    33f8:	4087      	lsls	r7, r0
    33fa:	4284      	cmp	r4, r0
    33fc:	dd00      	ble.n	3400 <__aeabi_fsub+0x74>
    33fe:	e096      	b.n	352e <__aeabi_fsub+0x1a2>
    3400:	1b04      	subs	r4, r0, r4
    3402:	003a      	movs	r2, r7
    3404:	2020      	movs	r0, #32
    3406:	3401      	adds	r4, #1
    3408:	40e2      	lsrs	r2, r4
    340a:	1b04      	subs	r4, r0, r4
    340c:	40a7      	lsls	r7, r4
    340e:	003b      	movs	r3, r7
    3410:	1e5f      	subs	r7, r3, #1
    3412:	41bb      	sbcs	r3, r7
    3414:	2400      	movs	r4, #0
    3416:	4313      	orrs	r3, r2
    3418:	075a      	lsls	r2, r3, #29
    341a:	d004      	beq.n	3426 <__aeabi_fsub+0x9a>
    341c:	220f      	movs	r2, #15
    341e:	401a      	ands	r2, r3
    3420:	2a04      	cmp	r2, #4
    3422:	d000      	beq.n	3426 <__aeabi_fsub+0x9a>
    3424:	3304      	adds	r3, #4
    3426:	015a      	lsls	r2, r3, #5
    3428:	d527      	bpl.n	347a <__aeabi_fsub+0xee>
    342a:	3401      	adds	r4, #1
    342c:	2cff      	cmp	r4, #255	; 0xff
    342e:	d100      	bne.n	3432 <__aeabi_fsub+0xa6>
    3430:	e079      	b.n	3526 <__aeabi_fsub+0x19a>
    3432:	2201      	movs	r2, #1
    3434:	019b      	lsls	r3, r3, #6
    3436:	0a5b      	lsrs	r3, r3, #9
    3438:	b2e4      	uxtb	r4, r4
    343a:	402a      	ands	r2, r5
    343c:	025b      	lsls	r3, r3, #9
    343e:	05e4      	lsls	r4, r4, #23
    3440:	0a58      	lsrs	r0, r3, #9
    3442:	07d2      	lsls	r2, r2, #31
    3444:	4320      	orrs	r0, r4
    3446:	4310      	orrs	r0, r2
    3448:	bc1c      	pop	{r2, r3, r4}
    344a:	4690      	mov	r8, r2
    344c:	4699      	mov	r9, r3
    344e:	46a2      	mov	sl, r4
    3450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3452:	2cff      	cmp	r4, #255	; 0xff
    3454:	d0e0      	beq.n	3418 <__aeabi_fsub+0x8c>
    3456:	2180      	movs	r1, #128	; 0x80
    3458:	04c9      	lsls	r1, r1, #19
    345a:	430e      	orrs	r6, r1
    345c:	2a1b      	cmp	r2, #27
    345e:	dc7b      	bgt.n	3558 <__aeabi_fsub+0x1cc>
    3460:	0031      	movs	r1, r6
    3462:	2020      	movs	r0, #32
    3464:	40d1      	lsrs	r1, r2
    3466:	1a82      	subs	r2, r0, r2
    3468:	4096      	lsls	r6, r2
    346a:	1e72      	subs	r2, r6, #1
    346c:	4196      	sbcs	r6, r2
    346e:	430e      	orrs	r6, r1
    3470:	1b9b      	subs	r3, r3, r6
    3472:	015a      	lsls	r2, r3, #5
    3474:	d4ba      	bmi.n	33ec <__aeabi_fsub+0x60>
    3476:	075a      	lsls	r2, r3, #29
    3478:	d1d0      	bne.n	341c <__aeabi_fsub+0x90>
    347a:	2201      	movs	r2, #1
    347c:	08df      	lsrs	r7, r3, #3
    347e:	402a      	ands	r2, r5
    3480:	2cff      	cmp	r4, #255	; 0xff
    3482:	d133      	bne.n	34ec <__aeabi_fsub+0x160>
    3484:	2f00      	cmp	r7, #0
    3486:	d100      	bne.n	348a <__aeabi_fsub+0xfe>
    3488:	e0a8      	b.n	35dc <__aeabi_fsub+0x250>
    348a:	2380      	movs	r3, #128	; 0x80
    348c:	03db      	lsls	r3, r3, #15
    348e:	433b      	orrs	r3, r7
    3490:	025b      	lsls	r3, r3, #9
    3492:	0a5b      	lsrs	r3, r3, #9
    3494:	24ff      	movs	r4, #255	; 0xff
    3496:	e7d1      	b.n	343c <__aeabi_fsub+0xb0>
    3498:	1a21      	subs	r1, r4, r0
    349a:	2900      	cmp	r1, #0
    349c:	dd4c      	ble.n	3538 <__aeabi_fsub+0x1ac>
    349e:	2800      	cmp	r0, #0
    34a0:	d02a      	beq.n	34f8 <__aeabi_fsub+0x16c>
    34a2:	2cff      	cmp	r4, #255	; 0xff
    34a4:	d0b8      	beq.n	3418 <__aeabi_fsub+0x8c>
    34a6:	2080      	movs	r0, #128	; 0x80
    34a8:	04c0      	lsls	r0, r0, #19
    34aa:	4306      	orrs	r6, r0
    34ac:	291b      	cmp	r1, #27
    34ae:	dd00      	ble.n	34b2 <__aeabi_fsub+0x126>
    34b0:	e0af      	b.n	3612 <__aeabi_fsub+0x286>
    34b2:	0030      	movs	r0, r6
    34b4:	2720      	movs	r7, #32
    34b6:	40c8      	lsrs	r0, r1
    34b8:	1a79      	subs	r1, r7, r1
    34ba:	408e      	lsls	r6, r1
    34bc:	1e71      	subs	r1, r6, #1
    34be:	418e      	sbcs	r6, r1
    34c0:	4306      	orrs	r6, r0
    34c2:	199b      	adds	r3, r3, r6
    34c4:	0159      	lsls	r1, r3, #5
    34c6:	d5d6      	bpl.n	3476 <__aeabi_fsub+0xea>
    34c8:	3401      	adds	r4, #1
    34ca:	2cff      	cmp	r4, #255	; 0xff
    34cc:	d100      	bne.n	34d0 <__aeabi_fsub+0x144>
    34ce:	e085      	b.n	35dc <__aeabi_fsub+0x250>
    34d0:	2201      	movs	r2, #1
    34d2:	497a      	ldr	r1, [pc, #488]	; (36bc <__aeabi_fsub+0x330>)
    34d4:	401a      	ands	r2, r3
    34d6:	085b      	lsrs	r3, r3, #1
    34d8:	400b      	ands	r3, r1
    34da:	4313      	orrs	r3, r2
    34dc:	e79c      	b.n	3418 <__aeabi_fsub+0x8c>
    34de:	2e00      	cmp	r6, #0
    34e0:	d000      	beq.n	34e4 <__aeabi_fsub+0x158>
    34e2:	e770      	b.n	33c6 <__aeabi_fsub+0x3a>
    34e4:	e76b      	b.n	33be <__aeabi_fsub+0x32>
    34e6:	1e3b      	subs	r3, r7, #0
    34e8:	d1c5      	bne.n	3476 <__aeabi_fsub+0xea>
    34ea:	2200      	movs	r2, #0
    34ec:	027b      	lsls	r3, r7, #9
    34ee:	0a5b      	lsrs	r3, r3, #9
    34f0:	b2e4      	uxtb	r4, r4
    34f2:	e7a3      	b.n	343c <__aeabi_fsub+0xb0>
    34f4:	0014      	movs	r4, r2
    34f6:	e78f      	b.n	3418 <__aeabi_fsub+0x8c>
    34f8:	2e00      	cmp	r6, #0
    34fa:	d04d      	beq.n	3598 <__aeabi_fsub+0x20c>
    34fc:	1e48      	subs	r0, r1, #1
    34fe:	2800      	cmp	r0, #0
    3500:	d157      	bne.n	35b2 <__aeabi_fsub+0x226>
    3502:	199b      	adds	r3, r3, r6
    3504:	2401      	movs	r4, #1
    3506:	015a      	lsls	r2, r3, #5
    3508:	d5b5      	bpl.n	3476 <__aeabi_fsub+0xea>
    350a:	2402      	movs	r4, #2
    350c:	e7e0      	b.n	34d0 <__aeabi_fsub+0x144>
    350e:	2a00      	cmp	r2, #0
    3510:	d125      	bne.n	355e <__aeabi_fsub+0x1d2>
    3512:	1c62      	adds	r2, r4, #1
    3514:	b2d2      	uxtb	r2, r2
    3516:	2a01      	cmp	r2, #1
    3518:	dd72      	ble.n	3600 <__aeabi_fsub+0x274>
    351a:	1b9f      	subs	r7, r3, r6
    351c:	017a      	lsls	r2, r7, #5
    351e:	d535      	bpl.n	358c <__aeabi_fsub+0x200>
    3520:	1af7      	subs	r7, r6, r3
    3522:	000d      	movs	r5, r1
    3524:	e764      	b.n	33f0 <__aeabi_fsub+0x64>
    3526:	2201      	movs	r2, #1
    3528:	2300      	movs	r3, #0
    352a:	402a      	ands	r2, r5
    352c:	e786      	b.n	343c <__aeabi_fsub+0xb0>
    352e:	003b      	movs	r3, r7
    3530:	4a63      	ldr	r2, [pc, #396]	; (36c0 <__aeabi_fsub+0x334>)
    3532:	1a24      	subs	r4, r4, r0
    3534:	4013      	ands	r3, r2
    3536:	e76f      	b.n	3418 <__aeabi_fsub+0x8c>
    3538:	2900      	cmp	r1, #0
    353a:	d16c      	bne.n	3616 <__aeabi_fsub+0x28a>
    353c:	1c61      	adds	r1, r4, #1
    353e:	b2c8      	uxtb	r0, r1
    3540:	2801      	cmp	r0, #1
    3542:	dd4e      	ble.n	35e2 <__aeabi_fsub+0x256>
    3544:	29ff      	cmp	r1, #255	; 0xff
    3546:	d049      	beq.n	35dc <__aeabi_fsub+0x250>
    3548:	199b      	adds	r3, r3, r6
    354a:	085b      	lsrs	r3, r3, #1
    354c:	000c      	movs	r4, r1
    354e:	e763      	b.n	3418 <__aeabi_fsub+0x8c>
    3550:	2aff      	cmp	r2, #255	; 0xff
    3552:	d041      	beq.n	35d8 <__aeabi_fsub+0x24c>
    3554:	000a      	movs	r2, r1
    3556:	e781      	b.n	345c <__aeabi_fsub+0xd0>
    3558:	2601      	movs	r6, #1
    355a:	1b9b      	subs	r3, r3, r6
    355c:	e789      	b.n	3472 <__aeabi_fsub+0xe6>
    355e:	2c00      	cmp	r4, #0
    3560:	d01c      	beq.n	359c <__aeabi_fsub+0x210>
    3562:	28ff      	cmp	r0, #255	; 0xff
    3564:	d021      	beq.n	35aa <__aeabi_fsub+0x21e>
    3566:	2480      	movs	r4, #128	; 0x80
    3568:	04e4      	lsls	r4, r4, #19
    356a:	4252      	negs	r2, r2
    356c:	4323      	orrs	r3, r4
    356e:	2a1b      	cmp	r2, #27
    3570:	dd00      	ble.n	3574 <__aeabi_fsub+0x1e8>
    3572:	e096      	b.n	36a2 <__aeabi_fsub+0x316>
    3574:	001c      	movs	r4, r3
    3576:	2520      	movs	r5, #32
    3578:	40d4      	lsrs	r4, r2
    357a:	1aaa      	subs	r2, r5, r2
    357c:	4093      	lsls	r3, r2
    357e:	1e5a      	subs	r2, r3, #1
    3580:	4193      	sbcs	r3, r2
    3582:	4323      	orrs	r3, r4
    3584:	1af3      	subs	r3, r6, r3
    3586:	0004      	movs	r4, r0
    3588:	000d      	movs	r5, r1
    358a:	e72d      	b.n	33e8 <__aeabi_fsub+0x5c>
    358c:	2f00      	cmp	r7, #0
    358e:	d000      	beq.n	3592 <__aeabi_fsub+0x206>
    3590:	e72e      	b.n	33f0 <__aeabi_fsub+0x64>
    3592:	2200      	movs	r2, #0
    3594:	2400      	movs	r4, #0
    3596:	e7a9      	b.n	34ec <__aeabi_fsub+0x160>
    3598:	000c      	movs	r4, r1
    359a:	e73d      	b.n	3418 <__aeabi_fsub+0x8c>
    359c:	2b00      	cmp	r3, #0
    359e:	d058      	beq.n	3652 <__aeabi_fsub+0x2c6>
    35a0:	43d2      	mvns	r2, r2
    35a2:	2a00      	cmp	r2, #0
    35a4:	d0ee      	beq.n	3584 <__aeabi_fsub+0x1f8>
    35a6:	28ff      	cmp	r0, #255	; 0xff
    35a8:	d1e1      	bne.n	356e <__aeabi_fsub+0x1e2>
    35aa:	0033      	movs	r3, r6
    35ac:	24ff      	movs	r4, #255	; 0xff
    35ae:	000d      	movs	r5, r1
    35b0:	e732      	b.n	3418 <__aeabi_fsub+0x8c>
    35b2:	29ff      	cmp	r1, #255	; 0xff
    35b4:	d010      	beq.n	35d8 <__aeabi_fsub+0x24c>
    35b6:	0001      	movs	r1, r0
    35b8:	e778      	b.n	34ac <__aeabi_fsub+0x120>
    35ba:	2b00      	cmp	r3, #0
    35bc:	d06e      	beq.n	369c <__aeabi_fsub+0x310>
    35be:	24ff      	movs	r4, #255	; 0xff
    35c0:	2e00      	cmp	r6, #0
    35c2:	d100      	bne.n	35c6 <__aeabi_fsub+0x23a>
    35c4:	e728      	b.n	3418 <__aeabi_fsub+0x8c>
    35c6:	2280      	movs	r2, #128	; 0x80
    35c8:	4651      	mov	r1, sl
    35ca:	03d2      	lsls	r2, r2, #15
    35cc:	4211      	tst	r1, r2
    35ce:	d003      	beq.n	35d8 <__aeabi_fsub+0x24c>
    35d0:	4661      	mov	r1, ip
    35d2:	4211      	tst	r1, r2
    35d4:	d100      	bne.n	35d8 <__aeabi_fsub+0x24c>
    35d6:	0033      	movs	r3, r6
    35d8:	24ff      	movs	r4, #255	; 0xff
    35da:	e71d      	b.n	3418 <__aeabi_fsub+0x8c>
    35dc:	24ff      	movs	r4, #255	; 0xff
    35de:	2300      	movs	r3, #0
    35e0:	e72c      	b.n	343c <__aeabi_fsub+0xb0>
    35e2:	2c00      	cmp	r4, #0
    35e4:	d1e9      	bne.n	35ba <__aeabi_fsub+0x22e>
    35e6:	2b00      	cmp	r3, #0
    35e8:	d063      	beq.n	36b2 <__aeabi_fsub+0x326>
    35ea:	2e00      	cmp	r6, #0
    35ec:	d100      	bne.n	35f0 <__aeabi_fsub+0x264>
    35ee:	e713      	b.n	3418 <__aeabi_fsub+0x8c>
    35f0:	199b      	adds	r3, r3, r6
    35f2:	015a      	lsls	r2, r3, #5
    35f4:	d400      	bmi.n	35f8 <__aeabi_fsub+0x26c>
    35f6:	e73e      	b.n	3476 <__aeabi_fsub+0xea>
    35f8:	4a31      	ldr	r2, [pc, #196]	; (36c0 <__aeabi_fsub+0x334>)
    35fa:	000c      	movs	r4, r1
    35fc:	4013      	ands	r3, r2
    35fe:	e70b      	b.n	3418 <__aeabi_fsub+0x8c>
    3600:	2c00      	cmp	r4, #0
    3602:	d11e      	bne.n	3642 <__aeabi_fsub+0x2b6>
    3604:	2b00      	cmp	r3, #0
    3606:	d12f      	bne.n	3668 <__aeabi_fsub+0x2dc>
    3608:	2e00      	cmp	r6, #0
    360a:	d04f      	beq.n	36ac <__aeabi_fsub+0x320>
    360c:	0033      	movs	r3, r6
    360e:	000d      	movs	r5, r1
    3610:	e702      	b.n	3418 <__aeabi_fsub+0x8c>
    3612:	2601      	movs	r6, #1
    3614:	e755      	b.n	34c2 <__aeabi_fsub+0x136>
    3616:	2c00      	cmp	r4, #0
    3618:	d11f      	bne.n	365a <__aeabi_fsub+0x2ce>
    361a:	2b00      	cmp	r3, #0
    361c:	d043      	beq.n	36a6 <__aeabi_fsub+0x31a>
    361e:	43c9      	mvns	r1, r1
    3620:	2900      	cmp	r1, #0
    3622:	d00b      	beq.n	363c <__aeabi_fsub+0x2b0>
    3624:	28ff      	cmp	r0, #255	; 0xff
    3626:	d039      	beq.n	369c <__aeabi_fsub+0x310>
    3628:	291b      	cmp	r1, #27
    362a:	dc44      	bgt.n	36b6 <__aeabi_fsub+0x32a>
    362c:	001c      	movs	r4, r3
    362e:	2720      	movs	r7, #32
    3630:	40cc      	lsrs	r4, r1
    3632:	1a79      	subs	r1, r7, r1
    3634:	408b      	lsls	r3, r1
    3636:	1e59      	subs	r1, r3, #1
    3638:	418b      	sbcs	r3, r1
    363a:	4323      	orrs	r3, r4
    363c:	199b      	adds	r3, r3, r6
    363e:	0004      	movs	r4, r0
    3640:	e740      	b.n	34c4 <__aeabi_fsub+0x138>
    3642:	2b00      	cmp	r3, #0
    3644:	d11a      	bne.n	367c <__aeabi_fsub+0x2f0>
    3646:	2e00      	cmp	r6, #0
    3648:	d124      	bne.n	3694 <__aeabi_fsub+0x308>
    364a:	2780      	movs	r7, #128	; 0x80
    364c:	2200      	movs	r2, #0
    364e:	03ff      	lsls	r7, r7, #15
    3650:	e71b      	b.n	348a <__aeabi_fsub+0xfe>
    3652:	0033      	movs	r3, r6
    3654:	0004      	movs	r4, r0
    3656:	000d      	movs	r5, r1
    3658:	e6de      	b.n	3418 <__aeabi_fsub+0x8c>
    365a:	28ff      	cmp	r0, #255	; 0xff
    365c:	d01e      	beq.n	369c <__aeabi_fsub+0x310>
    365e:	2480      	movs	r4, #128	; 0x80
    3660:	04e4      	lsls	r4, r4, #19
    3662:	4249      	negs	r1, r1
    3664:	4323      	orrs	r3, r4
    3666:	e7df      	b.n	3628 <__aeabi_fsub+0x29c>
    3668:	2e00      	cmp	r6, #0
    366a:	d100      	bne.n	366e <__aeabi_fsub+0x2e2>
    366c:	e6d4      	b.n	3418 <__aeabi_fsub+0x8c>
    366e:	1b9f      	subs	r7, r3, r6
    3670:	017a      	lsls	r2, r7, #5
    3672:	d400      	bmi.n	3676 <__aeabi_fsub+0x2ea>
    3674:	e737      	b.n	34e6 <__aeabi_fsub+0x15a>
    3676:	1af3      	subs	r3, r6, r3
    3678:	000d      	movs	r5, r1
    367a:	e6cd      	b.n	3418 <__aeabi_fsub+0x8c>
    367c:	24ff      	movs	r4, #255	; 0xff
    367e:	2e00      	cmp	r6, #0
    3680:	d100      	bne.n	3684 <__aeabi_fsub+0x2f8>
    3682:	e6c9      	b.n	3418 <__aeabi_fsub+0x8c>
    3684:	2280      	movs	r2, #128	; 0x80
    3686:	4650      	mov	r0, sl
    3688:	03d2      	lsls	r2, r2, #15
    368a:	4210      	tst	r0, r2
    368c:	d0a4      	beq.n	35d8 <__aeabi_fsub+0x24c>
    368e:	4660      	mov	r0, ip
    3690:	4210      	tst	r0, r2
    3692:	d1a1      	bne.n	35d8 <__aeabi_fsub+0x24c>
    3694:	0033      	movs	r3, r6
    3696:	000d      	movs	r5, r1
    3698:	24ff      	movs	r4, #255	; 0xff
    369a:	e6bd      	b.n	3418 <__aeabi_fsub+0x8c>
    369c:	0033      	movs	r3, r6
    369e:	24ff      	movs	r4, #255	; 0xff
    36a0:	e6ba      	b.n	3418 <__aeabi_fsub+0x8c>
    36a2:	2301      	movs	r3, #1
    36a4:	e76e      	b.n	3584 <__aeabi_fsub+0x1f8>
    36a6:	0033      	movs	r3, r6
    36a8:	0004      	movs	r4, r0
    36aa:	e6b5      	b.n	3418 <__aeabi_fsub+0x8c>
    36ac:	2700      	movs	r7, #0
    36ae:	2200      	movs	r2, #0
    36b0:	e71c      	b.n	34ec <__aeabi_fsub+0x160>
    36b2:	0033      	movs	r3, r6
    36b4:	e6b0      	b.n	3418 <__aeabi_fsub+0x8c>
    36b6:	2301      	movs	r3, #1
    36b8:	e7c0      	b.n	363c <__aeabi_fsub+0x2b0>
    36ba:	46c0      	nop			; (mov r8, r8)
    36bc:	7dffffff 	.word	0x7dffffff
    36c0:	fbffffff 	.word	0xfbffffff

000036c4 <__aeabi_f2iz>:
    36c4:	0241      	lsls	r1, r0, #9
    36c6:	0043      	lsls	r3, r0, #1
    36c8:	0fc2      	lsrs	r2, r0, #31
    36ca:	0a49      	lsrs	r1, r1, #9
    36cc:	0e1b      	lsrs	r3, r3, #24
    36ce:	2000      	movs	r0, #0
    36d0:	2b7e      	cmp	r3, #126	; 0x7e
    36d2:	dd0d      	ble.n	36f0 <__aeabi_f2iz+0x2c>
    36d4:	2b9d      	cmp	r3, #157	; 0x9d
    36d6:	dc0c      	bgt.n	36f2 <__aeabi_f2iz+0x2e>
    36d8:	2080      	movs	r0, #128	; 0x80
    36da:	0400      	lsls	r0, r0, #16
    36dc:	4301      	orrs	r1, r0
    36de:	2b95      	cmp	r3, #149	; 0x95
    36e0:	dc0a      	bgt.n	36f8 <__aeabi_f2iz+0x34>
    36e2:	2096      	movs	r0, #150	; 0x96
    36e4:	1ac3      	subs	r3, r0, r3
    36e6:	40d9      	lsrs	r1, r3
    36e8:	4248      	negs	r0, r1
    36ea:	2a00      	cmp	r2, #0
    36ec:	d100      	bne.n	36f0 <__aeabi_f2iz+0x2c>
    36ee:	0008      	movs	r0, r1
    36f0:	4770      	bx	lr
    36f2:	4b03      	ldr	r3, [pc, #12]	; (3700 <__aeabi_f2iz+0x3c>)
    36f4:	18d0      	adds	r0, r2, r3
    36f6:	e7fb      	b.n	36f0 <__aeabi_f2iz+0x2c>
    36f8:	3b96      	subs	r3, #150	; 0x96
    36fa:	4099      	lsls	r1, r3
    36fc:	e7f4      	b.n	36e8 <__aeabi_f2iz+0x24>
    36fe:	46c0      	nop			; (mov r8, r8)
    3700:	7fffffff 	.word	0x7fffffff

00003704 <__aeabi_i2f>:
    3704:	b570      	push	{r4, r5, r6, lr}
    3706:	2800      	cmp	r0, #0
    3708:	d030      	beq.n	376c <__aeabi_i2f+0x68>
    370a:	17c3      	asrs	r3, r0, #31
    370c:	18c4      	adds	r4, r0, r3
    370e:	405c      	eors	r4, r3
    3710:	0fc5      	lsrs	r5, r0, #31
    3712:	0020      	movs	r0, r4
    3714:	f001 fd46 	bl	51a4 <__clzsi2>
    3718:	239e      	movs	r3, #158	; 0x9e
    371a:	1a1b      	subs	r3, r3, r0
    371c:	2b96      	cmp	r3, #150	; 0x96
    371e:	dc0d      	bgt.n	373c <__aeabi_i2f+0x38>
    3720:	2296      	movs	r2, #150	; 0x96
    3722:	1ad2      	subs	r2, r2, r3
    3724:	4094      	lsls	r4, r2
    3726:	002a      	movs	r2, r5
    3728:	0264      	lsls	r4, r4, #9
    372a:	0a64      	lsrs	r4, r4, #9
    372c:	b2db      	uxtb	r3, r3
    372e:	0264      	lsls	r4, r4, #9
    3730:	05db      	lsls	r3, r3, #23
    3732:	0a60      	lsrs	r0, r4, #9
    3734:	07d2      	lsls	r2, r2, #31
    3736:	4318      	orrs	r0, r3
    3738:	4310      	orrs	r0, r2
    373a:	bd70      	pop	{r4, r5, r6, pc}
    373c:	2b99      	cmp	r3, #153	; 0x99
    373e:	dc19      	bgt.n	3774 <__aeabi_i2f+0x70>
    3740:	2299      	movs	r2, #153	; 0x99
    3742:	1ad2      	subs	r2, r2, r3
    3744:	2a00      	cmp	r2, #0
    3746:	dd29      	ble.n	379c <__aeabi_i2f+0x98>
    3748:	4094      	lsls	r4, r2
    374a:	0022      	movs	r2, r4
    374c:	4c14      	ldr	r4, [pc, #80]	; (37a0 <__aeabi_i2f+0x9c>)
    374e:	4014      	ands	r4, r2
    3750:	0751      	lsls	r1, r2, #29
    3752:	d004      	beq.n	375e <__aeabi_i2f+0x5a>
    3754:	210f      	movs	r1, #15
    3756:	400a      	ands	r2, r1
    3758:	2a04      	cmp	r2, #4
    375a:	d000      	beq.n	375e <__aeabi_i2f+0x5a>
    375c:	3404      	adds	r4, #4
    375e:	0162      	lsls	r2, r4, #5
    3760:	d413      	bmi.n	378a <__aeabi_i2f+0x86>
    3762:	01a4      	lsls	r4, r4, #6
    3764:	0a64      	lsrs	r4, r4, #9
    3766:	b2db      	uxtb	r3, r3
    3768:	002a      	movs	r2, r5
    376a:	e7e0      	b.n	372e <__aeabi_i2f+0x2a>
    376c:	2200      	movs	r2, #0
    376e:	2300      	movs	r3, #0
    3770:	2400      	movs	r4, #0
    3772:	e7dc      	b.n	372e <__aeabi_i2f+0x2a>
    3774:	2205      	movs	r2, #5
    3776:	0021      	movs	r1, r4
    3778:	1a12      	subs	r2, r2, r0
    377a:	40d1      	lsrs	r1, r2
    377c:	22b9      	movs	r2, #185	; 0xb9
    377e:	1ad2      	subs	r2, r2, r3
    3780:	4094      	lsls	r4, r2
    3782:	1e62      	subs	r2, r4, #1
    3784:	4194      	sbcs	r4, r2
    3786:	430c      	orrs	r4, r1
    3788:	e7da      	b.n	3740 <__aeabi_i2f+0x3c>
    378a:	4b05      	ldr	r3, [pc, #20]	; (37a0 <__aeabi_i2f+0x9c>)
    378c:	002a      	movs	r2, r5
    378e:	401c      	ands	r4, r3
    3790:	239f      	movs	r3, #159	; 0x9f
    3792:	01a4      	lsls	r4, r4, #6
    3794:	1a1b      	subs	r3, r3, r0
    3796:	0a64      	lsrs	r4, r4, #9
    3798:	b2db      	uxtb	r3, r3
    379a:	e7c8      	b.n	372e <__aeabi_i2f+0x2a>
    379c:	0022      	movs	r2, r4
    379e:	e7d5      	b.n	374c <__aeabi_i2f+0x48>
    37a0:	fbffffff 	.word	0xfbffffff

000037a4 <__aeabi_dadd>:
    37a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37a6:	4645      	mov	r5, r8
    37a8:	46de      	mov	lr, fp
    37aa:	4657      	mov	r7, sl
    37ac:	464e      	mov	r6, r9
    37ae:	030c      	lsls	r4, r1, #12
    37b0:	b5e0      	push	{r5, r6, r7, lr}
    37b2:	004e      	lsls	r6, r1, #1
    37b4:	0fc9      	lsrs	r1, r1, #31
    37b6:	4688      	mov	r8, r1
    37b8:	000d      	movs	r5, r1
    37ba:	0a61      	lsrs	r1, r4, #9
    37bc:	0f44      	lsrs	r4, r0, #29
    37be:	430c      	orrs	r4, r1
    37c0:	00c7      	lsls	r7, r0, #3
    37c2:	0319      	lsls	r1, r3, #12
    37c4:	0058      	lsls	r0, r3, #1
    37c6:	0fdb      	lsrs	r3, r3, #31
    37c8:	469b      	mov	fp, r3
    37ca:	0a4b      	lsrs	r3, r1, #9
    37cc:	0f51      	lsrs	r1, r2, #29
    37ce:	430b      	orrs	r3, r1
    37d0:	0d76      	lsrs	r6, r6, #21
    37d2:	0d40      	lsrs	r0, r0, #21
    37d4:	0019      	movs	r1, r3
    37d6:	00d2      	lsls	r2, r2, #3
    37d8:	45d8      	cmp	r8, fp
    37da:	d100      	bne.n	37de <__aeabi_dadd+0x3a>
    37dc:	e0ae      	b.n	393c <__aeabi_dadd+0x198>
    37de:	1a35      	subs	r5, r6, r0
    37e0:	2d00      	cmp	r5, #0
    37e2:	dc00      	bgt.n	37e6 <__aeabi_dadd+0x42>
    37e4:	e0f6      	b.n	39d4 <__aeabi_dadd+0x230>
    37e6:	2800      	cmp	r0, #0
    37e8:	d10f      	bne.n	380a <__aeabi_dadd+0x66>
    37ea:	4313      	orrs	r3, r2
    37ec:	d100      	bne.n	37f0 <__aeabi_dadd+0x4c>
    37ee:	e0db      	b.n	39a8 <__aeabi_dadd+0x204>
    37f0:	1e6b      	subs	r3, r5, #1
    37f2:	2b00      	cmp	r3, #0
    37f4:	d000      	beq.n	37f8 <__aeabi_dadd+0x54>
    37f6:	e137      	b.n	3a68 <__aeabi_dadd+0x2c4>
    37f8:	1aba      	subs	r2, r7, r2
    37fa:	4297      	cmp	r7, r2
    37fc:	41bf      	sbcs	r7, r7
    37fe:	1a64      	subs	r4, r4, r1
    3800:	427f      	negs	r7, r7
    3802:	1be4      	subs	r4, r4, r7
    3804:	2601      	movs	r6, #1
    3806:	0017      	movs	r7, r2
    3808:	e024      	b.n	3854 <__aeabi_dadd+0xb0>
    380a:	4bc6      	ldr	r3, [pc, #792]	; (3b24 <__aeabi_dadd+0x380>)
    380c:	429e      	cmp	r6, r3
    380e:	d04d      	beq.n	38ac <__aeabi_dadd+0x108>
    3810:	2380      	movs	r3, #128	; 0x80
    3812:	041b      	lsls	r3, r3, #16
    3814:	4319      	orrs	r1, r3
    3816:	2d38      	cmp	r5, #56	; 0x38
    3818:	dd00      	ble.n	381c <__aeabi_dadd+0x78>
    381a:	e107      	b.n	3a2c <__aeabi_dadd+0x288>
    381c:	2d1f      	cmp	r5, #31
    381e:	dd00      	ble.n	3822 <__aeabi_dadd+0x7e>
    3820:	e138      	b.n	3a94 <__aeabi_dadd+0x2f0>
    3822:	2020      	movs	r0, #32
    3824:	1b43      	subs	r3, r0, r5
    3826:	469a      	mov	sl, r3
    3828:	000b      	movs	r3, r1
    382a:	4650      	mov	r0, sl
    382c:	4083      	lsls	r3, r0
    382e:	4699      	mov	r9, r3
    3830:	0013      	movs	r3, r2
    3832:	4648      	mov	r0, r9
    3834:	40eb      	lsrs	r3, r5
    3836:	4318      	orrs	r0, r3
    3838:	0003      	movs	r3, r0
    383a:	4650      	mov	r0, sl
    383c:	4082      	lsls	r2, r0
    383e:	1e50      	subs	r0, r2, #1
    3840:	4182      	sbcs	r2, r0
    3842:	40e9      	lsrs	r1, r5
    3844:	431a      	orrs	r2, r3
    3846:	1aba      	subs	r2, r7, r2
    3848:	1a61      	subs	r1, r4, r1
    384a:	4297      	cmp	r7, r2
    384c:	41a4      	sbcs	r4, r4
    384e:	0017      	movs	r7, r2
    3850:	4264      	negs	r4, r4
    3852:	1b0c      	subs	r4, r1, r4
    3854:	0223      	lsls	r3, r4, #8
    3856:	d562      	bpl.n	391e <__aeabi_dadd+0x17a>
    3858:	0264      	lsls	r4, r4, #9
    385a:	0a65      	lsrs	r5, r4, #9
    385c:	2d00      	cmp	r5, #0
    385e:	d100      	bne.n	3862 <__aeabi_dadd+0xbe>
    3860:	e0df      	b.n	3a22 <__aeabi_dadd+0x27e>
    3862:	0028      	movs	r0, r5
    3864:	f001 fc9e 	bl	51a4 <__clzsi2>
    3868:	0003      	movs	r3, r0
    386a:	3b08      	subs	r3, #8
    386c:	2b1f      	cmp	r3, #31
    386e:	dd00      	ble.n	3872 <__aeabi_dadd+0xce>
    3870:	e0d2      	b.n	3a18 <__aeabi_dadd+0x274>
    3872:	2220      	movs	r2, #32
    3874:	003c      	movs	r4, r7
    3876:	1ad2      	subs	r2, r2, r3
    3878:	409d      	lsls	r5, r3
    387a:	40d4      	lsrs	r4, r2
    387c:	409f      	lsls	r7, r3
    387e:	4325      	orrs	r5, r4
    3880:	429e      	cmp	r6, r3
    3882:	dd00      	ble.n	3886 <__aeabi_dadd+0xe2>
    3884:	e0c4      	b.n	3a10 <__aeabi_dadd+0x26c>
    3886:	1b9e      	subs	r6, r3, r6
    3888:	1c73      	adds	r3, r6, #1
    388a:	2b1f      	cmp	r3, #31
    388c:	dd00      	ble.n	3890 <__aeabi_dadd+0xec>
    388e:	e0f1      	b.n	3a74 <__aeabi_dadd+0x2d0>
    3890:	2220      	movs	r2, #32
    3892:	0038      	movs	r0, r7
    3894:	0029      	movs	r1, r5
    3896:	1ad2      	subs	r2, r2, r3
    3898:	40d8      	lsrs	r0, r3
    389a:	4091      	lsls	r1, r2
    389c:	4097      	lsls	r7, r2
    389e:	002c      	movs	r4, r5
    38a0:	4301      	orrs	r1, r0
    38a2:	1e78      	subs	r0, r7, #1
    38a4:	4187      	sbcs	r7, r0
    38a6:	40dc      	lsrs	r4, r3
    38a8:	2600      	movs	r6, #0
    38aa:	430f      	orrs	r7, r1
    38ac:	077b      	lsls	r3, r7, #29
    38ae:	d009      	beq.n	38c4 <__aeabi_dadd+0x120>
    38b0:	230f      	movs	r3, #15
    38b2:	403b      	ands	r3, r7
    38b4:	2b04      	cmp	r3, #4
    38b6:	d005      	beq.n	38c4 <__aeabi_dadd+0x120>
    38b8:	1d3b      	adds	r3, r7, #4
    38ba:	42bb      	cmp	r3, r7
    38bc:	41bf      	sbcs	r7, r7
    38be:	427f      	negs	r7, r7
    38c0:	19e4      	adds	r4, r4, r7
    38c2:	001f      	movs	r7, r3
    38c4:	0223      	lsls	r3, r4, #8
    38c6:	d52c      	bpl.n	3922 <__aeabi_dadd+0x17e>
    38c8:	4b96      	ldr	r3, [pc, #600]	; (3b24 <__aeabi_dadd+0x380>)
    38ca:	3601      	adds	r6, #1
    38cc:	429e      	cmp	r6, r3
    38ce:	d100      	bne.n	38d2 <__aeabi_dadd+0x12e>
    38d0:	e09a      	b.n	3a08 <__aeabi_dadd+0x264>
    38d2:	4645      	mov	r5, r8
    38d4:	4b94      	ldr	r3, [pc, #592]	; (3b28 <__aeabi_dadd+0x384>)
    38d6:	08ff      	lsrs	r7, r7, #3
    38d8:	401c      	ands	r4, r3
    38da:	0760      	lsls	r0, r4, #29
    38dc:	0576      	lsls	r6, r6, #21
    38de:	0264      	lsls	r4, r4, #9
    38e0:	4307      	orrs	r7, r0
    38e2:	0b24      	lsrs	r4, r4, #12
    38e4:	0d76      	lsrs	r6, r6, #21
    38e6:	2100      	movs	r1, #0
    38e8:	0324      	lsls	r4, r4, #12
    38ea:	0b23      	lsrs	r3, r4, #12
    38ec:	0d0c      	lsrs	r4, r1, #20
    38ee:	4a8f      	ldr	r2, [pc, #572]	; (3b2c <__aeabi_dadd+0x388>)
    38f0:	0524      	lsls	r4, r4, #20
    38f2:	431c      	orrs	r4, r3
    38f4:	4014      	ands	r4, r2
    38f6:	0533      	lsls	r3, r6, #20
    38f8:	4323      	orrs	r3, r4
    38fa:	005b      	lsls	r3, r3, #1
    38fc:	07ed      	lsls	r5, r5, #31
    38fe:	085b      	lsrs	r3, r3, #1
    3900:	432b      	orrs	r3, r5
    3902:	0038      	movs	r0, r7
    3904:	0019      	movs	r1, r3
    3906:	bc3c      	pop	{r2, r3, r4, r5}
    3908:	4690      	mov	r8, r2
    390a:	4699      	mov	r9, r3
    390c:	46a2      	mov	sl, r4
    390e:	46ab      	mov	fp, r5
    3910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3912:	4664      	mov	r4, ip
    3914:	4304      	orrs	r4, r0
    3916:	d100      	bne.n	391a <__aeabi_dadd+0x176>
    3918:	e211      	b.n	3d3e <__aeabi_dadd+0x59a>
    391a:	0004      	movs	r4, r0
    391c:	4667      	mov	r7, ip
    391e:	077b      	lsls	r3, r7, #29
    3920:	d1c6      	bne.n	38b0 <__aeabi_dadd+0x10c>
    3922:	4645      	mov	r5, r8
    3924:	0760      	lsls	r0, r4, #29
    3926:	08ff      	lsrs	r7, r7, #3
    3928:	4307      	orrs	r7, r0
    392a:	08e4      	lsrs	r4, r4, #3
    392c:	4b7d      	ldr	r3, [pc, #500]	; (3b24 <__aeabi_dadd+0x380>)
    392e:	429e      	cmp	r6, r3
    3930:	d030      	beq.n	3994 <__aeabi_dadd+0x1f0>
    3932:	0324      	lsls	r4, r4, #12
    3934:	0576      	lsls	r6, r6, #21
    3936:	0b24      	lsrs	r4, r4, #12
    3938:	0d76      	lsrs	r6, r6, #21
    393a:	e7d4      	b.n	38e6 <__aeabi_dadd+0x142>
    393c:	1a33      	subs	r3, r6, r0
    393e:	469a      	mov	sl, r3
    3940:	2b00      	cmp	r3, #0
    3942:	dd78      	ble.n	3a36 <__aeabi_dadd+0x292>
    3944:	2800      	cmp	r0, #0
    3946:	d031      	beq.n	39ac <__aeabi_dadd+0x208>
    3948:	4876      	ldr	r0, [pc, #472]	; (3b24 <__aeabi_dadd+0x380>)
    394a:	4286      	cmp	r6, r0
    394c:	d0ae      	beq.n	38ac <__aeabi_dadd+0x108>
    394e:	2080      	movs	r0, #128	; 0x80
    3950:	0400      	lsls	r0, r0, #16
    3952:	4301      	orrs	r1, r0
    3954:	4653      	mov	r3, sl
    3956:	2b38      	cmp	r3, #56	; 0x38
    3958:	dc00      	bgt.n	395c <__aeabi_dadd+0x1b8>
    395a:	e0e9      	b.n	3b30 <__aeabi_dadd+0x38c>
    395c:	430a      	orrs	r2, r1
    395e:	1e51      	subs	r1, r2, #1
    3960:	418a      	sbcs	r2, r1
    3962:	2100      	movs	r1, #0
    3964:	19d2      	adds	r2, r2, r7
    3966:	42ba      	cmp	r2, r7
    3968:	41bf      	sbcs	r7, r7
    396a:	1909      	adds	r1, r1, r4
    396c:	427c      	negs	r4, r7
    396e:	0017      	movs	r7, r2
    3970:	190c      	adds	r4, r1, r4
    3972:	0223      	lsls	r3, r4, #8
    3974:	d5d3      	bpl.n	391e <__aeabi_dadd+0x17a>
    3976:	4b6b      	ldr	r3, [pc, #428]	; (3b24 <__aeabi_dadd+0x380>)
    3978:	3601      	adds	r6, #1
    397a:	429e      	cmp	r6, r3
    397c:	d100      	bne.n	3980 <__aeabi_dadd+0x1dc>
    397e:	e13a      	b.n	3bf6 <__aeabi_dadd+0x452>
    3980:	2001      	movs	r0, #1
    3982:	4b69      	ldr	r3, [pc, #420]	; (3b28 <__aeabi_dadd+0x384>)
    3984:	401c      	ands	r4, r3
    3986:	087b      	lsrs	r3, r7, #1
    3988:	4007      	ands	r7, r0
    398a:	431f      	orrs	r7, r3
    398c:	07e0      	lsls	r0, r4, #31
    398e:	4307      	orrs	r7, r0
    3990:	0864      	lsrs	r4, r4, #1
    3992:	e78b      	b.n	38ac <__aeabi_dadd+0x108>
    3994:	0023      	movs	r3, r4
    3996:	433b      	orrs	r3, r7
    3998:	d100      	bne.n	399c <__aeabi_dadd+0x1f8>
    399a:	e1cb      	b.n	3d34 <__aeabi_dadd+0x590>
    399c:	2280      	movs	r2, #128	; 0x80
    399e:	0312      	lsls	r2, r2, #12
    39a0:	4314      	orrs	r4, r2
    39a2:	0324      	lsls	r4, r4, #12
    39a4:	0b24      	lsrs	r4, r4, #12
    39a6:	e79e      	b.n	38e6 <__aeabi_dadd+0x142>
    39a8:	002e      	movs	r6, r5
    39aa:	e77f      	b.n	38ac <__aeabi_dadd+0x108>
    39ac:	0008      	movs	r0, r1
    39ae:	4310      	orrs	r0, r2
    39b0:	d100      	bne.n	39b4 <__aeabi_dadd+0x210>
    39b2:	e0b4      	b.n	3b1e <__aeabi_dadd+0x37a>
    39b4:	1e58      	subs	r0, r3, #1
    39b6:	2800      	cmp	r0, #0
    39b8:	d000      	beq.n	39bc <__aeabi_dadd+0x218>
    39ba:	e0de      	b.n	3b7a <__aeabi_dadd+0x3d6>
    39bc:	18ba      	adds	r2, r7, r2
    39be:	42ba      	cmp	r2, r7
    39c0:	419b      	sbcs	r3, r3
    39c2:	1864      	adds	r4, r4, r1
    39c4:	425b      	negs	r3, r3
    39c6:	18e4      	adds	r4, r4, r3
    39c8:	0017      	movs	r7, r2
    39ca:	2601      	movs	r6, #1
    39cc:	0223      	lsls	r3, r4, #8
    39ce:	d5a6      	bpl.n	391e <__aeabi_dadd+0x17a>
    39d0:	2602      	movs	r6, #2
    39d2:	e7d5      	b.n	3980 <__aeabi_dadd+0x1dc>
    39d4:	2d00      	cmp	r5, #0
    39d6:	d16e      	bne.n	3ab6 <__aeabi_dadd+0x312>
    39d8:	1c70      	adds	r0, r6, #1
    39da:	0540      	lsls	r0, r0, #21
    39dc:	0d40      	lsrs	r0, r0, #21
    39de:	2801      	cmp	r0, #1
    39e0:	dc00      	bgt.n	39e4 <__aeabi_dadd+0x240>
    39e2:	e0f9      	b.n	3bd8 <__aeabi_dadd+0x434>
    39e4:	1ab8      	subs	r0, r7, r2
    39e6:	4684      	mov	ip, r0
    39e8:	4287      	cmp	r7, r0
    39ea:	4180      	sbcs	r0, r0
    39ec:	1ae5      	subs	r5, r4, r3
    39ee:	4240      	negs	r0, r0
    39f0:	1a2d      	subs	r5, r5, r0
    39f2:	0228      	lsls	r0, r5, #8
    39f4:	d400      	bmi.n	39f8 <__aeabi_dadd+0x254>
    39f6:	e089      	b.n	3b0c <__aeabi_dadd+0x368>
    39f8:	1bd7      	subs	r7, r2, r7
    39fa:	42ba      	cmp	r2, r7
    39fc:	4192      	sbcs	r2, r2
    39fe:	1b1c      	subs	r4, r3, r4
    3a00:	4252      	negs	r2, r2
    3a02:	1aa5      	subs	r5, r4, r2
    3a04:	46d8      	mov	r8, fp
    3a06:	e729      	b.n	385c <__aeabi_dadd+0xb8>
    3a08:	4645      	mov	r5, r8
    3a0a:	2400      	movs	r4, #0
    3a0c:	2700      	movs	r7, #0
    3a0e:	e76a      	b.n	38e6 <__aeabi_dadd+0x142>
    3a10:	4c45      	ldr	r4, [pc, #276]	; (3b28 <__aeabi_dadd+0x384>)
    3a12:	1af6      	subs	r6, r6, r3
    3a14:	402c      	ands	r4, r5
    3a16:	e749      	b.n	38ac <__aeabi_dadd+0x108>
    3a18:	003d      	movs	r5, r7
    3a1a:	3828      	subs	r0, #40	; 0x28
    3a1c:	4085      	lsls	r5, r0
    3a1e:	2700      	movs	r7, #0
    3a20:	e72e      	b.n	3880 <__aeabi_dadd+0xdc>
    3a22:	0038      	movs	r0, r7
    3a24:	f001 fbbe 	bl	51a4 <__clzsi2>
    3a28:	3020      	adds	r0, #32
    3a2a:	e71d      	b.n	3868 <__aeabi_dadd+0xc4>
    3a2c:	430a      	orrs	r2, r1
    3a2e:	1e51      	subs	r1, r2, #1
    3a30:	418a      	sbcs	r2, r1
    3a32:	2100      	movs	r1, #0
    3a34:	e707      	b.n	3846 <__aeabi_dadd+0xa2>
    3a36:	2b00      	cmp	r3, #0
    3a38:	d000      	beq.n	3a3c <__aeabi_dadd+0x298>
    3a3a:	e0f3      	b.n	3c24 <__aeabi_dadd+0x480>
    3a3c:	1c70      	adds	r0, r6, #1
    3a3e:	0543      	lsls	r3, r0, #21
    3a40:	0d5b      	lsrs	r3, r3, #21
    3a42:	2b01      	cmp	r3, #1
    3a44:	dc00      	bgt.n	3a48 <__aeabi_dadd+0x2a4>
    3a46:	e0ad      	b.n	3ba4 <__aeabi_dadd+0x400>
    3a48:	4b36      	ldr	r3, [pc, #216]	; (3b24 <__aeabi_dadd+0x380>)
    3a4a:	4298      	cmp	r0, r3
    3a4c:	d100      	bne.n	3a50 <__aeabi_dadd+0x2ac>
    3a4e:	e0d1      	b.n	3bf4 <__aeabi_dadd+0x450>
    3a50:	18ba      	adds	r2, r7, r2
    3a52:	42ba      	cmp	r2, r7
    3a54:	41bf      	sbcs	r7, r7
    3a56:	1864      	adds	r4, r4, r1
    3a58:	427f      	negs	r7, r7
    3a5a:	19e4      	adds	r4, r4, r7
    3a5c:	07e7      	lsls	r7, r4, #31
    3a5e:	0852      	lsrs	r2, r2, #1
    3a60:	4317      	orrs	r7, r2
    3a62:	0864      	lsrs	r4, r4, #1
    3a64:	0006      	movs	r6, r0
    3a66:	e721      	b.n	38ac <__aeabi_dadd+0x108>
    3a68:	482e      	ldr	r0, [pc, #184]	; (3b24 <__aeabi_dadd+0x380>)
    3a6a:	4285      	cmp	r5, r0
    3a6c:	d100      	bne.n	3a70 <__aeabi_dadd+0x2cc>
    3a6e:	e093      	b.n	3b98 <__aeabi_dadd+0x3f4>
    3a70:	001d      	movs	r5, r3
    3a72:	e6d0      	b.n	3816 <__aeabi_dadd+0x72>
    3a74:	0029      	movs	r1, r5
    3a76:	3e1f      	subs	r6, #31
    3a78:	40f1      	lsrs	r1, r6
    3a7a:	2b20      	cmp	r3, #32
    3a7c:	d100      	bne.n	3a80 <__aeabi_dadd+0x2dc>
    3a7e:	e08d      	b.n	3b9c <__aeabi_dadd+0x3f8>
    3a80:	2240      	movs	r2, #64	; 0x40
    3a82:	1ad3      	subs	r3, r2, r3
    3a84:	409d      	lsls	r5, r3
    3a86:	432f      	orrs	r7, r5
    3a88:	1e7d      	subs	r5, r7, #1
    3a8a:	41af      	sbcs	r7, r5
    3a8c:	2400      	movs	r4, #0
    3a8e:	430f      	orrs	r7, r1
    3a90:	2600      	movs	r6, #0
    3a92:	e744      	b.n	391e <__aeabi_dadd+0x17a>
    3a94:	002b      	movs	r3, r5
    3a96:	0008      	movs	r0, r1
    3a98:	3b20      	subs	r3, #32
    3a9a:	40d8      	lsrs	r0, r3
    3a9c:	0003      	movs	r3, r0
    3a9e:	2d20      	cmp	r5, #32
    3aa0:	d100      	bne.n	3aa4 <__aeabi_dadd+0x300>
    3aa2:	e07d      	b.n	3ba0 <__aeabi_dadd+0x3fc>
    3aa4:	2040      	movs	r0, #64	; 0x40
    3aa6:	1b45      	subs	r5, r0, r5
    3aa8:	40a9      	lsls	r1, r5
    3aaa:	430a      	orrs	r2, r1
    3aac:	1e51      	subs	r1, r2, #1
    3aae:	418a      	sbcs	r2, r1
    3ab0:	2100      	movs	r1, #0
    3ab2:	431a      	orrs	r2, r3
    3ab4:	e6c7      	b.n	3846 <__aeabi_dadd+0xa2>
    3ab6:	2e00      	cmp	r6, #0
    3ab8:	d050      	beq.n	3b5c <__aeabi_dadd+0x3b8>
    3aba:	4e1a      	ldr	r6, [pc, #104]	; (3b24 <__aeabi_dadd+0x380>)
    3abc:	42b0      	cmp	r0, r6
    3abe:	d057      	beq.n	3b70 <__aeabi_dadd+0x3cc>
    3ac0:	2680      	movs	r6, #128	; 0x80
    3ac2:	426b      	negs	r3, r5
    3ac4:	4699      	mov	r9, r3
    3ac6:	0436      	lsls	r6, r6, #16
    3ac8:	4334      	orrs	r4, r6
    3aca:	464b      	mov	r3, r9
    3acc:	2b38      	cmp	r3, #56	; 0x38
    3ace:	dd00      	ble.n	3ad2 <__aeabi_dadd+0x32e>
    3ad0:	e0d6      	b.n	3c80 <__aeabi_dadd+0x4dc>
    3ad2:	2b1f      	cmp	r3, #31
    3ad4:	dd00      	ble.n	3ad8 <__aeabi_dadd+0x334>
    3ad6:	e135      	b.n	3d44 <__aeabi_dadd+0x5a0>
    3ad8:	2620      	movs	r6, #32
    3ada:	1af5      	subs	r5, r6, r3
    3adc:	0026      	movs	r6, r4
    3ade:	40ae      	lsls	r6, r5
    3ae0:	46b2      	mov	sl, r6
    3ae2:	003e      	movs	r6, r7
    3ae4:	40de      	lsrs	r6, r3
    3ae6:	46ac      	mov	ip, r5
    3ae8:	0035      	movs	r5, r6
    3aea:	4656      	mov	r6, sl
    3aec:	432e      	orrs	r6, r5
    3aee:	4665      	mov	r5, ip
    3af0:	40af      	lsls	r7, r5
    3af2:	1e7d      	subs	r5, r7, #1
    3af4:	41af      	sbcs	r7, r5
    3af6:	40dc      	lsrs	r4, r3
    3af8:	4337      	orrs	r7, r6
    3afa:	1bd7      	subs	r7, r2, r7
    3afc:	42ba      	cmp	r2, r7
    3afe:	4192      	sbcs	r2, r2
    3b00:	1b0c      	subs	r4, r1, r4
    3b02:	4252      	negs	r2, r2
    3b04:	1aa4      	subs	r4, r4, r2
    3b06:	0006      	movs	r6, r0
    3b08:	46d8      	mov	r8, fp
    3b0a:	e6a3      	b.n	3854 <__aeabi_dadd+0xb0>
    3b0c:	4664      	mov	r4, ip
    3b0e:	4667      	mov	r7, ip
    3b10:	432c      	orrs	r4, r5
    3b12:	d000      	beq.n	3b16 <__aeabi_dadd+0x372>
    3b14:	e6a2      	b.n	385c <__aeabi_dadd+0xb8>
    3b16:	2500      	movs	r5, #0
    3b18:	2600      	movs	r6, #0
    3b1a:	2700      	movs	r7, #0
    3b1c:	e706      	b.n	392c <__aeabi_dadd+0x188>
    3b1e:	001e      	movs	r6, r3
    3b20:	e6c4      	b.n	38ac <__aeabi_dadd+0x108>
    3b22:	46c0      	nop			; (mov r8, r8)
    3b24:	000007ff 	.word	0x000007ff
    3b28:	ff7fffff 	.word	0xff7fffff
    3b2c:	800fffff 	.word	0x800fffff
    3b30:	2b1f      	cmp	r3, #31
    3b32:	dc63      	bgt.n	3bfc <__aeabi_dadd+0x458>
    3b34:	2020      	movs	r0, #32
    3b36:	1ac3      	subs	r3, r0, r3
    3b38:	0008      	movs	r0, r1
    3b3a:	4098      	lsls	r0, r3
    3b3c:	469c      	mov	ip, r3
    3b3e:	4683      	mov	fp, r0
    3b40:	4653      	mov	r3, sl
    3b42:	0010      	movs	r0, r2
    3b44:	40d8      	lsrs	r0, r3
    3b46:	0003      	movs	r3, r0
    3b48:	4658      	mov	r0, fp
    3b4a:	4318      	orrs	r0, r3
    3b4c:	4663      	mov	r3, ip
    3b4e:	409a      	lsls	r2, r3
    3b50:	1e53      	subs	r3, r2, #1
    3b52:	419a      	sbcs	r2, r3
    3b54:	4653      	mov	r3, sl
    3b56:	4302      	orrs	r2, r0
    3b58:	40d9      	lsrs	r1, r3
    3b5a:	e703      	b.n	3964 <__aeabi_dadd+0x1c0>
    3b5c:	0026      	movs	r6, r4
    3b5e:	433e      	orrs	r6, r7
    3b60:	d006      	beq.n	3b70 <__aeabi_dadd+0x3cc>
    3b62:	43eb      	mvns	r3, r5
    3b64:	4699      	mov	r9, r3
    3b66:	2b00      	cmp	r3, #0
    3b68:	d0c7      	beq.n	3afa <__aeabi_dadd+0x356>
    3b6a:	4e94      	ldr	r6, [pc, #592]	; (3dbc <__aeabi_dadd+0x618>)
    3b6c:	42b0      	cmp	r0, r6
    3b6e:	d1ac      	bne.n	3aca <__aeabi_dadd+0x326>
    3b70:	000c      	movs	r4, r1
    3b72:	0017      	movs	r7, r2
    3b74:	0006      	movs	r6, r0
    3b76:	46d8      	mov	r8, fp
    3b78:	e698      	b.n	38ac <__aeabi_dadd+0x108>
    3b7a:	4b90      	ldr	r3, [pc, #576]	; (3dbc <__aeabi_dadd+0x618>)
    3b7c:	459a      	cmp	sl, r3
    3b7e:	d00b      	beq.n	3b98 <__aeabi_dadd+0x3f4>
    3b80:	4682      	mov	sl, r0
    3b82:	e6e7      	b.n	3954 <__aeabi_dadd+0x1b0>
    3b84:	2800      	cmp	r0, #0
    3b86:	d000      	beq.n	3b8a <__aeabi_dadd+0x3e6>
    3b88:	e09e      	b.n	3cc8 <__aeabi_dadd+0x524>
    3b8a:	0018      	movs	r0, r3
    3b8c:	4310      	orrs	r0, r2
    3b8e:	d100      	bne.n	3b92 <__aeabi_dadd+0x3ee>
    3b90:	e0e9      	b.n	3d66 <__aeabi_dadd+0x5c2>
    3b92:	001c      	movs	r4, r3
    3b94:	0017      	movs	r7, r2
    3b96:	46d8      	mov	r8, fp
    3b98:	4e88      	ldr	r6, [pc, #544]	; (3dbc <__aeabi_dadd+0x618>)
    3b9a:	e687      	b.n	38ac <__aeabi_dadd+0x108>
    3b9c:	2500      	movs	r5, #0
    3b9e:	e772      	b.n	3a86 <__aeabi_dadd+0x2e2>
    3ba0:	2100      	movs	r1, #0
    3ba2:	e782      	b.n	3aaa <__aeabi_dadd+0x306>
    3ba4:	0023      	movs	r3, r4
    3ba6:	433b      	orrs	r3, r7
    3ba8:	2e00      	cmp	r6, #0
    3baa:	d000      	beq.n	3bae <__aeabi_dadd+0x40a>
    3bac:	e0ab      	b.n	3d06 <__aeabi_dadd+0x562>
    3bae:	2b00      	cmp	r3, #0
    3bb0:	d100      	bne.n	3bb4 <__aeabi_dadd+0x410>
    3bb2:	e0e7      	b.n	3d84 <__aeabi_dadd+0x5e0>
    3bb4:	000b      	movs	r3, r1
    3bb6:	4313      	orrs	r3, r2
    3bb8:	d100      	bne.n	3bbc <__aeabi_dadd+0x418>
    3bba:	e677      	b.n	38ac <__aeabi_dadd+0x108>
    3bbc:	18ba      	adds	r2, r7, r2
    3bbe:	42ba      	cmp	r2, r7
    3bc0:	41bf      	sbcs	r7, r7
    3bc2:	1864      	adds	r4, r4, r1
    3bc4:	427f      	negs	r7, r7
    3bc6:	19e4      	adds	r4, r4, r7
    3bc8:	0223      	lsls	r3, r4, #8
    3bca:	d400      	bmi.n	3bce <__aeabi_dadd+0x42a>
    3bcc:	e0f2      	b.n	3db4 <__aeabi_dadd+0x610>
    3bce:	4b7c      	ldr	r3, [pc, #496]	; (3dc0 <__aeabi_dadd+0x61c>)
    3bd0:	0017      	movs	r7, r2
    3bd2:	401c      	ands	r4, r3
    3bd4:	0006      	movs	r6, r0
    3bd6:	e669      	b.n	38ac <__aeabi_dadd+0x108>
    3bd8:	0020      	movs	r0, r4
    3bda:	4338      	orrs	r0, r7
    3bdc:	2e00      	cmp	r6, #0
    3bde:	d1d1      	bne.n	3b84 <__aeabi_dadd+0x3e0>
    3be0:	2800      	cmp	r0, #0
    3be2:	d15b      	bne.n	3c9c <__aeabi_dadd+0x4f8>
    3be4:	001c      	movs	r4, r3
    3be6:	4314      	orrs	r4, r2
    3be8:	d100      	bne.n	3bec <__aeabi_dadd+0x448>
    3bea:	e0a8      	b.n	3d3e <__aeabi_dadd+0x59a>
    3bec:	001c      	movs	r4, r3
    3bee:	0017      	movs	r7, r2
    3bf0:	46d8      	mov	r8, fp
    3bf2:	e65b      	b.n	38ac <__aeabi_dadd+0x108>
    3bf4:	0006      	movs	r6, r0
    3bf6:	2400      	movs	r4, #0
    3bf8:	2700      	movs	r7, #0
    3bfa:	e697      	b.n	392c <__aeabi_dadd+0x188>
    3bfc:	4650      	mov	r0, sl
    3bfe:	000b      	movs	r3, r1
    3c00:	3820      	subs	r0, #32
    3c02:	40c3      	lsrs	r3, r0
    3c04:	4699      	mov	r9, r3
    3c06:	4653      	mov	r3, sl
    3c08:	2b20      	cmp	r3, #32
    3c0a:	d100      	bne.n	3c0e <__aeabi_dadd+0x46a>
    3c0c:	e095      	b.n	3d3a <__aeabi_dadd+0x596>
    3c0e:	2340      	movs	r3, #64	; 0x40
    3c10:	4650      	mov	r0, sl
    3c12:	1a1b      	subs	r3, r3, r0
    3c14:	4099      	lsls	r1, r3
    3c16:	430a      	orrs	r2, r1
    3c18:	1e51      	subs	r1, r2, #1
    3c1a:	418a      	sbcs	r2, r1
    3c1c:	464b      	mov	r3, r9
    3c1e:	2100      	movs	r1, #0
    3c20:	431a      	orrs	r2, r3
    3c22:	e69f      	b.n	3964 <__aeabi_dadd+0x1c0>
    3c24:	2e00      	cmp	r6, #0
    3c26:	d130      	bne.n	3c8a <__aeabi_dadd+0x4e6>
    3c28:	0026      	movs	r6, r4
    3c2a:	433e      	orrs	r6, r7
    3c2c:	d067      	beq.n	3cfe <__aeabi_dadd+0x55a>
    3c2e:	43db      	mvns	r3, r3
    3c30:	469a      	mov	sl, r3
    3c32:	2b00      	cmp	r3, #0
    3c34:	d01c      	beq.n	3c70 <__aeabi_dadd+0x4cc>
    3c36:	4e61      	ldr	r6, [pc, #388]	; (3dbc <__aeabi_dadd+0x618>)
    3c38:	42b0      	cmp	r0, r6
    3c3a:	d060      	beq.n	3cfe <__aeabi_dadd+0x55a>
    3c3c:	4653      	mov	r3, sl
    3c3e:	2b38      	cmp	r3, #56	; 0x38
    3c40:	dd00      	ble.n	3c44 <__aeabi_dadd+0x4a0>
    3c42:	e096      	b.n	3d72 <__aeabi_dadd+0x5ce>
    3c44:	2b1f      	cmp	r3, #31
    3c46:	dd00      	ble.n	3c4a <__aeabi_dadd+0x4a6>
    3c48:	e09f      	b.n	3d8a <__aeabi_dadd+0x5e6>
    3c4a:	2620      	movs	r6, #32
    3c4c:	1af3      	subs	r3, r6, r3
    3c4e:	0026      	movs	r6, r4
    3c50:	409e      	lsls	r6, r3
    3c52:	469c      	mov	ip, r3
    3c54:	46b3      	mov	fp, r6
    3c56:	4653      	mov	r3, sl
    3c58:	003e      	movs	r6, r7
    3c5a:	40de      	lsrs	r6, r3
    3c5c:	0033      	movs	r3, r6
    3c5e:	465e      	mov	r6, fp
    3c60:	431e      	orrs	r6, r3
    3c62:	4663      	mov	r3, ip
    3c64:	409f      	lsls	r7, r3
    3c66:	1e7b      	subs	r3, r7, #1
    3c68:	419f      	sbcs	r7, r3
    3c6a:	4653      	mov	r3, sl
    3c6c:	40dc      	lsrs	r4, r3
    3c6e:	4337      	orrs	r7, r6
    3c70:	18bf      	adds	r7, r7, r2
    3c72:	4297      	cmp	r7, r2
    3c74:	4192      	sbcs	r2, r2
    3c76:	1864      	adds	r4, r4, r1
    3c78:	4252      	negs	r2, r2
    3c7a:	18a4      	adds	r4, r4, r2
    3c7c:	0006      	movs	r6, r0
    3c7e:	e678      	b.n	3972 <__aeabi_dadd+0x1ce>
    3c80:	4327      	orrs	r7, r4
    3c82:	1e7c      	subs	r4, r7, #1
    3c84:	41a7      	sbcs	r7, r4
    3c86:	2400      	movs	r4, #0
    3c88:	e737      	b.n	3afa <__aeabi_dadd+0x356>
    3c8a:	4e4c      	ldr	r6, [pc, #304]	; (3dbc <__aeabi_dadd+0x618>)
    3c8c:	42b0      	cmp	r0, r6
    3c8e:	d036      	beq.n	3cfe <__aeabi_dadd+0x55a>
    3c90:	2680      	movs	r6, #128	; 0x80
    3c92:	425b      	negs	r3, r3
    3c94:	0436      	lsls	r6, r6, #16
    3c96:	469a      	mov	sl, r3
    3c98:	4334      	orrs	r4, r6
    3c9a:	e7cf      	b.n	3c3c <__aeabi_dadd+0x498>
    3c9c:	0018      	movs	r0, r3
    3c9e:	4310      	orrs	r0, r2
    3ca0:	d100      	bne.n	3ca4 <__aeabi_dadd+0x500>
    3ca2:	e603      	b.n	38ac <__aeabi_dadd+0x108>
    3ca4:	1ab8      	subs	r0, r7, r2
    3ca6:	4684      	mov	ip, r0
    3ca8:	4567      	cmp	r7, ip
    3caa:	41ad      	sbcs	r5, r5
    3cac:	1ae0      	subs	r0, r4, r3
    3cae:	426d      	negs	r5, r5
    3cb0:	1b40      	subs	r0, r0, r5
    3cb2:	0205      	lsls	r5, r0, #8
    3cb4:	d400      	bmi.n	3cb8 <__aeabi_dadd+0x514>
    3cb6:	e62c      	b.n	3912 <__aeabi_dadd+0x16e>
    3cb8:	1bd7      	subs	r7, r2, r7
    3cba:	42ba      	cmp	r2, r7
    3cbc:	4192      	sbcs	r2, r2
    3cbe:	1b1c      	subs	r4, r3, r4
    3cc0:	4252      	negs	r2, r2
    3cc2:	1aa4      	subs	r4, r4, r2
    3cc4:	46d8      	mov	r8, fp
    3cc6:	e5f1      	b.n	38ac <__aeabi_dadd+0x108>
    3cc8:	0018      	movs	r0, r3
    3cca:	4310      	orrs	r0, r2
    3ccc:	d100      	bne.n	3cd0 <__aeabi_dadd+0x52c>
    3cce:	e763      	b.n	3b98 <__aeabi_dadd+0x3f4>
    3cd0:	08f8      	lsrs	r0, r7, #3
    3cd2:	0767      	lsls	r7, r4, #29
    3cd4:	4307      	orrs	r7, r0
    3cd6:	2080      	movs	r0, #128	; 0x80
    3cd8:	08e4      	lsrs	r4, r4, #3
    3cda:	0300      	lsls	r0, r0, #12
    3cdc:	4204      	tst	r4, r0
    3cde:	d008      	beq.n	3cf2 <__aeabi_dadd+0x54e>
    3ce0:	08dd      	lsrs	r5, r3, #3
    3ce2:	4205      	tst	r5, r0
    3ce4:	d105      	bne.n	3cf2 <__aeabi_dadd+0x54e>
    3ce6:	08d2      	lsrs	r2, r2, #3
    3ce8:	0759      	lsls	r1, r3, #29
    3cea:	4311      	orrs	r1, r2
    3cec:	000f      	movs	r7, r1
    3cee:	002c      	movs	r4, r5
    3cf0:	46d8      	mov	r8, fp
    3cf2:	0f7b      	lsrs	r3, r7, #29
    3cf4:	00e4      	lsls	r4, r4, #3
    3cf6:	431c      	orrs	r4, r3
    3cf8:	00ff      	lsls	r7, r7, #3
    3cfa:	4e30      	ldr	r6, [pc, #192]	; (3dbc <__aeabi_dadd+0x618>)
    3cfc:	e5d6      	b.n	38ac <__aeabi_dadd+0x108>
    3cfe:	000c      	movs	r4, r1
    3d00:	0017      	movs	r7, r2
    3d02:	0006      	movs	r6, r0
    3d04:	e5d2      	b.n	38ac <__aeabi_dadd+0x108>
    3d06:	2b00      	cmp	r3, #0
    3d08:	d038      	beq.n	3d7c <__aeabi_dadd+0x5d8>
    3d0a:	000b      	movs	r3, r1
    3d0c:	4313      	orrs	r3, r2
    3d0e:	d100      	bne.n	3d12 <__aeabi_dadd+0x56e>
    3d10:	e742      	b.n	3b98 <__aeabi_dadd+0x3f4>
    3d12:	08f8      	lsrs	r0, r7, #3
    3d14:	0767      	lsls	r7, r4, #29
    3d16:	4307      	orrs	r7, r0
    3d18:	2080      	movs	r0, #128	; 0x80
    3d1a:	08e4      	lsrs	r4, r4, #3
    3d1c:	0300      	lsls	r0, r0, #12
    3d1e:	4204      	tst	r4, r0
    3d20:	d0e7      	beq.n	3cf2 <__aeabi_dadd+0x54e>
    3d22:	08cb      	lsrs	r3, r1, #3
    3d24:	4203      	tst	r3, r0
    3d26:	d1e4      	bne.n	3cf2 <__aeabi_dadd+0x54e>
    3d28:	08d2      	lsrs	r2, r2, #3
    3d2a:	0749      	lsls	r1, r1, #29
    3d2c:	4311      	orrs	r1, r2
    3d2e:	000f      	movs	r7, r1
    3d30:	001c      	movs	r4, r3
    3d32:	e7de      	b.n	3cf2 <__aeabi_dadd+0x54e>
    3d34:	2700      	movs	r7, #0
    3d36:	2400      	movs	r4, #0
    3d38:	e5d5      	b.n	38e6 <__aeabi_dadd+0x142>
    3d3a:	2100      	movs	r1, #0
    3d3c:	e76b      	b.n	3c16 <__aeabi_dadd+0x472>
    3d3e:	2500      	movs	r5, #0
    3d40:	2700      	movs	r7, #0
    3d42:	e5f3      	b.n	392c <__aeabi_dadd+0x188>
    3d44:	464e      	mov	r6, r9
    3d46:	0025      	movs	r5, r4
    3d48:	3e20      	subs	r6, #32
    3d4a:	40f5      	lsrs	r5, r6
    3d4c:	464b      	mov	r3, r9
    3d4e:	002e      	movs	r6, r5
    3d50:	2b20      	cmp	r3, #32
    3d52:	d02d      	beq.n	3db0 <__aeabi_dadd+0x60c>
    3d54:	2540      	movs	r5, #64	; 0x40
    3d56:	1aed      	subs	r5, r5, r3
    3d58:	40ac      	lsls	r4, r5
    3d5a:	4327      	orrs	r7, r4
    3d5c:	1e7c      	subs	r4, r7, #1
    3d5e:	41a7      	sbcs	r7, r4
    3d60:	2400      	movs	r4, #0
    3d62:	4337      	orrs	r7, r6
    3d64:	e6c9      	b.n	3afa <__aeabi_dadd+0x356>
    3d66:	2480      	movs	r4, #128	; 0x80
    3d68:	2500      	movs	r5, #0
    3d6a:	0324      	lsls	r4, r4, #12
    3d6c:	4e13      	ldr	r6, [pc, #76]	; (3dbc <__aeabi_dadd+0x618>)
    3d6e:	2700      	movs	r7, #0
    3d70:	e5dc      	b.n	392c <__aeabi_dadd+0x188>
    3d72:	4327      	orrs	r7, r4
    3d74:	1e7c      	subs	r4, r7, #1
    3d76:	41a7      	sbcs	r7, r4
    3d78:	2400      	movs	r4, #0
    3d7a:	e779      	b.n	3c70 <__aeabi_dadd+0x4cc>
    3d7c:	000c      	movs	r4, r1
    3d7e:	0017      	movs	r7, r2
    3d80:	4e0e      	ldr	r6, [pc, #56]	; (3dbc <__aeabi_dadd+0x618>)
    3d82:	e593      	b.n	38ac <__aeabi_dadd+0x108>
    3d84:	000c      	movs	r4, r1
    3d86:	0017      	movs	r7, r2
    3d88:	e590      	b.n	38ac <__aeabi_dadd+0x108>
    3d8a:	4656      	mov	r6, sl
    3d8c:	0023      	movs	r3, r4
    3d8e:	3e20      	subs	r6, #32
    3d90:	40f3      	lsrs	r3, r6
    3d92:	4699      	mov	r9, r3
    3d94:	4653      	mov	r3, sl
    3d96:	2b20      	cmp	r3, #32
    3d98:	d00e      	beq.n	3db8 <__aeabi_dadd+0x614>
    3d9a:	2340      	movs	r3, #64	; 0x40
    3d9c:	4656      	mov	r6, sl
    3d9e:	1b9b      	subs	r3, r3, r6
    3da0:	409c      	lsls	r4, r3
    3da2:	4327      	orrs	r7, r4
    3da4:	1e7c      	subs	r4, r7, #1
    3da6:	41a7      	sbcs	r7, r4
    3da8:	464b      	mov	r3, r9
    3daa:	2400      	movs	r4, #0
    3dac:	431f      	orrs	r7, r3
    3dae:	e75f      	b.n	3c70 <__aeabi_dadd+0x4cc>
    3db0:	2400      	movs	r4, #0
    3db2:	e7d2      	b.n	3d5a <__aeabi_dadd+0x5b6>
    3db4:	0017      	movs	r7, r2
    3db6:	e5b2      	b.n	391e <__aeabi_dadd+0x17a>
    3db8:	2400      	movs	r4, #0
    3dba:	e7f2      	b.n	3da2 <__aeabi_dadd+0x5fe>
    3dbc:	000007ff 	.word	0x000007ff
    3dc0:	ff7fffff 	.word	0xff7fffff

00003dc4 <__aeabi_ddiv>:
    3dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dc6:	4657      	mov	r7, sl
    3dc8:	4645      	mov	r5, r8
    3dca:	46de      	mov	lr, fp
    3dcc:	464e      	mov	r6, r9
    3dce:	b5e0      	push	{r5, r6, r7, lr}
    3dd0:	004c      	lsls	r4, r1, #1
    3dd2:	030e      	lsls	r6, r1, #12
    3dd4:	b087      	sub	sp, #28
    3dd6:	4683      	mov	fp, r0
    3dd8:	4692      	mov	sl, r2
    3dda:	001d      	movs	r5, r3
    3ddc:	4680      	mov	r8, r0
    3dde:	0b36      	lsrs	r6, r6, #12
    3de0:	0d64      	lsrs	r4, r4, #21
    3de2:	0fcf      	lsrs	r7, r1, #31
    3de4:	2c00      	cmp	r4, #0
    3de6:	d04f      	beq.n	3e88 <__aeabi_ddiv+0xc4>
    3de8:	4b6f      	ldr	r3, [pc, #444]	; (3fa8 <__aeabi_ddiv+0x1e4>)
    3dea:	429c      	cmp	r4, r3
    3dec:	d035      	beq.n	3e5a <__aeabi_ddiv+0x96>
    3dee:	2380      	movs	r3, #128	; 0x80
    3df0:	0f42      	lsrs	r2, r0, #29
    3df2:	041b      	lsls	r3, r3, #16
    3df4:	00f6      	lsls	r6, r6, #3
    3df6:	4313      	orrs	r3, r2
    3df8:	4333      	orrs	r3, r6
    3dfa:	4699      	mov	r9, r3
    3dfc:	00c3      	lsls	r3, r0, #3
    3dfe:	4698      	mov	r8, r3
    3e00:	4b6a      	ldr	r3, [pc, #424]	; (3fac <__aeabi_ddiv+0x1e8>)
    3e02:	2600      	movs	r6, #0
    3e04:	469c      	mov	ip, r3
    3e06:	2300      	movs	r3, #0
    3e08:	4464      	add	r4, ip
    3e0a:	9303      	str	r3, [sp, #12]
    3e0c:	032b      	lsls	r3, r5, #12
    3e0e:	0b1b      	lsrs	r3, r3, #12
    3e10:	469b      	mov	fp, r3
    3e12:	006b      	lsls	r3, r5, #1
    3e14:	0fed      	lsrs	r5, r5, #31
    3e16:	4650      	mov	r0, sl
    3e18:	0d5b      	lsrs	r3, r3, #21
    3e1a:	9501      	str	r5, [sp, #4]
    3e1c:	d05e      	beq.n	3edc <__aeabi_ddiv+0x118>
    3e1e:	4a62      	ldr	r2, [pc, #392]	; (3fa8 <__aeabi_ddiv+0x1e4>)
    3e20:	4293      	cmp	r3, r2
    3e22:	d053      	beq.n	3ecc <__aeabi_ddiv+0x108>
    3e24:	465a      	mov	r2, fp
    3e26:	00d1      	lsls	r1, r2, #3
    3e28:	2280      	movs	r2, #128	; 0x80
    3e2a:	0f40      	lsrs	r0, r0, #29
    3e2c:	0412      	lsls	r2, r2, #16
    3e2e:	4302      	orrs	r2, r0
    3e30:	430a      	orrs	r2, r1
    3e32:	4693      	mov	fp, r2
    3e34:	4652      	mov	r2, sl
    3e36:	00d1      	lsls	r1, r2, #3
    3e38:	4a5c      	ldr	r2, [pc, #368]	; (3fac <__aeabi_ddiv+0x1e8>)
    3e3a:	4694      	mov	ip, r2
    3e3c:	2200      	movs	r2, #0
    3e3e:	4463      	add	r3, ip
    3e40:	0038      	movs	r0, r7
    3e42:	4068      	eors	r0, r5
    3e44:	4684      	mov	ip, r0
    3e46:	9002      	str	r0, [sp, #8]
    3e48:	1ae4      	subs	r4, r4, r3
    3e4a:	4316      	orrs	r6, r2
    3e4c:	2e0f      	cmp	r6, #15
    3e4e:	d900      	bls.n	3e52 <__aeabi_ddiv+0x8e>
    3e50:	e0b4      	b.n	3fbc <__aeabi_ddiv+0x1f8>
    3e52:	4b57      	ldr	r3, [pc, #348]	; (3fb0 <__aeabi_ddiv+0x1ec>)
    3e54:	00b6      	lsls	r6, r6, #2
    3e56:	599b      	ldr	r3, [r3, r6]
    3e58:	469f      	mov	pc, r3
    3e5a:	0003      	movs	r3, r0
    3e5c:	4333      	orrs	r3, r6
    3e5e:	4699      	mov	r9, r3
    3e60:	d16c      	bne.n	3f3c <__aeabi_ddiv+0x178>
    3e62:	2300      	movs	r3, #0
    3e64:	4698      	mov	r8, r3
    3e66:	3302      	adds	r3, #2
    3e68:	2608      	movs	r6, #8
    3e6a:	9303      	str	r3, [sp, #12]
    3e6c:	e7ce      	b.n	3e0c <__aeabi_ddiv+0x48>
    3e6e:	46cb      	mov	fp, r9
    3e70:	4641      	mov	r1, r8
    3e72:	9a03      	ldr	r2, [sp, #12]
    3e74:	9701      	str	r7, [sp, #4]
    3e76:	2a02      	cmp	r2, #2
    3e78:	d165      	bne.n	3f46 <__aeabi_ddiv+0x182>
    3e7a:	9b01      	ldr	r3, [sp, #4]
    3e7c:	4c4a      	ldr	r4, [pc, #296]	; (3fa8 <__aeabi_ddiv+0x1e4>)
    3e7e:	469c      	mov	ip, r3
    3e80:	2300      	movs	r3, #0
    3e82:	2200      	movs	r2, #0
    3e84:	4698      	mov	r8, r3
    3e86:	e06b      	b.n	3f60 <__aeabi_ddiv+0x19c>
    3e88:	0003      	movs	r3, r0
    3e8a:	4333      	orrs	r3, r6
    3e8c:	4699      	mov	r9, r3
    3e8e:	d04e      	beq.n	3f2e <__aeabi_ddiv+0x16a>
    3e90:	2e00      	cmp	r6, #0
    3e92:	d100      	bne.n	3e96 <__aeabi_ddiv+0xd2>
    3e94:	e1bc      	b.n	4210 <__aeabi_ddiv+0x44c>
    3e96:	0030      	movs	r0, r6
    3e98:	f001 f984 	bl	51a4 <__clzsi2>
    3e9c:	0003      	movs	r3, r0
    3e9e:	3b0b      	subs	r3, #11
    3ea0:	2b1c      	cmp	r3, #28
    3ea2:	dd00      	ble.n	3ea6 <__aeabi_ddiv+0xe2>
    3ea4:	e1ac      	b.n	4200 <__aeabi_ddiv+0x43c>
    3ea6:	221d      	movs	r2, #29
    3ea8:	1ad3      	subs	r3, r2, r3
    3eaa:	465a      	mov	r2, fp
    3eac:	0001      	movs	r1, r0
    3eae:	40da      	lsrs	r2, r3
    3eb0:	3908      	subs	r1, #8
    3eb2:	408e      	lsls	r6, r1
    3eb4:	0013      	movs	r3, r2
    3eb6:	4333      	orrs	r3, r6
    3eb8:	4699      	mov	r9, r3
    3eba:	465b      	mov	r3, fp
    3ebc:	408b      	lsls	r3, r1
    3ebe:	4698      	mov	r8, r3
    3ec0:	2300      	movs	r3, #0
    3ec2:	4c3c      	ldr	r4, [pc, #240]	; (3fb4 <__aeabi_ddiv+0x1f0>)
    3ec4:	2600      	movs	r6, #0
    3ec6:	1a24      	subs	r4, r4, r0
    3ec8:	9303      	str	r3, [sp, #12]
    3eca:	e79f      	b.n	3e0c <__aeabi_ddiv+0x48>
    3ecc:	4651      	mov	r1, sl
    3ece:	465a      	mov	r2, fp
    3ed0:	4311      	orrs	r1, r2
    3ed2:	d129      	bne.n	3f28 <__aeabi_ddiv+0x164>
    3ed4:	2200      	movs	r2, #0
    3ed6:	4693      	mov	fp, r2
    3ed8:	3202      	adds	r2, #2
    3eda:	e7b1      	b.n	3e40 <__aeabi_ddiv+0x7c>
    3edc:	4659      	mov	r1, fp
    3ede:	4301      	orrs	r1, r0
    3ee0:	d01e      	beq.n	3f20 <__aeabi_ddiv+0x15c>
    3ee2:	465b      	mov	r3, fp
    3ee4:	2b00      	cmp	r3, #0
    3ee6:	d100      	bne.n	3eea <__aeabi_ddiv+0x126>
    3ee8:	e19e      	b.n	4228 <__aeabi_ddiv+0x464>
    3eea:	4658      	mov	r0, fp
    3eec:	f001 f95a 	bl	51a4 <__clzsi2>
    3ef0:	0003      	movs	r3, r0
    3ef2:	3b0b      	subs	r3, #11
    3ef4:	2b1c      	cmp	r3, #28
    3ef6:	dd00      	ble.n	3efa <__aeabi_ddiv+0x136>
    3ef8:	e18f      	b.n	421a <__aeabi_ddiv+0x456>
    3efa:	0002      	movs	r2, r0
    3efc:	4659      	mov	r1, fp
    3efe:	3a08      	subs	r2, #8
    3f00:	4091      	lsls	r1, r2
    3f02:	468b      	mov	fp, r1
    3f04:	211d      	movs	r1, #29
    3f06:	1acb      	subs	r3, r1, r3
    3f08:	4651      	mov	r1, sl
    3f0a:	40d9      	lsrs	r1, r3
    3f0c:	000b      	movs	r3, r1
    3f0e:	4659      	mov	r1, fp
    3f10:	430b      	orrs	r3, r1
    3f12:	4651      	mov	r1, sl
    3f14:	469b      	mov	fp, r3
    3f16:	4091      	lsls	r1, r2
    3f18:	4b26      	ldr	r3, [pc, #152]	; (3fb4 <__aeabi_ddiv+0x1f0>)
    3f1a:	2200      	movs	r2, #0
    3f1c:	1a1b      	subs	r3, r3, r0
    3f1e:	e78f      	b.n	3e40 <__aeabi_ddiv+0x7c>
    3f20:	2300      	movs	r3, #0
    3f22:	2201      	movs	r2, #1
    3f24:	469b      	mov	fp, r3
    3f26:	e78b      	b.n	3e40 <__aeabi_ddiv+0x7c>
    3f28:	4651      	mov	r1, sl
    3f2a:	2203      	movs	r2, #3
    3f2c:	e788      	b.n	3e40 <__aeabi_ddiv+0x7c>
    3f2e:	2300      	movs	r3, #0
    3f30:	4698      	mov	r8, r3
    3f32:	3301      	adds	r3, #1
    3f34:	2604      	movs	r6, #4
    3f36:	2400      	movs	r4, #0
    3f38:	9303      	str	r3, [sp, #12]
    3f3a:	e767      	b.n	3e0c <__aeabi_ddiv+0x48>
    3f3c:	2303      	movs	r3, #3
    3f3e:	46b1      	mov	r9, r6
    3f40:	9303      	str	r3, [sp, #12]
    3f42:	260c      	movs	r6, #12
    3f44:	e762      	b.n	3e0c <__aeabi_ddiv+0x48>
    3f46:	2a03      	cmp	r2, #3
    3f48:	d100      	bne.n	3f4c <__aeabi_ddiv+0x188>
    3f4a:	e25c      	b.n	4406 <__aeabi_ddiv+0x642>
    3f4c:	9b01      	ldr	r3, [sp, #4]
    3f4e:	2a01      	cmp	r2, #1
    3f50:	d000      	beq.n	3f54 <__aeabi_ddiv+0x190>
    3f52:	e1e4      	b.n	431e <__aeabi_ddiv+0x55a>
    3f54:	4013      	ands	r3, r2
    3f56:	469c      	mov	ip, r3
    3f58:	2300      	movs	r3, #0
    3f5a:	2400      	movs	r4, #0
    3f5c:	2200      	movs	r2, #0
    3f5e:	4698      	mov	r8, r3
    3f60:	2100      	movs	r1, #0
    3f62:	0312      	lsls	r2, r2, #12
    3f64:	0b13      	lsrs	r3, r2, #12
    3f66:	0d0a      	lsrs	r2, r1, #20
    3f68:	0512      	lsls	r2, r2, #20
    3f6a:	431a      	orrs	r2, r3
    3f6c:	0523      	lsls	r3, r4, #20
    3f6e:	4c12      	ldr	r4, [pc, #72]	; (3fb8 <__aeabi_ddiv+0x1f4>)
    3f70:	4640      	mov	r0, r8
    3f72:	4022      	ands	r2, r4
    3f74:	4313      	orrs	r3, r2
    3f76:	4662      	mov	r2, ip
    3f78:	005b      	lsls	r3, r3, #1
    3f7a:	07d2      	lsls	r2, r2, #31
    3f7c:	085b      	lsrs	r3, r3, #1
    3f7e:	4313      	orrs	r3, r2
    3f80:	0019      	movs	r1, r3
    3f82:	b007      	add	sp, #28
    3f84:	bc3c      	pop	{r2, r3, r4, r5}
    3f86:	4690      	mov	r8, r2
    3f88:	4699      	mov	r9, r3
    3f8a:	46a2      	mov	sl, r4
    3f8c:	46ab      	mov	fp, r5
    3f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f90:	2300      	movs	r3, #0
    3f92:	2280      	movs	r2, #128	; 0x80
    3f94:	469c      	mov	ip, r3
    3f96:	0312      	lsls	r2, r2, #12
    3f98:	4698      	mov	r8, r3
    3f9a:	4c03      	ldr	r4, [pc, #12]	; (3fa8 <__aeabi_ddiv+0x1e4>)
    3f9c:	e7e0      	b.n	3f60 <__aeabi_ddiv+0x19c>
    3f9e:	2300      	movs	r3, #0
    3fa0:	4c01      	ldr	r4, [pc, #4]	; (3fa8 <__aeabi_ddiv+0x1e4>)
    3fa2:	2200      	movs	r2, #0
    3fa4:	4698      	mov	r8, r3
    3fa6:	e7db      	b.n	3f60 <__aeabi_ddiv+0x19c>
    3fa8:	000007ff 	.word	0x000007ff
    3fac:	fffffc01 	.word	0xfffffc01
    3fb0:	000058b0 	.word	0x000058b0
    3fb4:	fffffc0d 	.word	0xfffffc0d
    3fb8:	800fffff 	.word	0x800fffff
    3fbc:	45d9      	cmp	r9, fp
    3fbe:	d900      	bls.n	3fc2 <__aeabi_ddiv+0x1fe>
    3fc0:	e139      	b.n	4236 <__aeabi_ddiv+0x472>
    3fc2:	d100      	bne.n	3fc6 <__aeabi_ddiv+0x202>
    3fc4:	e134      	b.n	4230 <__aeabi_ddiv+0x46c>
    3fc6:	2300      	movs	r3, #0
    3fc8:	4646      	mov	r6, r8
    3fca:	464d      	mov	r5, r9
    3fcc:	469a      	mov	sl, r3
    3fce:	3c01      	subs	r4, #1
    3fd0:	465b      	mov	r3, fp
    3fd2:	0e0a      	lsrs	r2, r1, #24
    3fd4:	021b      	lsls	r3, r3, #8
    3fd6:	431a      	orrs	r2, r3
    3fd8:	020b      	lsls	r3, r1, #8
    3fda:	0c17      	lsrs	r7, r2, #16
    3fdc:	9303      	str	r3, [sp, #12]
    3fde:	0413      	lsls	r3, r2, #16
    3fe0:	0c1b      	lsrs	r3, r3, #16
    3fe2:	0039      	movs	r1, r7
    3fe4:	0028      	movs	r0, r5
    3fe6:	4690      	mov	r8, r2
    3fe8:	9301      	str	r3, [sp, #4]
    3fea:	f7fe ffed 	bl	2fc8 <__udivsi3>
    3fee:	0002      	movs	r2, r0
    3ff0:	9b01      	ldr	r3, [sp, #4]
    3ff2:	4683      	mov	fp, r0
    3ff4:	435a      	muls	r2, r3
    3ff6:	0028      	movs	r0, r5
    3ff8:	0039      	movs	r1, r7
    3ffa:	4691      	mov	r9, r2
    3ffc:	f7ff f86a 	bl	30d4 <__aeabi_uidivmod>
    4000:	0c35      	lsrs	r5, r6, #16
    4002:	0409      	lsls	r1, r1, #16
    4004:	430d      	orrs	r5, r1
    4006:	45a9      	cmp	r9, r5
    4008:	d90d      	bls.n	4026 <__aeabi_ddiv+0x262>
    400a:	465b      	mov	r3, fp
    400c:	4445      	add	r5, r8
    400e:	3b01      	subs	r3, #1
    4010:	45a8      	cmp	r8, r5
    4012:	d900      	bls.n	4016 <__aeabi_ddiv+0x252>
    4014:	e13a      	b.n	428c <__aeabi_ddiv+0x4c8>
    4016:	45a9      	cmp	r9, r5
    4018:	d800      	bhi.n	401c <__aeabi_ddiv+0x258>
    401a:	e137      	b.n	428c <__aeabi_ddiv+0x4c8>
    401c:	2302      	movs	r3, #2
    401e:	425b      	negs	r3, r3
    4020:	469c      	mov	ip, r3
    4022:	4445      	add	r5, r8
    4024:	44e3      	add	fp, ip
    4026:	464b      	mov	r3, r9
    4028:	1aeb      	subs	r3, r5, r3
    402a:	0039      	movs	r1, r7
    402c:	0018      	movs	r0, r3
    402e:	9304      	str	r3, [sp, #16]
    4030:	f7fe ffca 	bl	2fc8 <__udivsi3>
    4034:	9b01      	ldr	r3, [sp, #4]
    4036:	0005      	movs	r5, r0
    4038:	4343      	muls	r3, r0
    403a:	0039      	movs	r1, r7
    403c:	9804      	ldr	r0, [sp, #16]
    403e:	4699      	mov	r9, r3
    4040:	f7ff f848 	bl	30d4 <__aeabi_uidivmod>
    4044:	0433      	lsls	r3, r6, #16
    4046:	0409      	lsls	r1, r1, #16
    4048:	0c1b      	lsrs	r3, r3, #16
    404a:	430b      	orrs	r3, r1
    404c:	4599      	cmp	r9, r3
    404e:	d909      	bls.n	4064 <__aeabi_ddiv+0x2a0>
    4050:	4443      	add	r3, r8
    4052:	1e6a      	subs	r2, r5, #1
    4054:	4598      	cmp	r8, r3
    4056:	d900      	bls.n	405a <__aeabi_ddiv+0x296>
    4058:	e11a      	b.n	4290 <__aeabi_ddiv+0x4cc>
    405a:	4599      	cmp	r9, r3
    405c:	d800      	bhi.n	4060 <__aeabi_ddiv+0x29c>
    405e:	e117      	b.n	4290 <__aeabi_ddiv+0x4cc>
    4060:	3d02      	subs	r5, #2
    4062:	4443      	add	r3, r8
    4064:	464a      	mov	r2, r9
    4066:	1a9b      	subs	r3, r3, r2
    4068:	465a      	mov	r2, fp
    406a:	0412      	lsls	r2, r2, #16
    406c:	432a      	orrs	r2, r5
    406e:	9903      	ldr	r1, [sp, #12]
    4070:	4693      	mov	fp, r2
    4072:	0c10      	lsrs	r0, r2, #16
    4074:	0c0a      	lsrs	r2, r1, #16
    4076:	4691      	mov	r9, r2
    4078:	0409      	lsls	r1, r1, #16
    407a:	465a      	mov	r2, fp
    407c:	0c09      	lsrs	r1, r1, #16
    407e:	464e      	mov	r6, r9
    4080:	000d      	movs	r5, r1
    4082:	0412      	lsls	r2, r2, #16
    4084:	0c12      	lsrs	r2, r2, #16
    4086:	4345      	muls	r5, r0
    4088:	9105      	str	r1, [sp, #20]
    408a:	4351      	muls	r1, r2
    408c:	4372      	muls	r2, r6
    408e:	4370      	muls	r0, r6
    4090:	1952      	adds	r2, r2, r5
    4092:	0c0e      	lsrs	r6, r1, #16
    4094:	18b2      	adds	r2, r6, r2
    4096:	4295      	cmp	r5, r2
    4098:	d903      	bls.n	40a2 <__aeabi_ddiv+0x2de>
    409a:	2580      	movs	r5, #128	; 0x80
    409c:	026d      	lsls	r5, r5, #9
    409e:	46ac      	mov	ip, r5
    40a0:	4460      	add	r0, ip
    40a2:	0c15      	lsrs	r5, r2, #16
    40a4:	0409      	lsls	r1, r1, #16
    40a6:	0412      	lsls	r2, r2, #16
    40a8:	0c09      	lsrs	r1, r1, #16
    40aa:	1828      	adds	r0, r5, r0
    40ac:	1852      	adds	r2, r2, r1
    40ae:	4283      	cmp	r3, r0
    40b0:	d200      	bcs.n	40b4 <__aeabi_ddiv+0x2f0>
    40b2:	e0ce      	b.n	4252 <__aeabi_ddiv+0x48e>
    40b4:	d100      	bne.n	40b8 <__aeabi_ddiv+0x2f4>
    40b6:	e0c8      	b.n	424a <__aeabi_ddiv+0x486>
    40b8:	1a1d      	subs	r5, r3, r0
    40ba:	4653      	mov	r3, sl
    40bc:	1a9e      	subs	r6, r3, r2
    40be:	45b2      	cmp	sl, r6
    40c0:	4192      	sbcs	r2, r2
    40c2:	4252      	negs	r2, r2
    40c4:	1aab      	subs	r3, r5, r2
    40c6:	469a      	mov	sl, r3
    40c8:	4598      	cmp	r8, r3
    40ca:	d100      	bne.n	40ce <__aeabi_ddiv+0x30a>
    40cc:	e117      	b.n	42fe <__aeabi_ddiv+0x53a>
    40ce:	0039      	movs	r1, r7
    40d0:	0018      	movs	r0, r3
    40d2:	f7fe ff79 	bl	2fc8 <__udivsi3>
    40d6:	9b01      	ldr	r3, [sp, #4]
    40d8:	0005      	movs	r5, r0
    40da:	4343      	muls	r3, r0
    40dc:	0039      	movs	r1, r7
    40de:	4650      	mov	r0, sl
    40e0:	9304      	str	r3, [sp, #16]
    40e2:	f7fe fff7 	bl	30d4 <__aeabi_uidivmod>
    40e6:	9804      	ldr	r0, [sp, #16]
    40e8:	040b      	lsls	r3, r1, #16
    40ea:	0c31      	lsrs	r1, r6, #16
    40ec:	4319      	orrs	r1, r3
    40ee:	4288      	cmp	r0, r1
    40f0:	d909      	bls.n	4106 <__aeabi_ddiv+0x342>
    40f2:	4441      	add	r1, r8
    40f4:	1e6b      	subs	r3, r5, #1
    40f6:	4588      	cmp	r8, r1
    40f8:	d900      	bls.n	40fc <__aeabi_ddiv+0x338>
    40fa:	e107      	b.n	430c <__aeabi_ddiv+0x548>
    40fc:	4288      	cmp	r0, r1
    40fe:	d800      	bhi.n	4102 <__aeabi_ddiv+0x33e>
    4100:	e104      	b.n	430c <__aeabi_ddiv+0x548>
    4102:	3d02      	subs	r5, #2
    4104:	4441      	add	r1, r8
    4106:	9b04      	ldr	r3, [sp, #16]
    4108:	1acb      	subs	r3, r1, r3
    410a:	0018      	movs	r0, r3
    410c:	0039      	movs	r1, r7
    410e:	9304      	str	r3, [sp, #16]
    4110:	f7fe ff5a 	bl	2fc8 <__udivsi3>
    4114:	9b01      	ldr	r3, [sp, #4]
    4116:	4682      	mov	sl, r0
    4118:	4343      	muls	r3, r0
    411a:	0039      	movs	r1, r7
    411c:	9804      	ldr	r0, [sp, #16]
    411e:	9301      	str	r3, [sp, #4]
    4120:	f7fe ffd8 	bl	30d4 <__aeabi_uidivmod>
    4124:	9801      	ldr	r0, [sp, #4]
    4126:	040b      	lsls	r3, r1, #16
    4128:	0431      	lsls	r1, r6, #16
    412a:	0c09      	lsrs	r1, r1, #16
    412c:	4319      	orrs	r1, r3
    412e:	4288      	cmp	r0, r1
    4130:	d90d      	bls.n	414e <__aeabi_ddiv+0x38a>
    4132:	4653      	mov	r3, sl
    4134:	4441      	add	r1, r8
    4136:	3b01      	subs	r3, #1
    4138:	4588      	cmp	r8, r1
    413a:	d900      	bls.n	413e <__aeabi_ddiv+0x37a>
    413c:	e0e8      	b.n	4310 <__aeabi_ddiv+0x54c>
    413e:	4288      	cmp	r0, r1
    4140:	d800      	bhi.n	4144 <__aeabi_ddiv+0x380>
    4142:	e0e5      	b.n	4310 <__aeabi_ddiv+0x54c>
    4144:	2302      	movs	r3, #2
    4146:	425b      	negs	r3, r3
    4148:	469c      	mov	ip, r3
    414a:	4441      	add	r1, r8
    414c:	44e2      	add	sl, ip
    414e:	9b01      	ldr	r3, [sp, #4]
    4150:	042d      	lsls	r5, r5, #16
    4152:	1ace      	subs	r6, r1, r3
    4154:	4651      	mov	r1, sl
    4156:	4329      	orrs	r1, r5
    4158:	9d05      	ldr	r5, [sp, #20]
    415a:	464f      	mov	r7, r9
    415c:	002a      	movs	r2, r5
    415e:	040b      	lsls	r3, r1, #16
    4160:	0c08      	lsrs	r0, r1, #16
    4162:	0c1b      	lsrs	r3, r3, #16
    4164:	435a      	muls	r2, r3
    4166:	4345      	muls	r5, r0
    4168:	437b      	muls	r3, r7
    416a:	4378      	muls	r0, r7
    416c:	195b      	adds	r3, r3, r5
    416e:	0c17      	lsrs	r7, r2, #16
    4170:	18fb      	adds	r3, r7, r3
    4172:	429d      	cmp	r5, r3
    4174:	d903      	bls.n	417e <__aeabi_ddiv+0x3ba>
    4176:	2580      	movs	r5, #128	; 0x80
    4178:	026d      	lsls	r5, r5, #9
    417a:	46ac      	mov	ip, r5
    417c:	4460      	add	r0, ip
    417e:	0c1d      	lsrs	r5, r3, #16
    4180:	0412      	lsls	r2, r2, #16
    4182:	041b      	lsls	r3, r3, #16
    4184:	0c12      	lsrs	r2, r2, #16
    4186:	1828      	adds	r0, r5, r0
    4188:	189b      	adds	r3, r3, r2
    418a:	4286      	cmp	r6, r0
    418c:	d200      	bcs.n	4190 <__aeabi_ddiv+0x3cc>
    418e:	e093      	b.n	42b8 <__aeabi_ddiv+0x4f4>
    4190:	d100      	bne.n	4194 <__aeabi_ddiv+0x3d0>
    4192:	e08e      	b.n	42b2 <__aeabi_ddiv+0x4ee>
    4194:	2301      	movs	r3, #1
    4196:	4319      	orrs	r1, r3
    4198:	4ba0      	ldr	r3, [pc, #640]	; (441c <__aeabi_ddiv+0x658>)
    419a:	18e3      	adds	r3, r4, r3
    419c:	2b00      	cmp	r3, #0
    419e:	dc00      	bgt.n	41a2 <__aeabi_ddiv+0x3de>
    41a0:	e099      	b.n	42d6 <__aeabi_ddiv+0x512>
    41a2:	074a      	lsls	r2, r1, #29
    41a4:	d000      	beq.n	41a8 <__aeabi_ddiv+0x3e4>
    41a6:	e09e      	b.n	42e6 <__aeabi_ddiv+0x522>
    41a8:	465a      	mov	r2, fp
    41aa:	01d2      	lsls	r2, r2, #7
    41ac:	d506      	bpl.n	41bc <__aeabi_ddiv+0x3f8>
    41ae:	465a      	mov	r2, fp
    41b0:	4b9b      	ldr	r3, [pc, #620]	; (4420 <__aeabi_ddiv+0x65c>)
    41b2:	401a      	ands	r2, r3
    41b4:	2380      	movs	r3, #128	; 0x80
    41b6:	4693      	mov	fp, r2
    41b8:	00db      	lsls	r3, r3, #3
    41ba:	18e3      	adds	r3, r4, r3
    41bc:	4a99      	ldr	r2, [pc, #612]	; (4424 <__aeabi_ddiv+0x660>)
    41be:	4293      	cmp	r3, r2
    41c0:	dd68      	ble.n	4294 <__aeabi_ddiv+0x4d0>
    41c2:	2301      	movs	r3, #1
    41c4:	9a02      	ldr	r2, [sp, #8]
    41c6:	4c98      	ldr	r4, [pc, #608]	; (4428 <__aeabi_ddiv+0x664>)
    41c8:	401a      	ands	r2, r3
    41ca:	2300      	movs	r3, #0
    41cc:	4694      	mov	ip, r2
    41ce:	4698      	mov	r8, r3
    41d0:	2200      	movs	r2, #0
    41d2:	e6c5      	b.n	3f60 <__aeabi_ddiv+0x19c>
    41d4:	2280      	movs	r2, #128	; 0x80
    41d6:	464b      	mov	r3, r9
    41d8:	0312      	lsls	r2, r2, #12
    41da:	4213      	tst	r3, r2
    41dc:	d00a      	beq.n	41f4 <__aeabi_ddiv+0x430>
    41de:	465b      	mov	r3, fp
    41e0:	4213      	tst	r3, r2
    41e2:	d106      	bne.n	41f2 <__aeabi_ddiv+0x42e>
    41e4:	431a      	orrs	r2, r3
    41e6:	0312      	lsls	r2, r2, #12
    41e8:	0b12      	lsrs	r2, r2, #12
    41ea:	46ac      	mov	ip, r5
    41ec:	4688      	mov	r8, r1
    41ee:	4c8e      	ldr	r4, [pc, #568]	; (4428 <__aeabi_ddiv+0x664>)
    41f0:	e6b6      	b.n	3f60 <__aeabi_ddiv+0x19c>
    41f2:	464b      	mov	r3, r9
    41f4:	431a      	orrs	r2, r3
    41f6:	0312      	lsls	r2, r2, #12
    41f8:	0b12      	lsrs	r2, r2, #12
    41fa:	46bc      	mov	ip, r7
    41fc:	4c8a      	ldr	r4, [pc, #552]	; (4428 <__aeabi_ddiv+0x664>)
    41fe:	e6af      	b.n	3f60 <__aeabi_ddiv+0x19c>
    4200:	0003      	movs	r3, r0
    4202:	465a      	mov	r2, fp
    4204:	3b28      	subs	r3, #40	; 0x28
    4206:	409a      	lsls	r2, r3
    4208:	2300      	movs	r3, #0
    420a:	4691      	mov	r9, r2
    420c:	4698      	mov	r8, r3
    420e:	e657      	b.n	3ec0 <__aeabi_ddiv+0xfc>
    4210:	4658      	mov	r0, fp
    4212:	f000 ffc7 	bl	51a4 <__clzsi2>
    4216:	3020      	adds	r0, #32
    4218:	e640      	b.n	3e9c <__aeabi_ddiv+0xd8>
    421a:	0003      	movs	r3, r0
    421c:	4652      	mov	r2, sl
    421e:	3b28      	subs	r3, #40	; 0x28
    4220:	409a      	lsls	r2, r3
    4222:	2100      	movs	r1, #0
    4224:	4693      	mov	fp, r2
    4226:	e677      	b.n	3f18 <__aeabi_ddiv+0x154>
    4228:	f000 ffbc 	bl	51a4 <__clzsi2>
    422c:	3020      	adds	r0, #32
    422e:	e65f      	b.n	3ef0 <__aeabi_ddiv+0x12c>
    4230:	4588      	cmp	r8, r1
    4232:	d200      	bcs.n	4236 <__aeabi_ddiv+0x472>
    4234:	e6c7      	b.n	3fc6 <__aeabi_ddiv+0x202>
    4236:	464b      	mov	r3, r9
    4238:	07de      	lsls	r6, r3, #31
    423a:	085d      	lsrs	r5, r3, #1
    423c:	4643      	mov	r3, r8
    423e:	085b      	lsrs	r3, r3, #1
    4240:	431e      	orrs	r6, r3
    4242:	4643      	mov	r3, r8
    4244:	07db      	lsls	r3, r3, #31
    4246:	469a      	mov	sl, r3
    4248:	e6c2      	b.n	3fd0 <__aeabi_ddiv+0x20c>
    424a:	2500      	movs	r5, #0
    424c:	4592      	cmp	sl, r2
    424e:	d300      	bcc.n	4252 <__aeabi_ddiv+0x48e>
    4250:	e733      	b.n	40ba <__aeabi_ddiv+0x2f6>
    4252:	9e03      	ldr	r6, [sp, #12]
    4254:	4659      	mov	r1, fp
    4256:	46b4      	mov	ip, r6
    4258:	44e2      	add	sl, ip
    425a:	45b2      	cmp	sl, r6
    425c:	41ad      	sbcs	r5, r5
    425e:	426d      	negs	r5, r5
    4260:	4445      	add	r5, r8
    4262:	18eb      	adds	r3, r5, r3
    4264:	3901      	subs	r1, #1
    4266:	4598      	cmp	r8, r3
    4268:	d207      	bcs.n	427a <__aeabi_ddiv+0x4b6>
    426a:	4298      	cmp	r0, r3
    426c:	d900      	bls.n	4270 <__aeabi_ddiv+0x4ac>
    426e:	e07f      	b.n	4370 <__aeabi_ddiv+0x5ac>
    4270:	d100      	bne.n	4274 <__aeabi_ddiv+0x4b0>
    4272:	e0bc      	b.n	43ee <__aeabi_ddiv+0x62a>
    4274:	1a1d      	subs	r5, r3, r0
    4276:	468b      	mov	fp, r1
    4278:	e71f      	b.n	40ba <__aeabi_ddiv+0x2f6>
    427a:	4598      	cmp	r8, r3
    427c:	d1fa      	bne.n	4274 <__aeabi_ddiv+0x4b0>
    427e:	9d03      	ldr	r5, [sp, #12]
    4280:	4555      	cmp	r5, sl
    4282:	d9f2      	bls.n	426a <__aeabi_ddiv+0x4a6>
    4284:	4643      	mov	r3, r8
    4286:	468b      	mov	fp, r1
    4288:	1a1d      	subs	r5, r3, r0
    428a:	e716      	b.n	40ba <__aeabi_ddiv+0x2f6>
    428c:	469b      	mov	fp, r3
    428e:	e6ca      	b.n	4026 <__aeabi_ddiv+0x262>
    4290:	0015      	movs	r5, r2
    4292:	e6e7      	b.n	4064 <__aeabi_ddiv+0x2a0>
    4294:	465a      	mov	r2, fp
    4296:	08c9      	lsrs	r1, r1, #3
    4298:	0752      	lsls	r2, r2, #29
    429a:	430a      	orrs	r2, r1
    429c:	055b      	lsls	r3, r3, #21
    429e:	4690      	mov	r8, r2
    42a0:	0d5c      	lsrs	r4, r3, #21
    42a2:	465a      	mov	r2, fp
    42a4:	2301      	movs	r3, #1
    42a6:	9902      	ldr	r1, [sp, #8]
    42a8:	0252      	lsls	r2, r2, #9
    42aa:	4019      	ands	r1, r3
    42ac:	0b12      	lsrs	r2, r2, #12
    42ae:	468c      	mov	ip, r1
    42b0:	e656      	b.n	3f60 <__aeabi_ddiv+0x19c>
    42b2:	2b00      	cmp	r3, #0
    42b4:	d100      	bne.n	42b8 <__aeabi_ddiv+0x4f4>
    42b6:	e76f      	b.n	4198 <__aeabi_ddiv+0x3d4>
    42b8:	4446      	add	r6, r8
    42ba:	1e4a      	subs	r2, r1, #1
    42bc:	45b0      	cmp	r8, r6
    42be:	d929      	bls.n	4314 <__aeabi_ddiv+0x550>
    42c0:	0011      	movs	r1, r2
    42c2:	4286      	cmp	r6, r0
    42c4:	d000      	beq.n	42c8 <__aeabi_ddiv+0x504>
    42c6:	e765      	b.n	4194 <__aeabi_ddiv+0x3d0>
    42c8:	9a03      	ldr	r2, [sp, #12]
    42ca:	4293      	cmp	r3, r2
    42cc:	d000      	beq.n	42d0 <__aeabi_ddiv+0x50c>
    42ce:	e761      	b.n	4194 <__aeabi_ddiv+0x3d0>
    42d0:	e762      	b.n	4198 <__aeabi_ddiv+0x3d4>
    42d2:	2101      	movs	r1, #1
    42d4:	4249      	negs	r1, r1
    42d6:	2001      	movs	r0, #1
    42d8:	1ac2      	subs	r2, r0, r3
    42da:	2a38      	cmp	r2, #56	; 0x38
    42dc:	dd21      	ble.n	4322 <__aeabi_ddiv+0x55e>
    42de:	9b02      	ldr	r3, [sp, #8]
    42e0:	4003      	ands	r3, r0
    42e2:	469c      	mov	ip, r3
    42e4:	e638      	b.n	3f58 <__aeabi_ddiv+0x194>
    42e6:	220f      	movs	r2, #15
    42e8:	400a      	ands	r2, r1
    42ea:	2a04      	cmp	r2, #4
    42ec:	d100      	bne.n	42f0 <__aeabi_ddiv+0x52c>
    42ee:	e75b      	b.n	41a8 <__aeabi_ddiv+0x3e4>
    42f0:	000a      	movs	r2, r1
    42f2:	1d11      	adds	r1, r2, #4
    42f4:	4291      	cmp	r1, r2
    42f6:	4192      	sbcs	r2, r2
    42f8:	4252      	negs	r2, r2
    42fa:	4493      	add	fp, r2
    42fc:	e754      	b.n	41a8 <__aeabi_ddiv+0x3e4>
    42fe:	4b47      	ldr	r3, [pc, #284]	; (441c <__aeabi_ddiv+0x658>)
    4300:	18e3      	adds	r3, r4, r3
    4302:	2b00      	cmp	r3, #0
    4304:	dde5      	ble.n	42d2 <__aeabi_ddiv+0x50e>
    4306:	2201      	movs	r2, #1
    4308:	4252      	negs	r2, r2
    430a:	e7f2      	b.n	42f2 <__aeabi_ddiv+0x52e>
    430c:	001d      	movs	r5, r3
    430e:	e6fa      	b.n	4106 <__aeabi_ddiv+0x342>
    4310:	469a      	mov	sl, r3
    4312:	e71c      	b.n	414e <__aeabi_ddiv+0x38a>
    4314:	42b0      	cmp	r0, r6
    4316:	d839      	bhi.n	438c <__aeabi_ddiv+0x5c8>
    4318:	d06e      	beq.n	43f8 <__aeabi_ddiv+0x634>
    431a:	0011      	movs	r1, r2
    431c:	e73a      	b.n	4194 <__aeabi_ddiv+0x3d0>
    431e:	9302      	str	r3, [sp, #8]
    4320:	e73a      	b.n	4198 <__aeabi_ddiv+0x3d4>
    4322:	2a1f      	cmp	r2, #31
    4324:	dc3c      	bgt.n	43a0 <__aeabi_ddiv+0x5dc>
    4326:	2320      	movs	r3, #32
    4328:	1a9b      	subs	r3, r3, r2
    432a:	000c      	movs	r4, r1
    432c:	4658      	mov	r0, fp
    432e:	4099      	lsls	r1, r3
    4330:	4098      	lsls	r0, r3
    4332:	1e4b      	subs	r3, r1, #1
    4334:	4199      	sbcs	r1, r3
    4336:	465b      	mov	r3, fp
    4338:	40d4      	lsrs	r4, r2
    433a:	40d3      	lsrs	r3, r2
    433c:	4320      	orrs	r0, r4
    433e:	4308      	orrs	r0, r1
    4340:	001a      	movs	r2, r3
    4342:	0743      	lsls	r3, r0, #29
    4344:	d009      	beq.n	435a <__aeabi_ddiv+0x596>
    4346:	230f      	movs	r3, #15
    4348:	4003      	ands	r3, r0
    434a:	2b04      	cmp	r3, #4
    434c:	d005      	beq.n	435a <__aeabi_ddiv+0x596>
    434e:	0001      	movs	r1, r0
    4350:	1d08      	adds	r0, r1, #4
    4352:	4288      	cmp	r0, r1
    4354:	419b      	sbcs	r3, r3
    4356:	425b      	negs	r3, r3
    4358:	18d2      	adds	r2, r2, r3
    435a:	0213      	lsls	r3, r2, #8
    435c:	d53a      	bpl.n	43d4 <__aeabi_ddiv+0x610>
    435e:	2301      	movs	r3, #1
    4360:	9a02      	ldr	r2, [sp, #8]
    4362:	2401      	movs	r4, #1
    4364:	401a      	ands	r2, r3
    4366:	2300      	movs	r3, #0
    4368:	4694      	mov	ip, r2
    436a:	4698      	mov	r8, r3
    436c:	2200      	movs	r2, #0
    436e:	e5f7      	b.n	3f60 <__aeabi_ddiv+0x19c>
    4370:	2102      	movs	r1, #2
    4372:	4249      	negs	r1, r1
    4374:	468c      	mov	ip, r1
    4376:	9d03      	ldr	r5, [sp, #12]
    4378:	44e3      	add	fp, ip
    437a:	46ac      	mov	ip, r5
    437c:	44e2      	add	sl, ip
    437e:	45aa      	cmp	sl, r5
    4380:	41ad      	sbcs	r5, r5
    4382:	426d      	negs	r5, r5
    4384:	4445      	add	r5, r8
    4386:	18ed      	adds	r5, r5, r3
    4388:	1a2d      	subs	r5, r5, r0
    438a:	e696      	b.n	40ba <__aeabi_ddiv+0x2f6>
    438c:	1e8a      	subs	r2, r1, #2
    438e:	9903      	ldr	r1, [sp, #12]
    4390:	004d      	lsls	r5, r1, #1
    4392:	428d      	cmp	r5, r1
    4394:	4189      	sbcs	r1, r1
    4396:	4249      	negs	r1, r1
    4398:	4441      	add	r1, r8
    439a:	1876      	adds	r6, r6, r1
    439c:	9503      	str	r5, [sp, #12]
    439e:	e78f      	b.n	42c0 <__aeabi_ddiv+0x4fc>
    43a0:	201f      	movs	r0, #31
    43a2:	4240      	negs	r0, r0
    43a4:	1ac3      	subs	r3, r0, r3
    43a6:	4658      	mov	r0, fp
    43a8:	40d8      	lsrs	r0, r3
    43aa:	0003      	movs	r3, r0
    43ac:	2a20      	cmp	r2, #32
    43ae:	d028      	beq.n	4402 <__aeabi_ddiv+0x63e>
    43b0:	2040      	movs	r0, #64	; 0x40
    43b2:	465d      	mov	r5, fp
    43b4:	1a82      	subs	r2, r0, r2
    43b6:	4095      	lsls	r5, r2
    43b8:	4329      	orrs	r1, r5
    43ba:	1e4a      	subs	r2, r1, #1
    43bc:	4191      	sbcs	r1, r2
    43be:	4319      	orrs	r1, r3
    43c0:	2307      	movs	r3, #7
    43c2:	2200      	movs	r2, #0
    43c4:	400b      	ands	r3, r1
    43c6:	d009      	beq.n	43dc <__aeabi_ddiv+0x618>
    43c8:	230f      	movs	r3, #15
    43ca:	2200      	movs	r2, #0
    43cc:	400b      	ands	r3, r1
    43ce:	0008      	movs	r0, r1
    43d0:	2b04      	cmp	r3, #4
    43d2:	d1bd      	bne.n	4350 <__aeabi_ddiv+0x58c>
    43d4:	0001      	movs	r1, r0
    43d6:	0753      	lsls	r3, r2, #29
    43d8:	0252      	lsls	r2, r2, #9
    43da:	0b12      	lsrs	r2, r2, #12
    43dc:	08c9      	lsrs	r1, r1, #3
    43de:	4319      	orrs	r1, r3
    43e0:	2301      	movs	r3, #1
    43e2:	4688      	mov	r8, r1
    43e4:	9902      	ldr	r1, [sp, #8]
    43e6:	2400      	movs	r4, #0
    43e8:	4019      	ands	r1, r3
    43ea:	468c      	mov	ip, r1
    43ec:	e5b8      	b.n	3f60 <__aeabi_ddiv+0x19c>
    43ee:	4552      	cmp	r2, sl
    43f0:	d8be      	bhi.n	4370 <__aeabi_ddiv+0x5ac>
    43f2:	468b      	mov	fp, r1
    43f4:	2500      	movs	r5, #0
    43f6:	e660      	b.n	40ba <__aeabi_ddiv+0x2f6>
    43f8:	9d03      	ldr	r5, [sp, #12]
    43fa:	429d      	cmp	r5, r3
    43fc:	d3c6      	bcc.n	438c <__aeabi_ddiv+0x5c8>
    43fe:	0011      	movs	r1, r2
    4400:	e762      	b.n	42c8 <__aeabi_ddiv+0x504>
    4402:	2500      	movs	r5, #0
    4404:	e7d8      	b.n	43b8 <__aeabi_ddiv+0x5f4>
    4406:	2280      	movs	r2, #128	; 0x80
    4408:	465b      	mov	r3, fp
    440a:	0312      	lsls	r2, r2, #12
    440c:	431a      	orrs	r2, r3
    440e:	9b01      	ldr	r3, [sp, #4]
    4410:	0312      	lsls	r2, r2, #12
    4412:	0b12      	lsrs	r2, r2, #12
    4414:	469c      	mov	ip, r3
    4416:	4688      	mov	r8, r1
    4418:	4c03      	ldr	r4, [pc, #12]	; (4428 <__aeabi_ddiv+0x664>)
    441a:	e5a1      	b.n	3f60 <__aeabi_ddiv+0x19c>
    441c:	000003ff 	.word	0x000003ff
    4420:	feffffff 	.word	0xfeffffff
    4424:	000007fe 	.word	0x000007fe
    4428:	000007ff 	.word	0x000007ff

0000442c <__aeabi_dmul>:
    442c:	b5f0      	push	{r4, r5, r6, r7, lr}
    442e:	4657      	mov	r7, sl
    4430:	4645      	mov	r5, r8
    4432:	46de      	mov	lr, fp
    4434:	464e      	mov	r6, r9
    4436:	b5e0      	push	{r5, r6, r7, lr}
    4438:	030c      	lsls	r4, r1, #12
    443a:	4698      	mov	r8, r3
    443c:	004e      	lsls	r6, r1, #1
    443e:	0b23      	lsrs	r3, r4, #12
    4440:	b087      	sub	sp, #28
    4442:	0007      	movs	r7, r0
    4444:	4692      	mov	sl, r2
    4446:	469b      	mov	fp, r3
    4448:	0d76      	lsrs	r6, r6, #21
    444a:	0fcd      	lsrs	r5, r1, #31
    444c:	2e00      	cmp	r6, #0
    444e:	d06b      	beq.n	4528 <__aeabi_dmul+0xfc>
    4450:	4b6d      	ldr	r3, [pc, #436]	; (4608 <__aeabi_dmul+0x1dc>)
    4452:	429e      	cmp	r6, r3
    4454:	d035      	beq.n	44c2 <__aeabi_dmul+0x96>
    4456:	2480      	movs	r4, #128	; 0x80
    4458:	465b      	mov	r3, fp
    445a:	0f42      	lsrs	r2, r0, #29
    445c:	0424      	lsls	r4, r4, #16
    445e:	00db      	lsls	r3, r3, #3
    4460:	4314      	orrs	r4, r2
    4462:	431c      	orrs	r4, r3
    4464:	00c3      	lsls	r3, r0, #3
    4466:	4699      	mov	r9, r3
    4468:	4b68      	ldr	r3, [pc, #416]	; (460c <__aeabi_dmul+0x1e0>)
    446a:	46a3      	mov	fp, r4
    446c:	469c      	mov	ip, r3
    446e:	2300      	movs	r3, #0
    4470:	2700      	movs	r7, #0
    4472:	4466      	add	r6, ip
    4474:	9302      	str	r3, [sp, #8]
    4476:	4643      	mov	r3, r8
    4478:	031c      	lsls	r4, r3, #12
    447a:	005a      	lsls	r2, r3, #1
    447c:	0fdb      	lsrs	r3, r3, #31
    447e:	4650      	mov	r0, sl
    4480:	0b24      	lsrs	r4, r4, #12
    4482:	0d52      	lsrs	r2, r2, #21
    4484:	4698      	mov	r8, r3
    4486:	d100      	bne.n	448a <__aeabi_dmul+0x5e>
    4488:	e076      	b.n	4578 <__aeabi_dmul+0x14c>
    448a:	4b5f      	ldr	r3, [pc, #380]	; (4608 <__aeabi_dmul+0x1dc>)
    448c:	429a      	cmp	r2, r3
    448e:	d06d      	beq.n	456c <__aeabi_dmul+0x140>
    4490:	2380      	movs	r3, #128	; 0x80
    4492:	0f41      	lsrs	r1, r0, #29
    4494:	041b      	lsls	r3, r3, #16
    4496:	430b      	orrs	r3, r1
    4498:	495c      	ldr	r1, [pc, #368]	; (460c <__aeabi_dmul+0x1e0>)
    449a:	00e4      	lsls	r4, r4, #3
    449c:	468c      	mov	ip, r1
    449e:	431c      	orrs	r4, r3
    44a0:	00c3      	lsls	r3, r0, #3
    44a2:	2000      	movs	r0, #0
    44a4:	4462      	add	r2, ip
    44a6:	4641      	mov	r1, r8
    44a8:	18b6      	adds	r6, r6, r2
    44aa:	4069      	eors	r1, r5
    44ac:	1c72      	adds	r2, r6, #1
    44ae:	9101      	str	r1, [sp, #4]
    44b0:	4694      	mov	ip, r2
    44b2:	4307      	orrs	r7, r0
    44b4:	2f0f      	cmp	r7, #15
    44b6:	d900      	bls.n	44ba <__aeabi_dmul+0x8e>
    44b8:	e0b0      	b.n	461c <__aeabi_dmul+0x1f0>
    44ba:	4a55      	ldr	r2, [pc, #340]	; (4610 <__aeabi_dmul+0x1e4>)
    44bc:	00bf      	lsls	r7, r7, #2
    44be:	59d2      	ldr	r2, [r2, r7]
    44c0:	4697      	mov	pc, r2
    44c2:	465b      	mov	r3, fp
    44c4:	4303      	orrs	r3, r0
    44c6:	4699      	mov	r9, r3
    44c8:	d000      	beq.n	44cc <__aeabi_dmul+0xa0>
    44ca:	e087      	b.n	45dc <__aeabi_dmul+0x1b0>
    44cc:	2300      	movs	r3, #0
    44ce:	469b      	mov	fp, r3
    44d0:	3302      	adds	r3, #2
    44d2:	2708      	movs	r7, #8
    44d4:	9302      	str	r3, [sp, #8]
    44d6:	e7ce      	b.n	4476 <__aeabi_dmul+0x4a>
    44d8:	4642      	mov	r2, r8
    44da:	9201      	str	r2, [sp, #4]
    44dc:	2802      	cmp	r0, #2
    44de:	d067      	beq.n	45b0 <__aeabi_dmul+0x184>
    44e0:	2803      	cmp	r0, #3
    44e2:	d100      	bne.n	44e6 <__aeabi_dmul+0xba>
    44e4:	e20e      	b.n	4904 <__aeabi_dmul+0x4d8>
    44e6:	2801      	cmp	r0, #1
    44e8:	d000      	beq.n	44ec <__aeabi_dmul+0xc0>
    44ea:	e162      	b.n	47b2 <__aeabi_dmul+0x386>
    44ec:	2300      	movs	r3, #0
    44ee:	2400      	movs	r4, #0
    44f0:	2200      	movs	r2, #0
    44f2:	4699      	mov	r9, r3
    44f4:	9901      	ldr	r1, [sp, #4]
    44f6:	4001      	ands	r1, r0
    44f8:	b2cd      	uxtb	r5, r1
    44fa:	2100      	movs	r1, #0
    44fc:	0312      	lsls	r2, r2, #12
    44fe:	0d0b      	lsrs	r3, r1, #20
    4500:	0b12      	lsrs	r2, r2, #12
    4502:	051b      	lsls	r3, r3, #20
    4504:	4313      	orrs	r3, r2
    4506:	4a43      	ldr	r2, [pc, #268]	; (4614 <__aeabi_dmul+0x1e8>)
    4508:	0524      	lsls	r4, r4, #20
    450a:	4013      	ands	r3, r2
    450c:	431c      	orrs	r4, r3
    450e:	0064      	lsls	r4, r4, #1
    4510:	07ed      	lsls	r5, r5, #31
    4512:	0864      	lsrs	r4, r4, #1
    4514:	432c      	orrs	r4, r5
    4516:	4648      	mov	r0, r9
    4518:	0021      	movs	r1, r4
    451a:	b007      	add	sp, #28
    451c:	bc3c      	pop	{r2, r3, r4, r5}
    451e:	4690      	mov	r8, r2
    4520:	4699      	mov	r9, r3
    4522:	46a2      	mov	sl, r4
    4524:	46ab      	mov	fp, r5
    4526:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4528:	4303      	orrs	r3, r0
    452a:	4699      	mov	r9, r3
    452c:	d04f      	beq.n	45ce <__aeabi_dmul+0x1a2>
    452e:	465b      	mov	r3, fp
    4530:	2b00      	cmp	r3, #0
    4532:	d100      	bne.n	4536 <__aeabi_dmul+0x10a>
    4534:	e189      	b.n	484a <__aeabi_dmul+0x41e>
    4536:	4658      	mov	r0, fp
    4538:	f000 fe34 	bl	51a4 <__clzsi2>
    453c:	0003      	movs	r3, r0
    453e:	3b0b      	subs	r3, #11
    4540:	2b1c      	cmp	r3, #28
    4542:	dd00      	ble.n	4546 <__aeabi_dmul+0x11a>
    4544:	e17a      	b.n	483c <__aeabi_dmul+0x410>
    4546:	221d      	movs	r2, #29
    4548:	1ad3      	subs	r3, r2, r3
    454a:	003a      	movs	r2, r7
    454c:	0001      	movs	r1, r0
    454e:	465c      	mov	r4, fp
    4550:	40da      	lsrs	r2, r3
    4552:	3908      	subs	r1, #8
    4554:	408c      	lsls	r4, r1
    4556:	0013      	movs	r3, r2
    4558:	408f      	lsls	r7, r1
    455a:	4323      	orrs	r3, r4
    455c:	469b      	mov	fp, r3
    455e:	46b9      	mov	r9, r7
    4560:	2300      	movs	r3, #0
    4562:	4e2d      	ldr	r6, [pc, #180]	; (4618 <__aeabi_dmul+0x1ec>)
    4564:	2700      	movs	r7, #0
    4566:	1a36      	subs	r6, r6, r0
    4568:	9302      	str	r3, [sp, #8]
    456a:	e784      	b.n	4476 <__aeabi_dmul+0x4a>
    456c:	4653      	mov	r3, sl
    456e:	4323      	orrs	r3, r4
    4570:	d12a      	bne.n	45c8 <__aeabi_dmul+0x19c>
    4572:	2400      	movs	r4, #0
    4574:	2002      	movs	r0, #2
    4576:	e796      	b.n	44a6 <__aeabi_dmul+0x7a>
    4578:	4653      	mov	r3, sl
    457a:	4323      	orrs	r3, r4
    457c:	d020      	beq.n	45c0 <__aeabi_dmul+0x194>
    457e:	2c00      	cmp	r4, #0
    4580:	d100      	bne.n	4584 <__aeabi_dmul+0x158>
    4582:	e157      	b.n	4834 <__aeabi_dmul+0x408>
    4584:	0020      	movs	r0, r4
    4586:	f000 fe0d 	bl	51a4 <__clzsi2>
    458a:	0003      	movs	r3, r0
    458c:	3b0b      	subs	r3, #11
    458e:	2b1c      	cmp	r3, #28
    4590:	dd00      	ble.n	4594 <__aeabi_dmul+0x168>
    4592:	e149      	b.n	4828 <__aeabi_dmul+0x3fc>
    4594:	211d      	movs	r1, #29
    4596:	1acb      	subs	r3, r1, r3
    4598:	4651      	mov	r1, sl
    459a:	0002      	movs	r2, r0
    459c:	40d9      	lsrs	r1, r3
    459e:	4653      	mov	r3, sl
    45a0:	3a08      	subs	r2, #8
    45a2:	4094      	lsls	r4, r2
    45a4:	4093      	lsls	r3, r2
    45a6:	430c      	orrs	r4, r1
    45a8:	4a1b      	ldr	r2, [pc, #108]	; (4618 <__aeabi_dmul+0x1ec>)
    45aa:	1a12      	subs	r2, r2, r0
    45ac:	2000      	movs	r0, #0
    45ae:	e77a      	b.n	44a6 <__aeabi_dmul+0x7a>
    45b0:	2501      	movs	r5, #1
    45b2:	9b01      	ldr	r3, [sp, #4]
    45b4:	4c14      	ldr	r4, [pc, #80]	; (4608 <__aeabi_dmul+0x1dc>)
    45b6:	401d      	ands	r5, r3
    45b8:	2300      	movs	r3, #0
    45ba:	2200      	movs	r2, #0
    45bc:	4699      	mov	r9, r3
    45be:	e79c      	b.n	44fa <__aeabi_dmul+0xce>
    45c0:	2400      	movs	r4, #0
    45c2:	2200      	movs	r2, #0
    45c4:	2001      	movs	r0, #1
    45c6:	e76e      	b.n	44a6 <__aeabi_dmul+0x7a>
    45c8:	4653      	mov	r3, sl
    45ca:	2003      	movs	r0, #3
    45cc:	e76b      	b.n	44a6 <__aeabi_dmul+0x7a>
    45ce:	2300      	movs	r3, #0
    45d0:	469b      	mov	fp, r3
    45d2:	3301      	adds	r3, #1
    45d4:	2704      	movs	r7, #4
    45d6:	2600      	movs	r6, #0
    45d8:	9302      	str	r3, [sp, #8]
    45da:	e74c      	b.n	4476 <__aeabi_dmul+0x4a>
    45dc:	2303      	movs	r3, #3
    45de:	4681      	mov	r9, r0
    45e0:	270c      	movs	r7, #12
    45e2:	9302      	str	r3, [sp, #8]
    45e4:	e747      	b.n	4476 <__aeabi_dmul+0x4a>
    45e6:	2280      	movs	r2, #128	; 0x80
    45e8:	2300      	movs	r3, #0
    45ea:	2500      	movs	r5, #0
    45ec:	0312      	lsls	r2, r2, #12
    45ee:	4699      	mov	r9, r3
    45f0:	4c05      	ldr	r4, [pc, #20]	; (4608 <__aeabi_dmul+0x1dc>)
    45f2:	e782      	b.n	44fa <__aeabi_dmul+0xce>
    45f4:	465c      	mov	r4, fp
    45f6:	464b      	mov	r3, r9
    45f8:	9802      	ldr	r0, [sp, #8]
    45fa:	e76f      	b.n	44dc <__aeabi_dmul+0xb0>
    45fc:	465c      	mov	r4, fp
    45fe:	464b      	mov	r3, r9
    4600:	9501      	str	r5, [sp, #4]
    4602:	9802      	ldr	r0, [sp, #8]
    4604:	e76a      	b.n	44dc <__aeabi_dmul+0xb0>
    4606:	46c0      	nop			; (mov r8, r8)
    4608:	000007ff 	.word	0x000007ff
    460c:	fffffc01 	.word	0xfffffc01
    4610:	000058f0 	.word	0x000058f0
    4614:	800fffff 	.word	0x800fffff
    4618:	fffffc0d 	.word	0xfffffc0d
    461c:	464a      	mov	r2, r9
    461e:	4649      	mov	r1, r9
    4620:	0c17      	lsrs	r7, r2, #16
    4622:	0c1a      	lsrs	r2, r3, #16
    4624:	041b      	lsls	r3, r3, #16
    4626:	0c1b      	lsrs	r3, r3, #16
    4628:	0408      	lsls	r0, r1, #16
    462a:	0019      	movs	r1, r3
    462c:	0c00      	lsrs	r0, r0, #16
    462e:	4341      	muls	r1, r0
    4630:	0015      	movs	r5, r2
    4632:	4688      	mov	r8, r1
    4634:	0019      	movs	r1, r3
    4636:	437d      	muls	r5, r7
    4638:	4379      	muls	r1, r7
    463a:	9503      	str	r5, [sp, #12]
    463c:	4689      	mov	r9, r1
    463e:	0029      	movs	r1, r5
    4640:	0015      	movs	r5, r2
    4642:	4345      	muls	r5, r0
    4644:	444d      	add	r5, r9
    4646:	9502      	str	r5, [sp, #8]
    4648:	4645      	mov	r5, r8
    464a:	0c2d      	lsrs	r5, r5, #16
    464c:	46aa      	mov	sl, r5
    464e:	9d02      	ldr	r5, [sp, #8]
    4650:	4455      	add	r5, sl
    4652:	45a9      	cmp	r9, r5
    4654:	d906      	bls.n	4664 <__aeabi_dmul+0x238>
    4656:	468a      	mov	sl, r1
    4658:	2180      	movs	r1, #128	; 0x80
    465a:	0249      	lsls	r1, r1, #9
    465c:	4689      	mov	r9, r1
    465e:	44ca      	add	sl, r9
    4660:	4651      	mov	r1, sl
    4662:	9103      	str	r1, [sp, #12]
    4664:	0c29      	lsrs	r1, r5, #16
    4666:	9104      	str	r1, [sp, #16]
    4668:	4641      	mov	r1, r8
    466a:	0409      	lsls	r1, r1, #16
    466c:	042d      	lsls	r5, r5, #16
    466e:	0c09      	lsrs	r1, r1, #16
    4670:	4688      	mov	r8, r1
    4672:	0029      	movs	r1, r5
    4674:	0c25      	lsrs	r5, r4, #16
    4676:	0424      	lsls	r4, r4, #16
    4678:	4441      	add	r1, r8
    467a:	0c24      	lsrs	r4, r4, #16
    467c:	9105      	str	r1, [sp, #20]
    467e:	0021      	movs	r1, r4
    4680:	4341      	muls	r1, r0
    4682:	4688      	mov	r8, r1
    4684:	0021      	movs	r1, r4
    4686:	4379      	muls	r1, r7
    4688:	468a      	mov	sl, r1
    468a:	4368      	muls	r0, r5
    468c:	4641      	mov	r1, r8
    468e:	4450      	add	r0, sl
    4690:	4681      	mov	r9, r0
    4692:	0c08      	lsrs	r0, r1, #16
    4694:	4448      	add	r0, r9
    4696:	436f      	muls	r7, r5
    4698:	4582      	cmp	sl, r0
    469a:	d903      	bls.n	46a4 <__aeabi_dmul+0x278>
    469c:	2180      	movs	r1, #128	; 0x80
    469e:	0249      	lsls	r1, r1, #9
    46a0:	4689      	mov	r9, r1
    46a2:	444f      	add	r7, r9
    46a4:	0c01      	lsrs	r1, r0, #16
    46a6:	4689      	mov	r9, r1
    46a8:	0039      	movs	r1, r7
    46aa:	4449      	add	r1, r9
    46ac:	9102      	str	r1, [sp, #8]
    46ae:	4641      	mov	r1, r8
    46b0:	040f      	lsls	r7, r1, #16
    46b2:	9904      	ldr	r1, [sp, #16]
    46b4:	0c3f      	lsrs	r7, r7, #16
    46b6:	4688      	mov	r8, r1
    46b8:	0400      	lsls	r0, r0, #16
    46ba:	19c0      	adds	r0, r0, r7
    46bc:	4480      	add	r8, r0
    46be:	4641      	mov	r1, r8
    46c0:	9104      	str	r1, [sp, #16]
    46c2:	4659      	mov	r1, fp
    46c4:	0c0f      	lsrs	r7, r1, #16
    46c6:	0409      	lsls	r1, r1, #16
    46c8:	0c09      	lsrs	r1, r1, #16
    46ca:	4688      	mov	r8, r1
    46cc:	4359      	muls	r1, r3
    46ce:	468a      	mov	sl, r1
    46d0:	0039      	movs	r1, r7
    46d2:	4351      	muls	r1, r2
    46d4:	4689      	mov	r9, r1
    46d6:	4641      	mov	r1, r8
    46d8:	434a      	muls	r2, r1
    46da:	4651      	mov	r1, sl
    46dc:	0c09      	lsrs	r1, r1, #16
    46de:	468b      	mov	fp, r1
    46e0:	437b      	muls	r3, r7
    46e2:	18d2      	adds	r2, r2, r3
    46e4:	445a      	add	r2, fp
    46e6:	4293      	cmp	r3, r2
    46e8:	d903      	bls.n	46f2 <__aeabi_dmul+0x2c6>
    46ea:	2380      	movs	r3, #128	; 0x80
    46ec:	025b      	lsls	r3, r3, #9
    46ee:	469b      	mov	fp, r3
    46f0:	44d9      	add	r9, fp
    46f2:	4651      	mov	r1, sl
    46f4:	0409      	lsls	r1, r1, #16
    46f6:	0c09      	lsrs	r1, r1, #16
    46f8:	468a      	mov	sl, r1
    46fa:	4641      	mov	r1, r8
    46fc:	4361      	muls	r1, r4
    46fe:	437c      	muls	r4, r7
    4700:	0c13      	lsrs	r3, r2, #16
    4702:	0412      	lsls	r2, r2, #16
    4704:	444b      	add	r3, r9
    4706:	4452      	add	r2, sl
    4708:	46a1      	mov	r9, r4
    470a:	468a      	mov	sl, r1
    470c:	003c      	movs	r4, r7
    470e:	4641      	mov	r1, r8
    4710:	436c      	muls	r4, r5
    4712:	434d      	muls	r5, r1
    4714:	4651      	mov	r1, sl
    4716:	444d      	add	r5, r9
    4718:	0c0f      	lsrs	r7, r1, #16
    471a:	197d      	adds	r5, r7, r5
    471c:	45a9      	cmp	r9, r5
    471e:	d903      	bls.n	4728 <__aeabi_dmul+0x2fc>
    4720:	2180      	movs	r1, #128	; 0x80
    4722:	0249      	lsls	r1, r1, #9
    4724:	4688      	mov	r8, r1
    4726:	4444      	add	r4, r8
    4728:	9f04      	ldr	r7, [sp, #16]
    472a:	9903      	ldr	r1, [sp, #12]
    472c:	46b8      	mov	r8, r7
    472e:	4441      	add	r1, r8
    4730:	468b      	mov	fp, r1
    4732:	4583      	cmp	fp, r0
    4734:	4180      	sbcs	r0, r0
    4736:	4241      	negs	r1, r0
    4738:	4688      	mov	r8, r1
    473a:	4651      	mov	r1, sl
    473c:	0408      	lsls	r0, r1, #16
    473e:	042f      	lsls	r7, r5, #16
    4740:	0c00      	lsrs	r0, r0, #16
    4742:	183f      	adds	r7, r7, r0
    4744:	4658      	mov	r0, fp
    4746:	9902      	ldr	r1, [sp, #8]
    4748:	1810      	adds	r0, r2, r0
    474a:	4689      	mov	r9, r1
    474c:	4290      	cmp	r0, r2
    474e:	4192      	sbcs	r2, r2
    4750:	444f      	add	r7, r9
    4752:	46ba      	mov	sl, r7
    4754:	4252      	negs	r2, r2
    4756:	4699      	mov	r9, r3
    4758:	4693      	mov	fp, r2
    475a:	44c2      	add	sl, r8
    475c:	44d1      	add	r9, sl
    475e:	44cb      	add	fp, r9
    4760:	428f      	cmp	r7, r1
    4762:	41bf      	sbcs	r7, r7
    4764:	45c2      	cmp	sl, r8
    4766:	4189      	sbcs	r1, r1
    4768:	4599      	cmp	r9, r3
    476a:	419b      	sbcs	r3, r3
    476c:	4593      	cmp	fp, r2
    476e:	4192      	sbcs	r2, r2
    4770:	427f      	negs	r7, r7
    4772:	4249      	negs	r1, r1
    4774:	0c2d      	lsrs	r5, r5, #16
    4776:	4252      	negs	r2, r2
    4778:	430f      	orrs	r7, r1
    477a:	425b      	negs	r3, r3
    477c:	4313      	orrs	r3, r2
    477e:	197f      	adds	r7, r7, r5
    4780:	18ff      	adds	r7, r7, r3
    4782:	465b      	mov	r3, fp
    4784:	193c      	adds	r4, r7, r4
    4786:	0ddb      	lsrs	r3, r3, #23
    4788:	9a05      	ldr	r2, [sp, #20]
    478a:	0264      	lsls	r4, r4, #9
    478c:	431c      	orrs	r4, r3
    478e:	0243      	lsls	r3, r0, #9
    4790:	4313      	orrs	r3, r2
    4792:	1e5d      	subs	r5, r3, #1
    4794:	41ab      	sbcs	r3, r5
    4796:	465a      	mov	r2, fp
    4798:	0dc0      	lsrs	r0, r0, #23
    479a:	4303      	orrs	r3, r0
    479c:	0252      	lsls	r2, r2, #9
    479e:	4313      	orrs	r3, r2
    47a0:	01e2      	lsls	r2, r4, #7
    47a2:	d556      	bpl.n	4852 <__aeabi_dmul+0x426>
    47a4:	2001      	movs	r0, #1
    47a6:	085a      	lsrs	r2, r3, #1
    47a8:	4003      	ands	r3, r0
    47aa:	4313      	orrs	r3, r2
    47ac:	07e2      	lsls	r2, r4, #31
    47ae:	4313      	orrs	r3, r2
    47b0:	0864      	lsrs	r4, r4, #1
    47b2:	485a      	ldr	r0, [pc, #360]	; (491c <__aeabi_dmul+0x4f0>)
    47b4:	4460      	add	r0, ip
    47b6:	2800      	cmp	r0, #0
    47b8:	dd4d      	ble.n	4856 <__aeabi_dmul+0x42a>
    47ba:	075a      	lsls	r2, r3, #29
    47bc:	d009      	beq.n	47d2 <__aeabi_dmul+0x3a6>
    47be:	220f      	movs	r2, #15
    47c0:	401a      	ands	r2, r3
    47c2:	2a04      	cmp	r2, #4
    47c4:	d005      	beq.n	47d2 <__aeabi_dmul+0x3a6>
    47c6:	1d1a      	adds	r2, r3, #4
    47c8:	429a      	cmp	r2, r3
    47ca:	419b      	sbcs	r3, r3
    47cc:	425b      	negs	r3, r3
    47ce:	18e4      	adds	r4, r4, r3
    47d0:	0013      	movs	r3, r2
    47d2:	01e2      	lsls	r2, r4, #7
    47d4:	d504      	bpl.n	47e0 <__aeabi_dmul+0x3b4>
    47d6:	2080      	movs	r0, #128	; 0x80
    47d8:	4a51      	ldr	r2, [pc, #324]	; (4920 <__aeabi_dmul+0x4f4>)
    47da:	00c0      	lsls	r0, r0, #3
    47dc:	4014      	ands	r4, r2
    47de:	4460      	add	r0, ip
    47e0:	4a50      	ldr	r2, [pc, #320]	; (4924 <__aeabi_dmul+0x4f8>)
    47e2:	4290      	cmp	r0, r2
    47e4:	dd00      	ble.n	47e8 <__aeabi_dmul+0x3bc>
    47e6:	e6e3      	b.n	45b0 <__aeabi_dmul+0x184>
    47e8:	2501      	movs	r5, #1
    47ea:	08db      	lsrs	r3, r3, #3
    47ec:	0762      	lsls	r2, r4, #29
    47ee:	431a      	orrs	r2, r3
    47f0:	0264      	lsls	r4, r4, #9
    47f2:	9b01      	ldr	r3, [sp, #4]
    47f4:	4691      	mov	r9, r2
    47f6:	0b22      	lsrs	r2, r4, #12
    47f8:	0544      	lsls	r4, r0, #21
    47fa:	0d64      	lsrs	r4, r4, #21
    47fc:	401d      	ands	r5, r3
    47fe:	e67c      	b.n	44fa <__aeabi_dmul+0xce>
    4800:	2280      	movs	r2, #128	; 0x80
    4802:	4659      	mov	r1, fp
    4804:	0312      	lsls	r2, r2, #12
    4806:	4211      	tst	r1, r2
    4808:	d008      	beq.n	481c <__aeabi_dmul+0x3f0>
    480a:	4214      	tst	r4, r2
    480c:	d106      	bne.n	481c <__aeabi_dmul+0x3f0>
    480e:	4322      	orrs	r2, r4
    4810:	0312      	lsls	r2, r2, #12
    4812:	0b12      	lsrs	r2, r2, #12
    4814:	4645      	mov	r5, r8
    4816:	4699      	mov	r9, r3
    4818:	4c43      	ldr	r4, [pc, #268]	; (4928 <__aeabi_dmul+0x4fc>)
    481a:	e66e      	b.n	44fa <__aeabi_dmul+0xce>
    481c:	465b      	mov	r3, fp
    481e:	431a      	orrs	r2, r3
    4820:	0312      	lsls	r2, r2, #12
    4822:	0b12      	lsrs	r2, r2, #12
    4824:	4c40      	ldr	r4, [pc, #256]	; (4928 <__aeabi_dmul+0x4fc>)
    4826:	e668      	b.n	44fa <__aeabi_dmul+0xce>
    4828:	0003      	movs	r3, r0
    482a:	4654      	mov	r4, sl
    482c:	3b28      	subs	r3, #40	; 0x28
    482e:	409c      	lsls	r4, r3
    4830:	2300      	movs	r3, #0
    4832:	e6b9      	b.n	45a8 <__aeabi_dmul+0x17c>
    4834:	f000 fcb6 	bl	51a4 <__clzsi2>
    4838:	3020      	adds	r0, #32
    483a:	e6a6      	b.n	458a <__aeabi_dmul+0x15e>
    483c:	0003      	movs	r3, r0
    483e:	3b28      	subs	r3, #40	; 0x28
    4840:	409f      	lsls	r7, r3
    4842:	2300      	movs	r3, #0
    4844:	46bb      	mov	fp, r7
    4846:	4699      	mov	r9, r3
    4848:	e68a      	b.n	4560 <__aeabi_dmul+0x134>
    484a:	f000 fcab 	bl	51a4 <__clzsi2>
    484e:	3020      	adds	r0, #32
    4850:	e674      	b.n	453c <__aeabi_dmul+0x110>
    4852:	46b4      	mov	ip, r6
    4854:	e7ad      	b.n	47b2 <__aeabi_dmul+0x386>
    4856:	2501      	movs	r5, #1
    4858:	1a2a      	subs	r2, r5, r0
    485a:	2a38      	cmp	r2, #56	; 0x38
    485c:	dd06      	ble.n	486c <__aeabi_dmul+0x440>
    485e:	9b01      	ldr	r3, [sp, #4]
    4860:	2400      	movs	r4, #0
    4862:	401d      	ands	r5, r3
    4864:	2300      	movs	r3, #0
    4866:	2200      	movs	r2, #0
    4868:	4699      	mov	r9, r3
    486a:	e646      	b.n	44fa <__aeabi_dmul+0xce>
    486c:	2a1f      	cmp	r2, #31
    486e:	dc21      	bgt.n	48b4 <__aeabi_dmul+0x488>
    4870:	2520      	movs	r5, #32
    4872:	0020      	movs	r0, r4
    4874:	1aad      	subs	r5, r5, r2
    4876:	001e      	movs	r6, r3
    4878:	40ab      	lsls	r3, r5
    487a:	40a8      	lsls	r0, r5
    487c:	40d6      	lsrs	r6, r2
    487e:	1e5d      	subs	r5, r3, #1
    4880:	41ab      	sbcs	r3, r5
    4882:	4330      	orrs	r0, r6
    4884:	4318      	orrs	r0, r3
    4886:	40d4      	lsrs	r4, r2
    4888:	0743      	lsls	r3, r0, #29
    488a:	d009      	beq.n	48a0 <__aeabi_dmul+0x474>
    488c:	230f      	movs	r3, #15
    488e:	4003      	ands	r3, r0
    4890:	2b04      	cmp	r3, #4
    4892:	d005      	beq.n	48a0 <__aeabi_dmul+0x474>
    4894:	0003      	movs	r3, r0
    4896:	1d18      	adds	r0, r3, #4
    4898:	4298      	cmp	r0, r3
    489a:	419b      	sbcs	r3, r3
    489c:	425b      	negs	r3, r3
    489e:	18e4      	adds	r4, r4, r3
    48a0:	0223      	lsls	r3, r4, #8
    48a2:	d521      	bpl.n	48e8 <__aeabi_dmul+0x4bc>
    48a4:	2501      	movs	r5, #1
    48a6:	9b01      	ldr	r3, [sp, #4]
    48a8:	2401      	movs	r4, #1
    48aa:	401d      	ands	r5, r3
    48ac:	2300      	movs	r3, #0
    48ae:	2200      	movs	r2, #0
    48b0:	4699      	mov	r9, r3
    48b2:	e622      	b.n	44fa <__aeabi_dmul+0xce>
    48b4:	251f      	movs	r5, #31
    48b6:	0021      	movs	r1, r4
    48b8:	426d      	negs	r5, r5
    48ba:	1a28      	subs	r0, r5, r0
    48bc:	40c1      	lsrs	r1, r0
    48be:	0008      	movs	r0, r1
    48c0:	2a20      	cmp	r2, #32
    48c2:	d01d      	beq.n	4900 <__aeabi_dmul+0x4d4>
    48c4:	355f      	adds	r5, #95	; 0x5f
    48c6:	1aaa      	subs	r2, r5, r2
    48c8:	4094      	lsls	r4, r2
    48ca:	4323      	orrs	r3, r4
    48cc:	1e5c      	subs	r4, r3, #1
    48ce:	41a3      	sbcs	r3, r4
    48d0:	2507      	movs	r5, #7
    48d2:	4303      	orrs	r3, r0
    48d4:	401d      	ands	r5, r3
    48d6:	2200      	movs	r2, #0
    48d8:	2d00      	cmp	r5, #0
    48da:	d009      	beq.n	48f0 <__aeabi_dmul+0x4c4>
    48dc:	220f      	movs	r2, #15
    48de:	2400      	movs	r4, #0
    48e0:	401a      	ands	r2, r3
    48e2:	0018      	movs	r0, r3
    48e4:	2a04      	cmp	r2, #4
    48e6:	d1d6      	bne.n	4896 <__aeabi_dmul+0x46a>
    48e8:	0003      	movs	r3, r0
    48ea:	0765      	lsls	r5, r4, #29
    48ec:	0264      	lsls	r4, r4, #9
    48ee:	0b22      	lsrs	r2, r4, #12
    48f0:	08db      	lsrs	r3, r3, #3
    48f2:	432b      	orrs	r3, r5
    48f4:	2501      	movs	r5, #1
    48f6:	4699      	mov	r9, r3
    48f8:	9b01      	ldr	r3, [sp, #4]
    48fa:	2400      	movs	r4, #0
    48fc:	401d      	ands	r5, r3
    48fe:	e5fc      	b.n	44fa <__aeabi_dmul+0xce>
    4900:	2400      	movs	r4, #0
    4902:	e7e2      	b.n	48ca <__aeabi_dmul+0x49e>
    4904:	2280      	movs	r2, #128	; 0x80
    4906:	2501      	movs	r5, #1
    4908:	0312      	lsls	r2, r2, #12
    490a:	4322      	orrs	r2, r4
    490c:	9901      	ldr	r1, [sp, #4]
    490e:	0312      	lsls	r2, r2, #12
    4910:	0b12      	lsrs	r2, r2, #12
    4912:	400d      	ands	r5, r1
    4914:	4699      	mov	r9, r3
    4916:	4c04      	ldr	r4, [pc, #16]	; (4928 <__aeabi_dmul+0x4fc>)
    4918:	e5ef      	b.n	44fa <__aeabi_dmul+0xce>
    491a:	46c0      	nop			; (mov r8, r8)
    491c:	000003ff 	.word	0x000003ff
    4920:	feffffff 	.word	0xfeffffff
    4924:	000007fe 	.word	0x000007fe
    4928:	000007ff 	.word	0x000007ff

0000492c <__aeabi_dsub>:
    492c:	b5f0      	push	{r4, r5, r6, r7, lr}
    492e:	4646      	mov	r6, r8
    4930:	46d6      	mov	lr, sl
    4932:	464f      	mov	r7, r9
    4934:	030c      	lsls	r4, r1, #12
    4936:	b5c0      	push	{r6, r7, lr}
    4938:	0fcd      	lsrs	r5, r1, #31
    493a:	004e      	lsls	r6, r1, #1
    493c:	0a61      	lsrs	r1, r4, #9
    493e:	0f44      	lsrs	r4, r0, #29
    4940:	430c      	orrs	r4, r1
    4942:	00c1      	lsls	r1, r0, #3
    4944:	0058      	lsls	r0, r3, #1
    4946:	0d40      	lsrs	r0, r0, #21
    4948:	4684      	mov	ip, r0
    494a:	468a      	mov	sl, r1
    494c:	000f      	movs	r7, r1
    494e:	0319      	lsls	r1, r3, #12
    4950:	0f50      	lsrs	r0, r2, #29
    4952:	0a49      	lsrs	r1, r1, #9
    4954:	4301      	orrs	r1, r0
    4956:	48c6      	ldr	r0, [pc, #792]	; (4c70 <__aeabi_dsub+0x344>)
    4958:	0d76      	lsrs	r6, r6, #21
    495a:	46a8      	mov	r8, r5
    495c:	0fdb      	lsrs	r3, r3, #31
    495e:	00d2      	lsls	r2, r2, #3
    4960:	4584      	cmp	ip, r0
    4962:	d100      	bne.n	4966 <__aeabi_dsub+0x3a>
    4964:	e0d8      	b.n	4b18 <__aeabi_dsub+0x1ec>
    4966:	2001      	movs	r0, #1
    4968:	4043      	eors	r3, r0
    496a:	42ab      	cmp	r3, r5
    496c:	d100      	bne.n	4970 <__aeabi_dsub+0x44>
    496e:	e0a6      	b.n	4abe <__aeabi_dsub+0x192>
    4970:	4660      	mov	r0, ip
    4972:	1a35      	subs	r5, r6, r0
    4974:	2d00      	cmp	r5, #0
    4976:	dc00      	bgt.n	497a <__aeabi_dsub+0x4e>
    4978:	e105      	b.n	4b86 <__aeabi_dsub+0x25a>
    497a:	2800      	cmp	r0, #0
    497c:	d110      	bne.n	49a0 <__aeabi_dsub+0x74>
    497e:	000b      	movs	r3, r1
    4980:	4313      	orrs	r3, r2
    4982:	d100      	bne.n	4986 <__aeabi_dsub+0x5a>
    4984:	e0d7      	b.n	4b36 <__aeabi_dsub+0x20a>
    4986:	1e6b      	subs	r3, r5, #1
    4988:	2b00      	cmp	r3, #0
    498a:	d000      	beq.n	498e <__aeabi_dsub+0x62>
    498c:	e14b      	b.n	4c26 <__aeabi_dsub+0x2fa>
    498e:	4653      	mov	r3, sl
    4990:	1a9f      	subs	r7, r3, r2
    4992:	45ba      	cmp	sl, r7
    4994:	4180      	sbcs	r0, r0
    4996:	1a64      	subs	r4, r4, r1
    4998:	4240      	negs	r0, r0
    499a:	1a24      	subs	r4, r4, r0
    499c:	2601      	movs	r6, #1
    499e:	e01e      	b.n	49de <__aeabi_dsub+0xb2>
    49a0:	4bb3      	ldr	r3, [pc, #716]	; (4c70 <__aeabi_dsub+0x344>)
    49a2:	429e      	cmp	r6, r3
    49a4:	d048      	beq.n	4a38 <__aeabi_dsub+0x10c>
    49a6:	2380      	movs	r3, #128	; 0x80
    49a8:	041b      	lsls	r3, r3, #16
    49aa:	4319      	orrs	r1, r3
    49ac:	2d38      	cmp	r5, #56	; 0x38
    49ae:	dd00      	ble.n	49b2 <__aeabi_dsub+0x86>
    49b0:	e119      	b.n	4be6 <__aeabi_dsub+0x2ba>
    49b2:	2d1f      	cmp	r5, #31
    49b4:	dd00      	ble.n	49b8 <__aeabi_dsub+0x8c>
    49b6:	e14c      	b.n	4c52 <__aeabi_dsub+0x326>
    49b8:	2320      	movs	r3, #32
    49ba:	000f      	movs	r7, r1
    49bc:	1b5b      	subs	r3, r3, r5
    49be:	0010      	movs	r0, r2
    49c0:	409a      	lsls	r2, r3
    49c2:	409f      	lsls	r7, r3
    49c4:	40e8      	lsrs	r0, r5
    49c6:	1e53      	subs	r3, r2, #1
    49c8:	419a      	sbcs	r2, r3
    49ca:	40e9      	lsrs	r1, r5
    49cc:	4307      	orrs	r7, r0
    49ce:	4317      	orrs	r7, r2
    49d0:	4653      	mov	r3, sl
    49d2:	1bdf      	subs	r7, r3, r7
    49d4:	1a61      	subs	r1, r4, r1
    49d6:	45ba      	cmp	sl, r7
    49d8:	41a4      	sbcs	r4, r4
    49da:	4264      	negs	r4, r4
    49dc:	1b0c      	subs	r4, r1, r4
    49de:	0223      	lsls	r3, r4, #8
    49e0:	d400      	bmi.n	49e4 <__aeabi_dsub+0xb8>
    49e2:	e0c5      	b.n	4b70 <__aeabi_dsub+0x244>
    49e4:	0264      	lsls	r4, r4, #9
    49e6:	0a65      	lsrs	r5, r4, #9
    49e8:	2d00      	cmp	r5, #0
    49ea:	d100      	bne.n	49ee <__aeabi_dsub+0xc2>
    49ec:	e0f6      	b.n	4bdc <__aeabi_dsub+0x2b0>
    49ee:	0028      	movs	r0, r5
    49f0:	f000 fbd8 	bl	51a4 <__clzsi2>
    49f4:	0003      	movs	r3, r0
    49f6:	3b08      	subs	r3, #8
    49f8:	2b1f      	cmp	r3, #31
    49fa:	dd00      	ble.n	49fe <__aeabi_dsub+0xd2>
    49fc:	e0e9      	b.n	4bd2 <__aeabi_dsub+0x2a6>
    49fe:	2220      	movs	r2, #32
    4a00:	003c      	movs	r4, r7
    4a02:	1ad2      	subs	r2, r2, r3
    4a04:	409d      	lsls	r5, r3
    4a06:	40d4      	lsrs	r4, r2
    4a08:	409f      	lsls	r7, r3
    4a0a:	4325      	orrs	r5, r4
    4a0c:	429e      	cmp	r6, r3
    4a0e:	dd00      	ble.n	4a12 <__aeabi_dsub+0xe6>
    4a10:	e0db      	b.n	4bca <__aeabi_dsub+0x29e>
    4a12:	1b9e      	subs	r6, r3, r6
    4a14:	1c73      	adds	r3, r6, #1
    4a16:	2b1f      	cmp	r3, #31
    4a18:	dd00      	ble.n	4a1c <__aeabi_dsub+0xf0>
    4a1a:	e10a      	b.n	4c32 <__aeabi_dsub+0x306>
    4a1c:	2220      	movs	r2, #32
    4a1e:	0038      	movs	r0, r7
    4a20:	1ad2      	subs	r2, r2, r3
    4a22:	0029      	movs	r1, r5
    4a24:	4097      	lsls	r7, r2
    4a26:	002c      	movs	r4, r5
    4a28:	4091      	lsls	r1, r2
    4a2a:	40d8      	lsrs	r0, r3
    4a2c:	1e7a      	subs	r2, r7, #1
    4a2e:	4197      	sbcs	r7, r2
    4a30:	40dc      	lsrs	r4, r3
    4a32:	2600      	movs	r6, #0
    4a34:	4301      	orrs	r1, r0
    4a36:	430f      	orrs	r7, r1
    4a38:	077b      	lsls	r3, r7, #29
    4a3a:	d009      	beq.n	4a50 <__aeabi_dsub+0x124>
    4a3c:	230f      	movs	r3, #15
    4a3e:	403b      	ands	r3, r7
    4a40:	2b04      	cmp	r3, #4
    4a42:	d005      	beq.n	4a50 <__aeabi_dsub+0x124>
    4a44:	1d3b      	adds	r3, r7, #4
    4a46:	42bb      	cmp	r3, r7
    4a48:	41bf      	sbcs	r7, r7
    4a4a:	427f      	negs	r7, r7
    4a4c:	19e4      	adds	r4, r4, r7
    4a4e:	001f      	movs	r7, r3
    4a50:	0223      	lsls	r3, r4, #8
    4a52:	d525      	bpl.n	4aa0 <__aeabi_dsub+0x174>
    4a54:	4b86      	ldr	r3, [pc, #536]	; (4c70 <__aeabi_dsub+0x344>)
    4a56:	3601      	adds	r6, #1
    4a58:	429e      	cmp	r6, r3
    4a5a:	d100      	bne.n	4a5e <__aeabi_dsub+0x132>
    4a5c:	e0af      	b.n	4bbe <__aeabi_dsub+0x292>
    4a5e:	4b85      	ldr	r3, [pc, #532]	; (4c74 <__aeabi_dsub+0x348>)
    4a60:	2501      	movs	r5, #1
    4a62:	401c      	ands	r4, r3
    4a64:	4643      	mov	r3, r8
    4a66:	0762      	lsls	r2, r4, #29
    4a68:	08ff      	lsrs	r7, r7, #3
    4a6a:	0264      	lsls	r4, r4, #9
    4a6c:	0576      	lsls	r6, r6, #21
    4a6e:	4317      	orrs	r7, r2
    4a70:	0b24      	lsrs	r4, r4, #12
    4a72:	0d76      	lsrs	r6, r6, #21
    4a74:	401d      	ands	r5, r3
    4a76:	2100      	movs	r1, #0
    4a78:	0324      	lsls	r4, r4, #12
    4a7a:	0b23      	lsrs	r3, r4, #12
    4a7c:	0d0c      	lsrs	r4, r1, #20
    4a7e:	4a7e      	ldr	r2, [pc, #504]	; (4c78 <__aeabi_dsub+0x34c>)
    4a80:	0524      	lsls	r4, r4, #20
    4a82:	431c      	orrs	r4, r3
    4a84:	4014      	ands	r4, r2
    4a86:	0533      	lsls	r3, r6, #20
    4a88:	4323      	orrs	r3, r4
    4a8a:	005b      	lsls	r3, r3, #1
    4a8c:	07ed      	lsls	r5, r5, #31
    4a8e:	085b      	lsrs	r3, r3, #1
    4a90:	432b      	orrs	r3, r5
    4a92:	0038      	movs	r0, r7
    4a94:	0019      	movs	r1, r3
    4a96:	bc1c      	pop	{r2, r3, r4}
    4a98:	4690      	mov	r8, r2
    4a9a:	4699      	mov	r9, r3
    4a9c:	46a2      	mov	sl, r4
    4a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4aa0:	2501      	movs	r5, #1
    4aa2:	4643      	mov	r3, r8
    4aa4:	0762      	lsls	r2, r4, #29
    4aa6:	08ff      	lsrs	r7, r7, #3
    4aa8:	4317      	orrs	r7, r2
    4aaa:	08e4      	lsrs	r4, r4, #3
    4aac:	401d      	ands	r5, r3
    4aae:	4b70      	ldr	r3, [pc, #448]	; (4c70 <__aeabi_dsub+0x344>)
    4ab0:	429e      	cmp	r6, r3
    4ab2:	d036      	beq.n	4b22 <__aeabi_dsub+0x1f6>
    4ab4:	0324      	lsls	r4, r4, #12
    4ab6:	0576      	lsls	r6, r6, #21
    4ab8:	0b24      	lsrs	r4, r4, #12
    4aba:	0d76      	lsrs	r6, r6, #21
    4abc:	e7db      	b.n	4a76 <__aeabi_dsub+0x14a>
    4abe:	4663      	mov	r3, ip
    4ac0:	1af3      	subs	r3, r6, r3
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	dc00      	bgt.n	4ac8 <__aeabi_dsub+0x19c>
    4ac6:	e094      	b.n	4bf2 <__aeabi_dsub+0x2c6>
    4ac8:	4660      	mov	r0, ip
    4aca:	2800      	cmp	r0, #0
    4acc:	d035      	beq.n	4b3a <__aeabi_dsub+0x20e>
    4ace:	4868      	ldr	r0, [pc, #416]	; (4c70 <__aeabi_dsub+0x344>)
    4ad0:	4286      	cmp	r6, r0
    4ad2:	d0b1      	beq.n	4a38 <__aeabi_dsub+0x10c>
    4ad4:	2780      	movs	r7, #128	; 0x80
    4ad6:	043f      	lsls	r7, r7, #16
    4ad8:	4339      	orrs	r1, r7
    4ada:	2b38      	cmp	r3, #56	; 0x38
    4adc:	dc00      	bgt.n	4ae0 <__aeabi_dsub+0x1b4>
    4ade:	e0fd      	b.n	4cdc <__aeabi_dsub+0x3b0>
    4ae0:	430a      	orrs	r2, r1
    4ae2:	0017      	movs	r7, r2
    4ae4:	2100      	movs	r1, #0
    4ae6:	1e7a      	subs	r2, r7, #1
    4ae8:	4197      	sbcs	r7, r2
    4aea:	4457      	add	r7, sl
    4aec:	4557      	cmp	r7, sl
    4aee:	4180      	sbcs	r0, r0
    4af0:	1909      	adds	r1, r1, r4
    4af2:	4244      	negs	r4, r0
    4af4:	190c      	adds	r4, r1, r4
    4af6:	0223      	lsls	r3, r4, #8
    4af8:	d53a      	bpl.n	4b70 <__aeabi_dsub+0x244>
    4afa:	4b5d      	ldr	r3, [pc, #372]	; (4c70 <__aeabi_dsub+0x344>)
    4afc:	3601      	adds	r6, #1
    4afe:	429e      	cmp	r6, r3
    4b00:	d100      	bne.n	4b04 <__aeabi_dsub+0x1d8>
    4b02:	e14b      	b.n	4d9c <__aeabi_dsub+0x470>
    4b04:	2201      	movs	r2, #1
    4b06:	4b5b      	ldr	r3, [pc, #364]	; (4c74 <__aeabi_dsub+0x348>)
    4b08:	401c      	ands	r4, r3
    4b0a:	087b      	lsrs	r3, r7, #1
    4b0c:	4017      	ands	r7, r2
    4b0e:	431f      	orrs	r7, r3
    4b10:	07e2      	lsls	r2, r4, #31
    4b12:	4317      	orrs	r7, r2
    4b14:	0864      	lsrs	r4, r4, #1
    4b16:	e78f      	b.n	4a38 <__aeabi_dsub+0x10c>
    4b18:	0008      	movs	r0, r1
    4b1a:	4310      	orrs	r0, r2
    4b1c:	d000      	beq.n	4b20 <__aeabi_dsub+0x1f4>
    4b1e:	e724      	b.n	496a <__aeabi_dsub+0x3e>
    4b20:	e721      	b.n	4966 <__aeabi_dsub+0x3a>
    4b22:	0023      	movs	r3, r4
    4b24:	433b      	orrs	r3, r7
    4b26:	d100      	bne.n	4b2a <__aeabi_dsub+0x1fe>
    4b28:	e1b9      	b.n	4e9e <__aeabi_dsub+0x572>
    4b2a:	2280      	movs	r2, #128	; 0x80
    4b2c:	0312      	lsls	r2, r2, #12
    4b2e:	4314      	orrs	r4, r2
    4b30:	0324      	lsls	r4, r4, #12
    4b32:	0b24      	lsrs	r4, r4, #12
    4b34:	e79f      	b.n	4a76 <__aeabi_dsub+0x14a>
    4b36:	002e      	movs	r6, r5
    4b38:	e77e      	b.n	4a38 <__aeabi_dsub+0x10c>
    4b3a:	0008      	movs	r0, r1
    4b3c:	4310      	orrs	r0, r2
    4b3e:	d100      	bne.n	4b42 <__aeabi_dsub+0x216>
    4b40:	e0ca      	b.n	4cd8 <__aeabi_dsub+0x3ac>
    4b42:	1e58      	subs	r0, r3, #1
    4b44:	4684      	mov	ip, r0
    4b46:	2800      	cmp	r0, #0
    4b48:	d000      	beq.n	4b4c <__aeabi_dsub+0x220>
    4b4a:	e0e7      	b.n	4d1c <__aeabi_dsub+0x3f0>
    4b4c:	4452      	add	r2, sl
    4b4e:	4552      	cmp	r2, sl
    4b50:	4180      	sbcs	r0, r0
    4b52:	1864      	adds	r4, r4, r1
    4b54:	4240      	negs	r0, r0
    4b56:	1824      	adds	r4, r4, r0
    4b58:	0017      	movs	r7, r2
    4b5a:	2601      	movs	r6, #1
    4b5c:	0223      	lsls	r3, r4, #8
    4b5e:	d507      	bpl.n	4b70 <__aeabi_dsub+0x244>
    4b60:	2602      	movs	r6, #2
    4b62:	e7cf      	b.n	4b04 <__aeabi_dsub+0x1d8>
    4b64:	4664      	mov	r4, ip
    4b66:	432c      	orrs	r4, r5
    4b68:	d100      	bne.n	4b6c <__aeabi_dsub+0x240>
    4b6a:	e1b3      	b.n	4ed4 <__aeabi_dsub+0x5a8>
    4b6c:	002c      	movs	r4, r5
    4b6e:	4667      	mov	r7, ip
    4b70:	077b      	lsls	r3, r7, #29
    4b72:	d000      	beq.n	4b76 <__aeabi_dsub+0x24a>
    4b74:	e762      	b.n	4a3c <__aeabi_dsub+0x110>
    4b76:	0763      	lsls	r3, r4, #29
    4b78:	08ff      	lsrs	r7, r7, #3
    4b7a:	431f      	orrs	r7, r3
    4b7c:	2501      	movs	r5, #1
    4b7e:	4643      	mov	r3, r8
    4b80:	08e4      	lsrs	r4, r4, #3
    4b82:	401d      	ands	r5, r3
    4b84:	e793      	b.n	4aae <__aeabi_dsub+0x182>
    4b86:	2d00      	cmp	r5, #0
    4b88:	d178      	bne.n	4c7c <__aeabi_dsub+0x350>
    4b8a:	1c75      	adds	r5, r6, #1
    4b8c:	056d      	lsls	r5, r5, #21
    4b8e:	0d6d      	lsrs	r5, r5, #21
    4b90:	2d01      	cmp	r5, #1
    4b92:	dc00      	bgt.n	4b96 <__aeabi_dsub+0x26a>
    4b94:	e0f2      	b.n	4d7c <__aeabi_dsub+0x450>
    4b96:	4650      	mov	r0, sl
    4b98:	1a80      	subs	r0, r0, r2
    4b9a:	4582      	cmp	sl, r0
    4b9c:	41bf      	sbcs	r7, r7
    4b9e:	1a65      	subs	r5, r4, r1
    4ba0:	427f      	negs	r7, r7
    4ba2:	1bed      	subs	r5, r5, r7
    4ba4:	4684      	mov	ip, r0
    4ba6:	0228      	lsls	r0, r5, #8
    4ba8:	d400      	bmi.n	4bac <__aeabi_dsub+0x280>
    4baa:	e08c      	b.n	4cc6 <__aeabi_dsub+0x39a>
    4bac:	4650      	mov	r0, sl
    4bae:	1a17      	subs	r7, r2, r0
    4bb0:	42ba      	cmp	r2, r7
    4bb2:	4192      	sbcs	r2, r2
    4bb4:	1b0c      	subs	r4, r1, r4
    4bb6:	4255      	negs	r5, r2
    4bb8:	1b65      	subs	r5, r4, r5
    4bba:	4698      	mov	r8, r3
    4bbc:	e714      	b.n	49e8 <__aeabi_dsub+0xbc>
    4bbe:	2501      	movs	r5, #1
    4bc0:	4643      	mov	r3, r8
    4bc2:	2400      	movs	r4, #0
    4bc4:	401d      	ands	r5, r3
    4bc6:	2700      	movs	r7, #0
    4bc8:	e755      	b.n	4a76 <__aeabi_dsub+0x14a>
    4bca:	4c2a      	ldr	r4, [pc, #168]	; (4c74 <__aeabi_dsub+0x348>)
    4bcc:	1af6      	subs	r6, r6, r3
    4bce:	402c      	ands	r4, r5
    4bd0:	e732      	b.n	4a38 <__aeabi_dsub+0x10c>
    4bd2:	003d      	movs	r5, r7
    4bd4:	3828      	subs	r0, #40	; 0x28
    4bd6:	4085      	lsls	r5, r0
    4bd8:	2700      	movs	r7, #0
    4bda:	e717      	b.n	4a0c <__aeabi_dsub+0xe0>
    4bdc:	0038      	movs	r0, r7
    4bde:	f000 fae1 	bl	51a4 <__clzsi2>
    4be2:	3020      	adds	r0, #32
    4be4:	e706      	b.n	49f4 <__aeabi_dsub+0xc8>
    4be6:	430a      	orrs	r2, r1
    4be8:	0017      	movs	r7, r2
    4bea:	2100      	movs	r1, #0
    4bec:	1e7a      	subs	r2, r7, #1
    4bee:	4197      	sbcs	r7, r2
    4bf0:	e6ee      	b.n	49d0 <__aeabi_dsub+0xa4>
    4bf2:	2b00      	cmp	r3, #0
    4bf4:	d000      	beq.n	4bf8 <__aeabi_dsub+0x2cc>
    4bf6:	e0e5      	b.n	4dc4 <__aeabi_dsub+0x498>
    4bf8:	1c73      	adds	r3, r6, #1
    4bfa:	469c      	mov	ip, r3
    4bfc:	055b      	lsls	r3, r3, #21
    4bfe:	0d5b      	lsrs	r3, r3, #21
    4c00:	2b01      	cmp	r3, #1
    4c02:	dc00      	bgt.n	4c06 <__aeabi_dsub+0x2da>
    4c04:	e09f      	b.n	4d46 <__aeabi_dsub+0x41a>
    4c06:	4b1a      	ldr	r3, [pc, #104]	; (4c70 <__aeabi_dsub+0x344>)
    4c08:	459c      	cmp	ip, r3
    4c0a:	d100      	bne.n	4c0e <__aeabi_dsub+0x2e2>
    4c0c:	e0c5      	b.n	4d9a <__aeabi_dsub+0x46e>
    4c0e:	4452      	add	r2, sl
    4c10:	4552      	cmp	r2, sl
    4c12:	4180      	sbcs	r0, r0
    4c14:	1864      	adds	r4, r4, r1
    4c16:	4240      	negs	r0, r0
    4c18:	1824      	adds	r4, r4, r0
    4c1a:	07e7      	lsls	r7, r4, #31
    4c1c:	0852      	lsrs	r2, r2, #1
    4c1e:	4317      	orrs	r7, r2
    4c20:	0864      	lsrs	r4, r4, #1
    4c22:	4666      	mov	r6, ip
    4c24:	e708      	b.n	4a38 <__aeabi_dsub+0x10c>
    4c26:	4812      	ldr	r0, [pc, #72]	; (4c70 <__aeabi_dsub+0x344>)
    4c28:	4285      	cmp	r5, r0
    4c2a:	d100      	bne.n	4c2e <__aeabi_dsub+0x302>
    4c2c:	e085      	b.n	4d3a <__aeabi_dsub+0x40e>
    4c2e:	001d      	movs	r5, r3
    4c30:	e6bc      	b.n	49ac <__aeabi_dsub+0x80>
    4c32:	0029      	movs	r1, r5
    4c34:	3e1f      	subs	r6, #31
    4c36:	40f1      	lsrs	r1, r6
    4c38:	2b20      	cmp	r3, #32
    4c3a:	d100      	bne.n	4c3e <__aeabi_dsub+0x312>
    4c3c:	e07f      	b.n	4d3e <__aeabi_dsub+0x412>
    4c3e:	2240      	movs	r2, #64	; 0x40
    4c40:	1ad3      	subs	r3, r2, r3
    4c42:	409d      	lsls	r5, r3
    4c44:	432f      	orrs	r7, r5
    4c46:	1e7d      	subs	r5, r7, #1
    4c48:	41af      	sbcs	r7, r5
    4c4a:	2400      	movs	r4, #0
    4c4c:	430f      	orrs	r7, r1
    4c4e:	2600      	movs	r6, #0
    4c50:	e78e      	b.n	4b70 <__aeabi_dsub+0x244>
    4c52:	002b      	movs	r3, r5
    4c54:	000f      	movs	r7, r1
    4c56:	3b20      	subs	r3, #32
    4c58:	40df      	lsrs	r7, r3
    4c5a:	2d20      	cmp	r5, #32
    4c5c:	d071      	beq.n	4d42 <__aeabi_dsub+0x416>
    4c5e:	2340      	movs	r3, #64	; 0x40
    4c60:	1b5d      	subs	r5, r3, r5
    4c62:	40a9      	lsls	r1, r5
    4c64:	430a      	orrs	r2, r1
    4c66:	1e51      	subs	r1, r2, #1
    4c68:	418a      	sbcs	r2, r1
    4c6a:	2100      	movs	r1, #0
    4c6c:	4317      	orrs	r7, r2
    4c6e:	e6af      	b.n	49d0 <__aeabi_dsub+0xa4>
    4c70:	000007ff 	.word	0x000007ff
    4c74:	ff7fffff 	.word	0xff7fffff
    4c78:	800fffff 	.word	0x800fffff
    4c7c:	2e00      	cmp	r6, #0
    4c7e:	d03e      	beq.n	4cfe <__aeabi_dsub+0x3d2>
    4c80:	4eb3      	ldr	r6, [pc, #716]	; (4f50 <__aeabi_dsub+0x624>)
    4c82:	45b4      	cmp	ip, r6
    4c84:	d045      	beq.n	4d12 <__aeabi_dsub+0x3e6>
    4c86:	2680      	movs	r6, #128	; 0x80
    4c88:	0436      	lsls	r6, r6, #16
    4c8a:	426d      	negs	r5, r5
    4c8c:	4334      	orrs	r4, r6
    4c8e:	2d38      	cmp	r5, #56	; 0x38
    4c90:	dd00      	ble.n	4c94 <__aeabi_dsub+0x368>
    4c92:	e0a8      	b.n	4de6 <__aeabi_dsub+0x4ba>
    4c94:	2d1f      	cmp	r5, #31
    4c96:	dd00      	ble.n	4c9a <__aeabi_dsub+0x36e>
    4c98:	e11f      	b.n	4eda <__aeabi_dsub+0x5ae>
    4c9a:	2620      	movs	r6, #32
    4c9c:	0027      	movs	r7, r4
    4c9e:	4650      	mov	r0, sl
    4ca0:	1b76      	subs	r6, r6, r5
    4ca2:	40b7      	lsls	r7, r6
    4ca4:	40e8      	lsrs	r0, r5
    4ca6:	4307      	orrs	r7, r0
    4ca8:	4650      	mov	r0, sl
    4caa:	40b0      	lsls	r0, r6
    4cac:	1e46      	subs	r6, r0, #1
    4cae:	41b0      	sbcs	r0, r6
    4cb0:	40ec      	lsrs	r4, r5
    4cb2:	4338      	orrs	r0, r7
    4cb4:	1a17      	subs	r7, r2, r0
    4cb6:	42ba      	cmp	r2, r7
    4cb8:	4192      	sbcs	r2, r2
    4cba:	1b0c      	subs	r4, r1, r4
    4cbc:	4252      	negs	r2, r2
    4cbe:	1aa4      	subs	r4, r4, r2
    4cc0:	4666      	mov	r6, ip
    4cc2:	4698      	mov	r8, r3
    4cc4:	e68b      	b.n	49de <__aeabi_dsub+0xb2>
    4cc6:	4664      	mov	r4, ip
    4cc8:	4667      	mov	r7, ip
    4cca:	432c      	orrs	r4, r5
    4ccc:	d000      	beq.n	4cd0 <__aeabi_dsub+0x3a4>
    4cce:	e68b      	b.n	49e8 <__aeabi_dsub+0xbc>
    4cd0:	2500      	movs	r5, #0
    4cd2:	2600      	movs	r6, #0
    4cd4:	2700      	movs	r7, #0
    4cd6:	e6ea      	b.n	4aae <__aeabi_dsub+0x182>
    4cd8:	001e      	movs	r6, r3
    4cda:	e6ad      	b.n	4a38 <__aeabi_dsub+0x10c>
    4cdc:	2b1f      	cmp	r3, #31
    4cde:	dc60      	bgt.n	4da2 <__aeabi_dsub+0x476>
    4ce0:	2720      	movs	r7, #32
    4ce2:	1af8      	subs	r0, r7, r3
    4ce4:	000f      	movs	r7, r1
    4ce6:	4684      	mov	ip, r0
    4ce8:	4087      	lsls	r7, r0
    4cea:	0010      	movs	r0, r2
    4cec:	40d8      	lsrs	r0, r3
    4cee:	4307      	orrs	r7, r0
    4cf0:	4660      	mov	r0, ip
    4cf2:	4082      	lsls	r2, r0
    4cf4:	1e50      	subs	r0, r2, #1
    4cf6:	4182      	sbcs	r2, r0
    4cf8:	40d9      	lsrs	r1, r3
    4cfa:	4317      	orrs	r7, r2
    4cfc:	e6f5      	b.n	4aea <__aeabi_dsub+0x1be>
    4cfe:	0026      	movs	r6, r4
    4d00:	4650      	mov	r0, sl
    4d02:	4306      	orrs	r6, r0
    4d04:	d005      	beq.n	4d12 <__aeabi_dsub+0x3e6>
    4d06:	43ed      	mvns	r5, r5
    4d08:	2d00      	cmp	r5, #0
    4d0a:	d0d3      	beq.n	4cb4 <__aeabi_dsub+0x388>
    4d0c:	4e90      	ldr	r6, [pc, #576]	; (4f50 <__aeabi_dsub+0x624>)
    4d0e:	45b4      	cmp	ip, r6
    4d10:	d1bd      	bne.n	4c8e <__aeabi_dsub+0x362>
    4d12:	000c      	movs	r4, r1
    4d14:	0017      	movs	r7, r2
    4d16:	4666      	mov	r6, ip
    4d18:	4698      	mov	r8, r3
    4d1a:	e68d      	b.n	4a38 <__aeabi_dsub+0x10c>
    4d1c:	488c      	ldr	r0, [pc, #560]	; (4f50 <__aeabi_dsub+0x624>)
    4d1e:	4283      	cmp	r3, r0
    4d20:	d00b      	beq.n	4d3a <__aeabi_dsub+0x40e>
    4d22:	4663      	mov	r3, ip
    4d24:	e6d9      	b.n	4ada <__aeabi_dsub+0x1ae>
    4d26:	2d00      	cmp	r5, #0
    4d28:	d000      	beq.n	4d2c <__aeabi_dsub+0x400>
    4d2a:	e096      	b.n	4e5a <__aeabi_dsub+0x52e>
    4d2c:	0008      	movs	r0, r1
    4d2e:	4310      	orrs	r0, r2
    4d30:	d100      	bne.n	4d34 <__aeabi_dsub+0x408>
    4d32:	e0e2      	b.n	4efa <__aeabi_dsub+0x5ce>
    4d34:	000c      	movs	r4, r1
    4d36:	0017      	movs	r7, r2
    4d38:	4698      	mov	r8, r3
    4d3a:	4e85      	ldr	r6, [pc, #532]	; (4f50 <__aeabi_dsub+0x624>)
    4d3c:	e67c      	b.n	4a38 <__aeabi_dsub+0x10c>
    4d3e:	2500      	movs	r5, #0
    4d40:	e780      	b.n	4c44 <__aeabi_dsub+0x318>
    4d42:	2100      	movs	r1, #0
    4d44:	e78e      	b.n	4c64 <__aeabi_dsub+0x338>
    4d46:	0023      	movs	r3, r4
    4d48:	4650      	mov	r0, sl
    4d4a:	4303      	orrs	r3, r0
    4d4c:	2e00      	cmp	r6, #0
    4d4e:	d000      	beq.n	4d52 <__aeabi_dsub+0x426>
    4d50:	e0a8      	b.n	4ea4 <__aeabi_dsub+0x578>
    4d52:	2b00      	cmp	r3, #0
    4d54:	d100      	bne.n	4d58 <__aeabi_dsub+0x42c>
    4d56:	e0de      	b.n	4f16 <__aeabi_dsub+0x5ea>
    4d58:	000b      	movs	r3, r1
    4d5a:	4313      	orrs	r3, r2
    4d5c:	d100      	bne.n	4d60 <__aeabi_dsub+0x434>
    4d5e:	e66b      	b.n	4a38 <__aeabi_dsub+0x10c>
    4d60:	4452      	add	r2, sl
    4d62:	4552      	cmp	r2, sl
    4d64:	4180      	sbcs	r0, r0
    4d66:	1864      	adds	r4, r4, r1
    4d68:	4240      	negs	r0, r0
    4d6a:	1824      	adds	r4, r4, r0
    4d6c:	0017      	movs	r7, r2
    4d6e:	0223      	lsls	r3, r4, #8
    4d70:	d400      	bmi.n	4d74 <__aeabi_dsub+0x448>
    4d72:	e6fd      	b.n	4b70 <__aeabi_dsub+0x244>
    4d74:	4b77      	ldr	r3, [pc, #476]	; (4f54 <__aeabi_dsub+0x628>)
    4d76:	4666      	mov	r6, ip
    4d78:	401c      	ands	r4, r3
    4d7a:	e65d      	b.n	4a38 <__aeabi_dsub+0x10c>
    4d7c:	0025      	movs	r5, r4
    4d7e:	4650      	mov	r0, sl
    4d80:	4305      	orrs	r5, r0
    4d82:	2e00      	cmp	r6, #0
    4d84:	d1cf      	bne.n	4d26 <__aeabi_dsub+0x3fa>
    4d86:	2d00      	cmp	r5, #0
    4d88:	d14f      	bne.n	4e2a <__aeabi_dsub+0x4fe>
    4d8a:	000c      	movs	r4, r1
    4d8c:	4314      	orrs	r4, r2
    4d8e:	d100      	bne.n	4d92 <__aeabi_dsub+0x466>
    4d90:	e0a0      	b.n	4ed4 <__aeabi_dsub+0x5a8>
    4d92:	000c      	movs	r4, r1
    4d94:	0017      	movs	r7, r2
    4d96:	4698      	mov	r8, r3
    4d98:	e64e      	b.n	4a38 <__aeabi_dsub+0x10c>
    4d9a:	4666      	mov	r6, ip
    4d9c:	2400      	movs	r4, #0
    4d9e:	2700      	movs	r7, #0
    4da0:	e685      	b.n	4aae <__aeabi_dsub+0x182>
    4da2:	001f      	movs	r7, r3
    4da4:	0008      	movs	r0, r1
    4da6:	3f20      	subs	r7, #32
    4da8:	40f8      	lsrs	r0, r7
    4daa:	0007      	movs	r7, r0
    4dac:	2b20      	cmp	r3, #32
    4dae:	d100      	bne.n	4db2 <__aeabi_dsub+0x486>
    4db0:	e08e      	b.n	4ed0 <__aeabi_dsub+0x5a4>
    4db2:	2040      	movs	r0, #64	; 0x40
    4db4:	1ac3      	subs	r3, r0, r3
    4db6:	4099      	lsls	r1, r3
    4db8:	430a      	orrs	r2, r1
    4dba:	1e51      	subs	r1, r2, #1
    4dbc:	418a      	sbcs	r2, r1
    4dbe:	2100      	movs	r1, #0
    4dc0:	4317      	orrs	r7, r2
    4dc2:	e692      	b.n	4aea <__aeabi_dsub+0x1be>
    4dc4:	2e00      	cmp	r6, #0
    4dc6:	d114      	bne.n	4df2 <__aeabi_dsub+0x4c6>
    4dc8:	0026      	movs	r6, r4
    4dca:	4650      	mov	r0, sl
    4dcc:	4306      	orrs	r6, r0
    4dce:	d062      	beq.n	4e96 <__aeabi_dsub+0x56a>
    4dd0:	43db      	mvns	r3, r3
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	d15c      	bne.n	4e90 <__aeabi_dsub+0x564>
    4dd6:	1887      	adds	r7, r0, r2
    4dd8:	4297      	cmp	r7, r2
    4dda:	4192      	sbcs	r2, r2
    4ddc:	1864      	adds	r4, r4, r1
    4dde:	4252      	negs	r2, r2
    4de0:	18a4      	adds	r4, r4, r2
    4de2:	4666      	mov	r6, ip
    4de4:	e687      	b.n	4af6 <__aeabi_dsub+0x1ca>
    4de6:	4650      	mov	r0, sl
    4de8:	4320      	orrs	r0, r4
    4dea:	1e44      	subs	r4, r0, #1
    4dec:	41a0      	sbcs	r0, r4
    4dee:	2400      	movs	r4, #0
    4df0:	e760      	b.n	4cb4 <__aeabi_dsub+0x388>
    4df2:	4e57      	ldr	r6, [pc, #348]	; (4f50 <__aeabi_dsub+0x624>)
    4df4:	45b4      	cmp	ip, r6
    4df6:	d04e      	beq.n	4e96 <__aeabi_dsub+0x56a>
    4df8:	2680      	movs	r6, #128	; 0x80
    4dfa:	0436      	lsls	r6, r6, #16
    4dfc:	425b      	negs	r3, r3
    4dfe:	4334      	orrs	r4, r6
    4e00:	2b38      	cmp	r3, #56	; 0x38
    4e02:	dd00      	ble.n	4e06 <__aeabi_dsub+0x4da>
    4e04:	e07f      	b.n	4f06 <__aeabi_dsub+0x5da>
    4e06:	2b1f      	cmp	r3, #31
    4e08:	dd00      	ble.n	4e0c <__aeabi_dsub+0x4e0>
    4e0a:	e08b      	b.n	4f24 <__aeabi_dsub+0x5f8>
    4e0c:	2620      	movs	r6, #32
    4e0e:	0027      	movs	r7, r4
    4e10:	4650      	mov	r0, sl
    4e12:	1af6      	subs	r6, r6, r3
    4e14:	40b7      	lsls	r7, r6
    4e16:	40d8      	lsrs	r0, r3
    4e18:	4307      	orrs	r7, r0
    4e1a:	4650      	mov	r0, sl
    4e1c:	40b0      	lsls	r0, r6
    4e1e:	1e46      	subs	r6, r0, #1
    4e20:	41b0      	sbcs	r0, r6
    4e22:	4307      	orrs	r7, r0
    4e24:	40dc      	lsrs	r4, r3
    4e26:	18bf      	adds	r7, r7, r2
    4e28:	e7d6      	b.n	4dd8 <__aeabi_dsub+0x4ac>
    4e2a:	000d      	movs	r5, r1
    4e2c:	4315      	orrs	r5, r2
    4e2e:	d100      	bne.n	4e32 <__aeabi_dsub+0x506>
    4e30:	e602      	b.n	4a38 <__aeabi_dsub+0x10c>
    4e32:	4650      	mov	r0, sl
    4e34:	1a80      	subs	r0, r0, r2
    4e36:	4582      	cmp	sl, r0
    4e38:	41bf      	sbcs	r7, r7
    4e3a:	1a65      	subs	r5, r4, r1
    4e3c:	427f      	negs	r7, r7
    4e3e:	1bed      	subs	r5, r5, r7
    4e40:	4684      	mov	ip, r0
    4e42:	0228      	lsls	r0, r5, #8
    4e44:	d400      	bmi.n	4e48 <__aeabi_dsub+0x51c>
    4e46:	e68d      	b.n	4b64 <__aeabi_dsub+0x238>
    4e48:	4650      	mov	r0, sl
    4e4a:	1a17      	subs	r7, r2, r0
    4e4c:	42ba      	cmp	r2, r7
    4e4e:	4192      	sbcs	r2, r2
    4e50:	1b0c      	subs	r4, r1, r4
    4e52:	4252      	negs	r2, r2
    4e54:	1aa4      	subs	r4, r4, r2
    4e56:	4698      	mov	r8, r3
    4e58:	e5ee      	b.n	4a38 <__aeabi_dsub+0x10c>
    4e5a:	000d      	movs	r5, r1
    4e5c:	4315      	orrs	r5, r2
    4e5e:	d100      	bne.n	4e62 <__aeabi_dsub+0x536>
    4e60:	e76b      	b.n	4d3a <__aeabi_dsub+0x40e>
    4e62:	4650      	mov	r0, sl
    4e64:	0767      	lsls	r7, r4, #29
    4e66:	08c0      	lsrs	r0, r0, #3
    4e68:	4307      	orrs	r7, r0
    4e6a:	2080      	movs	r0, #128	; 0x80
    4e6c:	08e4      	lsrs	r4, r4, #3
    4e6e:	0300      	lsls	r0, r0, #12
    4e70:	4204      	tst	r4, r0
    4e72:	d007      	beq.n	4e84 <__aeabi_dsub+0x558>
    4e74:	08cd      	lsrs	r5, r1, #3
    4e76:	4205      	tst	r5, r0
    4e78:	d104      	bne.n	4e84 <__aeabi_dsub+0x558>
    4e7a:	002c      	movs	r4, r5
    4e7c:	4698      	mov	r8, r3
    4e7e:	08d7      	lsrs	r7, r2, #3
    4e80:	0749      	lsls	r1, r1, #29
    4e82:	430f      	orrs	r7, r1
    4e84:	0f7b      	lsrs	r3, r7, #29
    4e86:	00e4      	lsls	r4, r4, #3
    4e88:	431c      	orrs	r4, r3
    4e8a:	00ff      	lsls	r7, r7, #3
    4e8c:	4e30      	ldr	r6, [pc, #192]	; (4f50 <__aeabi_dsub+0x624>)
    4e8e:	e5d3      	b.n	4a38 <__aeabi_dsub+0x10c>
    4e90:	4e2f      	ldr	r6, [pc, #188]	; (4f50 <__aeabi_dsub+0x624>)
    4e92:	45b4      	cmp	ip, r6
    4e94:	d1b4      	bne.n	4e00 <__aeabi_dsub+0x4d4>
    4e96:	000c      	movs	r4, r1
    4e98:	0017      	movs	r7, r2
    4e9a:	4666      	mov	r6, ip
    4e9c:	e5cc      	b.n	4a38 <__aeabi_dsub+0x10c>
    4e9e:	2700      	movs	r7, #0
    4ea0:	2400      	movs	r4, #0
    4ea2:	e5e8      	b.n	4a76 <__aeabi_dsub+0x14a>
    4ea4:	2b00      	cmp	r3, #0
    4ea6:	d039      	beq.n	4f1c <__aeabi_dsub+0x5f0>
    4ea8:	000b      	movs	r3, r1
    4eaa:	4313      	orrs	r3, r2
    4eac:	d100      	bne.n	4eb0 <__aeabi_dsub+0x584>
    4eae:	e744      	b.n	4d3a <__aeabi_dsub+0x40e>
    4eb0:	08c0      	lsrs	r0, r0, #3
    4eb2:	0767      	lsls	r7, r4, #29
    4eb4:	4307      	orrs	r7, r0
    4eb6:	2080      	movs	r0, #128	; 0x80
    4eb8:	08e4      	lsrs	r4, r4, #3
    4eba:	0300      	lsls	r0, r0, #12
    4ebc:	4204      	tst	r4, r0
    4ebe:	d0e1      	beq.n	4e84 <__aeabi_dsub+0x558>
    4ec0:	08cb      	lsrs	r3, r1, #3
    4ec2:	4203      	tst	r3, r0
    4ec4:	d1de      	bne.n	4e84 <__aeabi_dsub+0x558>
    4ec6:	08d7      	lsrs	r7, r2, #3
    4ec8:	0749      	lsls	r1, r1, #29
    4eca:	430f      	orrs	r7, r1
    4ecc:	001c      	movs	r4, r3
    4ece:	e7d9      	b.n	4e84 <__aeabi_dsub+0x558>
    4ed0:	2100      	movs	r1, #0
    4ed2:	e771      	b.n	4db8 <__aeabi_dsub+0x48c>
    4ed4:	2500      	movs	r5, #0
    4ed6:	2700      	movs	r7, #0
    4ed8:	e5e9      	b.n	4aae <__aeabi_dsub+0x182>
    4eda:	002e      	movs	r6, r5
    4edc:	0027      	movs	r7, r4
    4ede:	3e20      	subs	r6, #32
    4ee0:	40f7      	lsrs	r7, r6
    4ee2:	2d20      	cmp	r5, #32
    4ee4:	d02f      	beq.n	4f46 <__aeabi_dsub+0x61a>
    4ee6:	2640      	movs	r6, #64	; 0x40
    4ee8:	1b75      	subs	r5, r6, r5
    4eea:	40ac      	lsls	r4, r5
    4eec:	4650      	mov	r0, sl
    4eee:	4320      	orrs	r0, r4
    4ef0:	1e44      	subs	r4, r0, #1
    4ef2:	41a0      	sbcs	r0, r4
    4ef4:	2400      	movs	r4, #0
    4ef6:	4338      	orrs	r0, r7
    4ef8:	e6dc      	b.n	4cb4 <__aeabi_dsub+0x388>
    4efa:	2480      	movs	r4, #128	; 0x80
    4efc:	2500      	movs	r5, #0
    4efe:	0324      	lsls	r4, r4, #12
    4f00:	4e13      	ldr	r6, [pc, #76]	; (4f50 <__aeabi_dsub+0x624>)
    4f02:	2700      	movs	r7, #0
    4f04:	e5d3      	b.n	4aae <__aeabi_dsub+0x182>
    4f06:	4650      	mov	r0, sl
    4f08:	4320      	orrs	r0, r4
    4f0a:	0007      	movs	r7, r0
    4f0c:	1e78      	subs	r0, r7, #1
    4f0e:	4187      	sbcs	r7, r0
    4f10:	2400      	movs	r4, #0
    4f12:	18bf      	adds	r7, r7, r2
    4f14:	e760      	b.n	4dd8 <__aeabi_dsub+0x4ac>
    4f16:	000c      	movs	r4, r1
    4f18:	0017      	movs	r7, r2
    4f1a:	e58d      	b.n	4a38 <__aeabi_dsub+0x10c>
    4f1c:	000c      	movs	r4, r1
    4f1e:	0017      	movs	r7, r2
    4f20:	4e0b      	ldr	r6, [pc, #44]	; (4f50 <__aeabi_dsub+0x624>)
    4f22:	e589      	b.n	4a38 <__aeabi_dsub+0x10c>
    4f24:	001e      	movs	r6, r3
    4f26:	0027      	movs	r7, r4
    4f28:	3e20      	subs	r6, #32
    4f2a:	40f7      	lsrs	r7, r6
    4f2c:	2b20      	cmp	r3, #32
    4f2e:	d00c      	beq.n	4f4a <__aeabi_dsub+0x61e>
    4f30:	2640      	movs	r6, #64	; 0x40
    4f32:	1af3      	subs	r3, r6, r3
    4f34:	409c      	lsls	r4, r3
    4f36:	4650      	mov	r0, sl
    4f38:	4320      	orrs	r0, r4
    4f3a:	1e44      	subs	r4, r0, #1
    4f3c:	41a0      	sbcs	r0, r4
    4f3e:	4307      	orrs	r7, r0
    4f40:	2400      	movs	r4, #0
    4f42:	18bf      	adds	r7, r7, r2
    4f44:	e748      	b.n	4dd8 <__aeabi_dsub+0x4ac>
    4f46:	2400      	movs	r4, #0
    4f48:	e7d0      	b.n	4eec <__aeabi_dsub+0x5c0>
    4f4a:	2400      	movs	r4, #0
    4f4c:	e7f3      	b.n	4f36 <__aeabi_dsub+0x60a>
    4f4e:	46c0      	nop			; (mov r8, r8)
    4f50:	000007ff 	.word	0x000007ff
    4f54:	ff7fffff 	.word	0xff7fffff

00004f58 <__aeabi_d2iz>:
    4f58:	b530      	push	{r4, r5, lr}
    4f5a:	4d13      	ldr	r5, [pc, #76]	; (4fa8 <__aeabi_d2iz+0x50>)
    4f5c:	030a      	lsls	r2, r1, #12
    4f5e:	004b      	lsls	r3, r1, #1
    4f60:	0b12      	lsrs	r2, r2, #12
    4f62:	0d5b      	lsrs	r3, r3, #21
    4f64:	0fc9      	lsrs	r1, r1, #31
    4f66:	2400      	movs	r4, #0
    4f68:	42ab      	cmp	r3, r5
    4f6a:	dd10      	ble.n	4f8e <__aeabi_d2iz+0x36>
    4f6c:	4c0f      	ldr	r4, [pc, #60]	; (4fac <__aeabi_d2iz+0x54>)
    4f6e:	42a3      	cmp	r3, r4
    4f70:	dc0f      	bgt.n	4f92 <__aeabi_d2iz+0x3a>
    4f72:	2480      	movs	r4, #128	; 0x80
    4f74:	4d0e      	ldr	r5, [pc, #56]	; (4fb0 <__aeabi_d2iz+0x58>)
    4f76:	0364      	lsls	r4, r4, #13
    4f78:	4322      	orrs	r2, r4
    4f7a:	1aed      	subs	r5, r5, r3
    4f7c:	2d1f      	cmp	r5, #31
    4f7e:	dd0b      	ble.n	4f98 <__aeabi_d2iz+0x40>
    4f80:	480c      	ldr	r0, [pc, #48]	; (4fb4 <__aeabi_d2iz+0x5c>)
    4f82:	1ac3      	subs	r3, r0, r3
    4f84:	40da      	lsrs	r2, r3
    4f86:	4254      	negs	r4, r2
    4f88:	2900      	cmp	r1, #0
    4f8a:	d100      	bne.n	4f8e <__aeabi_d2iz+0x36>
    4f8c:	0014      	movs	r4, r2
    4f8e:	0020      	movs	r0, r4
    4f90:	bd30      	pop	{r4, r5, pc}
    4f92:	4b09      	ldr	r3, [pc, #36]	; (4fb8 <__aeabi_d2iz+0x60>)
    4f94:	18cc      	adds	r4, r1, r3
    4f96:	e7fa      	b.n	4f8e <__aeabi_d2iz+0x36>
    4f98:	4c08      	ldr	r4, [pc, #32]	; (4fbc <__aeabi_d2iz+0x64>)
    4f9a:	40e8      	lsrs	r0, r5
    4f9c:	46a4      	mov	ip, r4
    4f9e:	4463      	add	r3, ip
    4fa0:	409a      	lsls	r2, r3
    4fa2:	4302      	orrs	r2, r0
    4fa4:	e7ef      	b.n	4f86 <__aeabi_d2iz+0x2e>
    4fa6:	46c0      	nop			; (mov r8, r8)
    4fa8:	000003fe 	.word	0x000003fe
    4fac:	0000041d 	.word	0x0000041d
    4fb0:	00000433 	.word	0x00000433
    4fb4:	00000413 	.word	0x00000413
    4fb8:	7fffffff 	.word	0x7fffffff
    4fbc:	fffffbed 	.word	0xfffffbed

00004fc0 <__aeabi_i2d>:
    4fc0:	b570      	push	{r4, r5, r6, lr}
    4fc2:	2800      	cmp	r0, #0
    4fc4:	d030      	beq.n	5028 <__aeabi_i2d+0x68>
    4fc6:	17c3      	asrs	r3, r0, #31
    4fc8:	18c4      	adds	r4, r0, r3
    4fca:	405c      	eors	r4, r3
    4fcc:	0fc5      	lsrs	r5, r0, #31
    4fce:	0020      	movs	r0, r4
    4fd0:	f000 f8e8 	bl	51a4 <__clzsi2>
    4fd4:	4b17      	ldr	r3, [pc, #92]	; (5034 <__aeabi_i2d+0x74>)
    4fd6:	4a18      	ldr	r2, [pc, #96]	; (5038 <__aeabi_i2d+0x78>)
    4fd8:	1a1b      	subs	r3, r3, r0
    4fda:	1ad2      	subs	r2, r2, r3
    4fdc:	2a1f      	cmp	r2, #31
    4fde:	dd18      	ble.n	5012 <__aeabi_i2d+0x52>
    4fe0:	4a16      	ldr	r2, [pc, #88]	; (503c <__aeabi_i2d+0x7c>)
    4fe2:	1ad2      	subs	r2, r2, r3
    4fe4:	4094      	lsls	r4, r2
    4fe6:	2200      	movs	r2, #0
    4fe8:	0324      	lsls	r4, r4, #12
    4fea:	055b      	lsls	r3, r3, #21
    4fec:	0b24      	lsrs	r4, r4, #12
    4fee:	0d5b      	lsrs	r3, r3, #21
    4ff0:	2100      	movs	r1, #0
    4ff2:	0010      	movs	r0, r2
    4ff4:	0324      	lsls	r4, r4, #12
    4ff6:	0d0a      	lsrs	r2, r1, #20
    4ff8:	0b24      	lsrs	r4, r4, #12
    4ffa:	0512      	lsls	r2, r2, #20
    4ffc:	4322      	orrs	r2, r4
    4ffe:	4c10      	ldr	r4, [pc, #64]	; (5040 <__aeabi_i2d+0x80>)
    5000:	051b      	lsls	r3, r3, #20
    5002:	4022      	ands	r2, r4
    5004:	4313      	orrs	r3, r2
    5006:	005b      	lsls	r3, r3, #1
    5008:	07ed      	lsls	r5, r5, #31
    500a:	085b      	lsrs	r3, r3, #1
    500c:	432b      	orrs	r3, r5
    500e:	0019      	movs	r1, r3
    5010:	bd70      	pop	{r4, r5, r6, pc}
    5012:	0021      	movs	r1, r4
    5014:	4091      	lsls	r1, r2
    5016:	000a      	movs	r2, r1
    5018:	210b      	movs	r1, #11
    501a:	1a08      	subs	r0, r1, r0
    501c:	40c4      	lsrs	r4, r0
    501e:	055b      	lsls	r3, r3, #21
    5020:	0324      	lsls	r4, r4, #12
    5022:	0b24      	lsrs	r4, r4, #12
    5024:	0d5b      	lsrs	r3, r3, #21
    5026:	e7e3      	b.n	4ff0 <__aeabi_i2d+0x30>
    5028:	2500      	movs	r5, #0
    502a:	2300      	movs	r3, #0
    502c:	2400      	movs	r4, #0
    502e:	2200      	movs	r2, #0
    5030:	e7de      	b.n	4ff0 <__aeabi_i2d+0x30>
    5032:	46c0      	nop			; (mov r8, r8)
    5034:	0000041e 	.word	0x0000041e
    5038:	00000433 	.word	0x00000433
    503c:	00000413 	.word	0x00000413
    5040:	800fffff 	.word	0x800fffff

00005044 <__aeabi_ui2d>:
    5044:	b510      	push	{r4, lr}
    5046:	1e04      	subs	r4, r0, #0
    5048:	d028      	beq.n	509c <__aeabi_ui2d+0x58>
    504a:	f000 f8ab 	bl	51a4 <__clzsi2>
    504e:	4b15      	ldr	r3, [pc, #84]	; (50a4 <__aeabi_ui2d+0x60>)
    5050:	4a15      	ldr	r2, [pc, #84]	; (50a8 <__aeabi_ui2d+0x64>)
    5052:	1a1b      	subs	r3, r3, r0
    5054:	1ad2      	subs	r2, r2, r3
    5056:	2a1f      	cmp	r2, #31
    5058:	dd15      	ble.n	5086 <__aeabi_ui2d+0x42>
    505a:	4a14      	ldr	r2, [pc, #80]	; (50ac <__aeabi_ui2d+0x68>)
    505c:	1ad2      	subs	r2, r2, r3
    505e:	4094      	lsls	r4, r2
    5060:	2200      	movs	r2, #0
    5062:	0324      	lsls	r4, r4, #12
    5064:	055b      	lsls	r3, r3, #21
    5066:	0b24      	lsrs	r4, r4, #12
    5068:	0d5b      	lsrs	r3, r3, #21
    506a:	2100      	movs	r1, #0
    506c:	0010      	movs	r0, r2
    506e:	0324      	lsls	r4, r4, #12
    5070:	0d0a      	lsrs	r2, r1, #20
    5072:	0b24      	lsrs	r4, r4, #12
    5074:	0512      	lsls	r2, r2, #20
    5076:	4322      	orrs	r2, r4
    5078:	4c0d      	ldr	r4, [pc, #52]	; (50b0 <__aeabi_ui2d+0x6c>)
    507a:	051b      	lsls	r3, r3, #20
    507c:	4022      	ands	r2, r4
    507e:	4313      	orrs	r3, r2
    5080:	005b      	lsls	r3, r3, #1
    5082:	0859      	lsrs	r1, r3, #1
    5084:	bd10      	pop	{r4, pc}
    5086:	0021      	movs	r1, r4
    5088:	4091      	lsls	r1, r2
    508a:	000a      	movs	r2, r1
    508c:	210b      	movs	r1, #11
    508e:	1a08      	subs	r0, r1, r0
    5090:	40c4      	lsrs	r4, r0
    5092:	055b      	lsls	r3, r3, #21
    5094:	0324      	lsls	r4, r4, #12
    5096:	0b24      	lsrs	r4, r4, #12
    5098:	0d5b      	lsrs	r3, r3, #21
    509a:	e7e6      	b.n	506a <__aeabi_ui2d+0x26>
    509c:	2300      	movs	r3, #0
    509e:	2400      	movs	r4, #0
    50a0:	2200      	movs	r2, #0
    50a2:	e7e2      	b.n	506a <__aeabi_ui2d+0x26>
    50a4:	0000041e 	.word	0x0000041e
    50a8:	00000433 	.word	0x00000433
    50ac:	00000413 	.word	0x00000413
    50b0:	800fffff 	.word	0x800fffff

000050b4 <__aeabi_cdrcmple>:
    50b4:	4684      	mov	ip, r0
    50b6:	1c10      	adds	r0, r2, #0
    50b8:	4662      	mov	r2, ip
    50ba:	468c      	mov	ip, r1
    50bc:	1c19      	adds	r1, r3, #0
    50be:	4663      	mov	r3, ip
    50c0:	e000      	b.n	50c4 <__aeabi_cdcmpeq>
    50c2:	46c0      	nop			; (mov r8, r8)

000050c4 <__aeabi_cdcmpeq>:
    50c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    50c6:	f000 f9d1 	bl	546c <__ledf2>
    50ca:	2800      	cmp	r0, #0
    50cc:	d401      	bmi.n	50d2 <__aeabi_cdcmpeq+0xe>
    50ce:	2100      	movs	r1, #0
    50d0:	42c8      	cmn	r0, r1
    50d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000050d4 <__aeabi_dcmpeq>:
    50d4:	b510      	push	{r4, lr}
    50d6:	f000 f92b 	bl	5330 <__eqdf2>
    50da:	4240      	negs	r0, r0
    50dc:	3001      	adds	r0, #1
    50de:	bd10      	pop	{r4, pc}

000050e0 <__aeabi_dcmplt>:
    50e0:	b510      	push	{r4, lr}
    50e2:	f000 f9c3 	bl	546c <__ledf2>
    50e6:	2800      	cmp	r0, #0
    50e8:	db01      	blt.n	50ee <__aeabi_dcmplt+0xe>
    50ea:	2000      	movs	r0, #0
    50ec:	bd10      	pop	{r4, pc}
    50ee:	2001      	movs	r0, #1
    50f0:	bd10      	pop	{r4, pc}
    50f2:	46c0      	nop			; (mov r8, r8)

000050f4 <__aeabi_dcmple>:
    50f4:	b510      	push	{r4, lr}
    50f6:	f000 f9b9 	bl	546c <__ledf2>
    50fa:	2800      	cmp	r0, #0
    50fc:	dd01      	ble.n	5102 <__aeabi_dcmple+0xe>
    50fe:	2000      	movs	r0, #0
    5100:	bd10      	pop	{r4, pc}
    5102:	2001      	movs	r0, #1
    5104:	bd10      	pop	{r4, pc}
    5106:	46c0      	nop			; (mov r8, r8)

00005108 <__aeabi_dcmpgt>:
    5108:	b510      	push	{r4, lr}
    510a:	f000 f94b 	bl	53a4 <__gedf2>
    510e:	2800      	cmp	r0, #0
    5110:	dc01      	bgt.n	5116 <__aeabi_dcmpgt+0xe>
    5112:	2000      	movs	r0, #0
    5114:	bd10      	pop	{r4, pc}
    5116:	2001      	movs	r0, #1
    5118:	bd10      	pop	{r4, pc}
    511a:	46c0      	nop			; (mov r8, r8)

0000511c <__aeabi_dcmpge>:
    511c:	b510      	push	{r4, lr}
    511e:	f000 f941 	bl	53a4 <__gedf2>
    5122:	2800      	cmp	r0, #0
    5124:	da01      	bge.n	512a <__aeabi_dcmpge+0xe>
    5126:	2000      	movs	r0, #0
    5128:	bd10      	pop	{r4, pc}
    512a:	2001      	movs	r0, #1
    512c:	bd10      	pop	{r4, pc}
    512e:	46c0      	nop			; (mov r8, r8)

00005130 <__aeabi_cfrcmple>:
    5130:	4684      	mov	ip, r0
    5132:	1c08      	adds	r0, r1, #0
    5134:	4661      	mov	r1, ip
    5136:	e7ff      	b.n	5138 <__aeabi_cfcmpeq>

00005138 <__aeabi_cfcmpeq>:
    5138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    513a:	f000 f8b7 	bl	52ac <__lesf2>
    513e:	2800      	cmp	r0, #0
    5140:	d401      	bmi.n	5146 <__aeabi_cfcmpeq+0xe>
    5142:	2100      	movs	r1, #0
    5144:	42c8      	cmn	r0, r1
    5146:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005148 <__aeabi_fcmpeq>:
    5148:	b510      	push	{r4, lr}
    514a:	f000 f849 	bl	51e0 <__eqsf2>
    514e:	4240      	negs	r0, r0
    5150:	3001      	adds	r0, #1
    5152:	bd10      	pop	{r4, pc}

00005154 <__aeabi_fcmplt>:
    5154:	b510      	push	{r4, lr}
    5156:	f000 f8a9 	bl	52ac <__lesf2>
    515a:	2800      	cmp	r0, #0
    515c:	db01      	blt.n	5162 <__aeabi_fcmplt+0xe>
    515e:	2000      	movs	r0, #0
    5160:	bd10      	pop	{r4, pc}
    5162:	2001      	movs	r0, #1
    5164:	bd10      	pop	{r4, pc}
    5166:	46c0      	nop			; (mov r8, r8)

00005168 <__aeabi_fcmple>:
    5168:	b510      	push	{r4, lr}
    516a:	f000 f89f 	bl	52ac <__lesf2>
    516e:	2800      	cmp	r0, #0
    5170:	dd01      	ble.n	5176 <__aeabi_fcmple+0xe>
    5172:	2000      	movs	r0, #0
    5174:	bd10      	pop	{r4, pc}
    5176:	2001      	movs	r0, #1
    5178:	bd10      	pop	{r4, pc}
    517a:	46c0      	nop			; (mov r8, r8)

0000517c <__aeabi_fcmpgt>:
    517c:	b510      	push	{r4, lr}
    517e:	f000 f855 	bl	522c <__gesf2>
    5182:	2800      	cmp	r0, #0
    5184:	dc01      	bgt.n	518a <__aeabi_fcmpgt+0xe>
    5186:	2000      	movs	r0, #0
    5188:	bd10      	pop	{r4, pc}
    518a:	2001      	movs	r0, #1
    518c:	bd10      	pop	{r4, pc}
    518e:	46c0      	nop			; (mov r8, r8)

00005190 <__aeabi_fcmpge>:
    5190:	b510      	push	{r4, lr}
    5192:	f000 f84b 	bl	522c <__gesf2>
    5196:	2800      	cmp	r0, #0
    5198:	da01      	bge.n	519e <__aeabi_fcmpge+0xe>
    519a:	2000      	movs	r0, #0
    519c:	bd10      	pop	{r4, pc}
    519e:	2001      	movs	r0, #1
    51a0:	bd10      	pop	{r4, pc}
    51a2:	46c0      	nop			; (mov r8, r8)

000051a4 <__clzsi2>:
    51a4:	211c      	movs	r1, #28
    51a6:	2301      	movs	r3, #1
    51a8:	041b      	lsls	r3, r3, #16
    51aa:	4298      	cmp	r0, r3
    51ac:	d301      	bcc.n	51b2 <__clzsi2+0xe>
    51ae:	0c00      	lsrs	r0, r0, #16
    51b0:	3910      	subs	r1, #16
    51b2:	0a1b      	lsrs	r3, r3, #8
    51b4:	4298      	cmp	r0, r3
    51b6:	d301      	bcc.n	51bc <__clzsi2+0x18>
    51b8:	0a00      	lsrs	r0, r0, #8
    51ba:	3908      	subs	r1, #8
    51bc:	091b      	lsrs	r3, r3, #4
    51be:	4298      	cmp	r0, r3
    51c0:	d301      	bcc.n	51c6 <__clzsi2+0x22>
    51c2:	0900      	lsrs	r0, r0, #4
    51c4:	3904      	subs	r1, #4
    51c6:	a202      	add	r2, pc, #8	; (adr r2, 51d0 <__clzsi2+0x2c>)
    51c8:	5c10      	ldrb	r0, [r2, r0]
    51ca:	1840      	adds	r0, r0, r1
    51cc:	4770      	bx	lr
    51ce:	46c0      	nop			; (mov r8, r8)
    51d0:	02020304 	.word	0x02020304
    51d4:	01010101 	.word	0x01010101
	...

000051e0 <__eqsf2>:
    51e0:	b570      	push	{r4, r5, r6, lr}
    51e2:	0042      	lsls	r2, r0, #1
    51e4:	0245      	lsls	r5, r0, #9
    51e6:	024e      	lsls	r6, r1, #9
    51e8:	004c      	lsls	r4, r1, #1
    51ea:	0fc3      	lsrs	r3, r0, #31
    51ec:	0a6d      	lsrs	r5, r5, #9
    51ee:	0e12      	lsrs	r2, r2, #24
    51f0:	0a76      	lsrs	r6, r6, #9
    51f2:	0e24      	lsrs	r4, r4, #24
    51f4:	0fc9      	lsrs	r1, r1, #31
    51f6:	2001      	movs	r0, #1
    51f8:	2aff      	cmp	r2, #255	; 0xff
    51fa:	d006      	beq.n	520a <__eqsf2+0x2a>
    51fc:	2cff      	cmp	r4, #255	; 0xff
    51fe:	d003      	beq.n	5208 <__eqsf2+0x28>
    5200:	42a2      	cmp	r2, r4
    5202:	d101      	bne.n	5208 <__eqsf2+0x28>
    5204:	42b5      	cmp	r5, r6
    5206:	d006      	beq.n	5216 <__eqsf2+0x36>
    5208:	bd70      	pop	{r4, r5, r6, pc}
    520a:	2d00      	cmp	r5, #0
    520c:	d1fc      	bne.n	5208 <__eqsf2+0x28>
    520e:	2cff      	cmp	r4, #255	; 0xff
    5210:	d1fa      	bne.n	5208 <__eqsf2+0x28>
    5212:	2e00      	cmp	r6, #0
    5214:	d1f8      	bne.n	5208 <__eqsf2+0x28>
    5216:	428b      	cmp	r3, r1
    5218:	d006      	beq.n	5228 <__eqsf2+0x48>
    521a:	2001      	movs	r0, #1
    521c:	2a00      	cmp	r2, #0
    521e:	d1f3      	bne.n	5208 <__eqsf2+0x28>
    5220:	0028      	movs	r0, r5
    5222:	1e45      	subs	r5, r0, #1
    5224:	41a8      	sbcs	r0, r5
    5226:	e7ef      	b.n	5208 <__eqsf2+0x28>
    5228:	2000      	movs	r0, #0
    522a:	e7ed      	b.n	5208 <__eqsf2+0x28>

0000522c <__gesf2>:
    522c:	b5f0      	push	{r4, r5, r6, r7, lr}
    522e:	0042      	lsls	r2, r0, #1
    5230:	0245      	lsls	r5, r0, #9
    5232:	024c      	lsls	r4, r1, #9
    5234:	0fc3      	lsrs	r3, r0, #31
    5236:	0048      	lsls	r0, r1, #1
    5238:	0a6d      	lsrs	r5, r5, #9
    523a:	0e12      	lsrs	r2, r2, #24
    523c:	0a64      	lsrs	r4, r4, #9
    523e:	0e00      	lsrs	r0, r0, #24
    5240:	0fc9      	lsrs	r1, r1, #31
    5242:	2aff      	cmp	r2, #255	; 0xff
    5244:	d01e      	beq.n	5284 <__gesf2+0x58>
    5246:	28ff      	cmp	r0, #255	; 0xff
    5248:	d021      	beq.n	528e <__gesf2+0x62>
    524a:	2a00      	cmp	r2, #0
    524c:	d10a      	bne.n	5264 <__gesf2+0x38>
    524e:	426e      	negs	r6, r5
    5250:	416e      	adcs	r6, r5
    5252:	b2f6      	uxtb	r6, r6
    5254:	2800      	cmp	r0, #0
    5256:	d10f      	bne.n	5278 <__gesf2+0x4c>
    5258:	2c00      	cmp	r4, #0
    525a:	d10d      	bne.n	5278 <__gesf2+0x4c>
    525c:	2000      	movs	r0, #0
    525e:	2d00      	cmp	r5, #0
    5260:	d009      	beq.n	5276 <__gesf2+0x4a>
    5262:	e005      	b.n	5270 <__gesf2+0x44>
    5264:	2800      	cmp	r0, #0
    5266:	d101      	bne.n	526c <__gesf2+0x40>
    5268:	2c00      	cmp	r4, #0
    526a:	d001      	beq.n	5270 <__gesf2+0x44>
    526c:	428b      	cmp	r3, r1
    526e:	d011      	beq.n	5294 <__gesf2+0x68>
    5270:	2101      	movs	r1, #1
    5272:	4258      	negs	r0, r3
    5274:	4308      	orrs	r0, r1
    5276:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5278:	2e00      	cmp	r6, #0
    527a:	d0f7      	beq.n	526c <__gesf2+0x40>
    527c:	2001      	movs	r0, #1
    527e:	3901      	subs	r1, #1
    5280:	4308      	orrs	r0, r1
    5282:	e7f8      	b.n	5276 <__gesf2+0x4a>
    5284:	2d00      	cmp	r5, #0
    5286:	d0de      	beq.n	5246 <__gesf2+0x1a>
    5288:	2002      	movs	r0, #2
    528a:	4240      	negs	r0, r0
    528c:	e7f3      	b.n	5276 <__gesf2+0x4a>
    528e:	2c00      	cmp	r4, #0
    5290:	d0db      	beq.n	524a <__gesf2+0x1e>
    5292:	e7f9      	b.n	5288 <__gesf2+0x5c>
    5294:	4282      	cmp	r2, r0
    5296:	dceb      	bgt.n	5270 <__gesf2+0x44>
    5298:	db04      	blt.n	52a4 <__gesf2+0x78>
    529a:	42a5      	cmp	r5, r4
    529c:	d8e8      	bhi.n	5270 <__gesf2+0x44>
    529e:	2000      	movs	r0, #0
    52a0:	42a5      	cmp	r5, r4
    52a2:	d2e8      	bcs.n	5276 <__gesf2+0x4a>
    52a4:	2101      	movs	r1, #1
    52a6:	1e58      	subs	r0, r3, #1
    52a8:	4308      	orrs	r0, r1
    52aa:	e7e4      	b.n	5276 <__gesf2+0x4a>

000052ac <__lesf2>:
    52ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    52ae:	0042      	lsls	r2, r0, #1
    52b0:	024d      	lsls	r5, r1, #9
    52b2:	004c      	lsls	r4, r1, #1
    52b4:	0246      	lsls	r6, r0, #9
    52b6:	0a76      	lsrs	r6, r6, #9
    52b8:	0e12      	lsrs	r2, r2, #24
    52ba:	0fc3      	lsrs	r3, r0, #31
    52bc:	0a6d      	lsrs	r5, r5, #9
    52be:	0e24      	lsrs	r4, r4, #24
    52c0:	0fc9      	lsrs	r1, r1, #31
    52c2:	2aff      	cmp	r2, #255	; 0xff
    52c4:	d016      	beq.n	52f4 <__lesf2+0x48>
    52c6:	2cff      	cmp	r4, #255	; 0xff
    52c8:	d018      	beq.n	52fc <__lesf2+0x50>
    52ca:	2a00      	cmp	r2, #0
    52cc:	d10a      	bne.n	52e4 <__lesf2+0x38>
    52ce:	4270      	negs	r0, r6
    52d0:	4170      	adcs	r0, r6
    52d2:	b2c0      	uxtb	r0, r0
    52d4:	2c00      	cmp	r4, #0
    52d6:	d015      	beq.n	5304 <__lesf2+0x58>
    52d8:	2800      	cmp	r0, #0
    52da:	d005      	beq.n	52e8 <__lesf2+0x3c>
    52dc:	2001      	movs	r0, #1
    52de:	3901      	subs	r1, #1
    52e0:	4308      	orrs	r0, r1
    52e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52e4:	2c00      	cmp	r4, #0
    52e6:	d013      	beq.n	5310 <__lesf2+0x64>
    52e8:	4299      	cmp	r1, r3
    52ea:	d014      	beq.n	5316 <__lesf2+0x6a>
    52ec:	2001      	movs	r0, #1
    52ee:	425b      	negs	r3, r3
    52f0:	4318      	orrs	r0, r3
    52f2:	e7f6      	b.n	52e2 <__lesf2+0x36>
    52f4:	2002      	movs	r0, #2
    52f6:	2e00      	cmp	r6, #0
    52f8:	d1f3      	bne.n	52e2 <__lesf2+0x36>
    52fa:	e7e4      	b.n	52c6 <__lesf2+0x1a>
    52fc:	2002      	movs	r0, #2
    52fe:	2d00      	cmp	r5, #0
    5300:	d1ef      	bne.n	52e2 <__lesf2+0x36>
    5302:	e7e2      	b.n	52ca <__lesf2+0x1e>
    5304:	2d00      	cmp	r5, #0
    5306:	d1e7      	bne.n	52d8 <__lesf2+0x2c>
    5308:	2000      	movs	r0, #0
    530a:	2e00      	cmp	r6, #0
    530c:	d0e9      	beq.n	52e2 <__lesf2+0x36>
    530e:	e7ed      	b.n	52ec <__lesf2+0x40>
    5310:	2d00      	cmp	r5, #0
    5312:	d1e9      	bne.n	52e8 <__lesf2+0x3c>
    5314:	e7ea      	b.n	52ec <__lesf2+0x40>
    5316:	42a2      	cmp	r2, r4
    5318:	dc06      	bgt.n	5328 <__lesf2+0x7c>
    531a:	dbdf      	blt.n	52dc <__lesf2+0x30>
    531c:	42ae      	cmp	r6, r5
    531e:	d803      	bhi.n	5328 <__lesf2+0x7c>
    5320:	2000      	movs	r0, #0
    5322:	42ae      	cmp	r6, r5
    5324:	d3da      	bcc.n	52dc <__lesf2+0x30>
    5326:	e7dc      	b.n	52e2 <__lesf2+0x36>
    5328:	2001      	movs	r0, #1
    532a:	4249      	negs	r1, r1
    532c:	4308      	orrs	r0, r1
    532e:	e7d8      	b.n	52e2 <__lesf2+0x36>

00005330 <__eqdf2>:
    5330:	b5f0      	push	{r4, r5, r6, r7, lr}
    5332:	464f      	mov	r7, r9
    5334:	4646      	mov	r6, r8
    5336:	46d6      	mov	lr, sl
    5338:	005c      	lsls	r4, r3, #1
    533a:	b5c0      	push	{r6, r7, lr}
    533c:	031f      	lsls	r7, r3, #12
    533e:	0fdb      	lsrs	r3, r3, #31
    5340:	469a      	mov	sl, r3
    5342:	4b17      	ldr	r3, [pc, #92]	; (53a0 <__eqdf2+0x70>)
    5344:	030e      	lsls	r6, r1, #12
    5346:	004d      	lsls	r5, r1, #1
    5348:	4684      	mov	ip, r0
    534a:	4680      	mov	r8, r0
    534c:	0b36      	lsrs	r6, r6, #12
    534e:	0d6d      	lsrs	r5, r5, #21
    5350:	0fc9      	lsrs	r1, r1, #31
    5352:	4691      	mov	r9, r2
    5354:	0b3f      	lsrs	r7, r7, #12
    5356:	0d64      	lsrs	r4, r4, #21
    5358:	2001      	movs	r0, #1
    535a:	429d      	cmp	r5, r3
    535c:	d008      	beq.n	5370 <__eqdf2+0x40>
    535e:	429c      	cmp	r4, r3
    5360:	d001      	beq.n	5366 <__eqdf2+0x36>
    5362:	42a5      	cmp	r5, r4
    5364:	d00b      	beq.n	537e <__eqdf2+0x4e>
    5366:	bc1c      	pop	{r2, r3, r4}
    5368:	4690      	mov	r8, r2
    536a:	4699      	mov	r9, r3
    536c:	46a2      	mov	sl, r4
    536e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5370:	4663      	mov	r3, ip
    5372:	4333      	orrs	r3, r6
    5374:	d1f7      	bne.n	5366 <__eqdf2+0x36>
    5376:	42ac      	cmp	r4, r5
    5378:	d1f5      	bne.n	5366 <__eqdf2+0x36>
    537a:	433a      	orrs	r2, r7
    537c:	d1f3      	bne.n	5366 <__eqdf2+0x36>
    537e:	2001      	movs	r0, #1
    5380:	42be      	cmp	r6, r7
    5382:	d1f0      	bne.n	5366 <__eqdf2+0x36>
    5384:	45c8      	cmp	r8, r9
    5386:	d1ee      	bne.n	5366 <__eqdf2+0x36>
    5388:	4551      	cmp	r1, sl
    538a:	d007      	beq.n	539c <__eqdf2+0x6c>
    538c:	2d00      	cmp	r5, #0
    538e:	d1ea      	bne.n	5366 <__eqdf2+0x36>
    5390:	4663      	mov	r3, ip
    5392:	431e      	orrs	r6, r3
    5394:	0030      	movs	r0, r6
    5396:	1e46      	subs	r6, r0, #1
    5398:	41b0      	sbcs	r0, r6
    539a:	e7e4      	b.n	5366 <__eqdf2+0x36>
    539c:	2000      	movs	r0, #0
    539e:	e7e2      	b.n	5366 <__eqdf2+0x36>
    53a0:	000007ff 	.word	0x000007ff

000053a4 <__gedf2>:
    53a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    53a6:	4645      	mov	r5, r8
    53a8:	46de      	mov	lr, fp
    53aa:	4657      	mov	r7, sl
    53ac:	464e      	mov	r6, r9
    53ae:	b5e0      	push	{r5, r6, r7, lr}
    53b0:	031f      	lsls	r7, r3, #12
    53b2:	0b3d      	lsrs	r5, r7, #12
    53b4:	4f2c      	ldr	r7, [pc, #176]	; (5468 <__gedf2+0xc4>)
    53b6:	030e      	lsls	r6, r1, #12
    53b8:	004c      	lsls	r4, r1, #1
    53ba:	46ab      	mov	fp, r5
    53bc:	005d      	lsls	r5, r3, #1
    53be:	4684      	mov	ip, r0
    53c0:	0b36      	lsrs	r6, r6, #12
    53c2:	0d64      	lsrs	r4, r4, #21
    53c4:	0fc9      	lsrs	r1, r1, #31
    53c6:	4690      	mov	r8, r2
    53c8:	0d6d      	lsrs	r5, r5, #21
    53ca:	0fdb      	lsrs	r3, r3, #31
    53cc:	42bc      	cmp	r4, r7
    53ce:	d02a      	beq.n	5426 <__gedf2+0x82>
    53d0:	4f25      	ldr	r7, [pc, #148]	; (5468 <__gedf2+0xc4>)
    53d2:	42bd      	cmp	r5, r7
    53d4:	d02d      	beq.n	5432 <__gedf2+0x8e>
    53d6:	2c00      	cmp	r4, #0
    53d8:	d10f      	bne.n	53fa <__gedf2+0x56>
    53da:	4330      	orrs	r0, r6
    53dc:	0007      	movs	r7, r0
    53de:	4681      	mov	r9, r0
    53e0:	4278      	negs	r0, r7
    53e2:	4178      	adcs	r0, r7
    53e4:	b2c0      	uxtb	r0, r0
    53e6:	2d00      	cmp	r5, #0
    53e8:	d117      	bne.n	541a <__gedf2+0x76>
    53ea:	465f      	mov	r7, fp
    53ec:	433a      	orrs	r2, r7
    53ee:	d114      	bne.n	541a <__gedf2+0x76>
    53f0:	464b      	mov	r3, r9
    53f2:	2000      	movs	r0, #0
    53f4:	2b00      	cmp	r3, #0
    53f6:	d00a      	beq.n	540e <__gedf2+0x6a>
    53f8:	e006      	b.n	5408 <__gedf2+0x64>
    53fa:	2d00      	cmp	r5, #0
    53fc:	d102      	bne.n	5404 <__gedf2+0x60>
    53fe:	4658      	mov	r0, fp
    5400:	4302      	orrs	r2, r0
    5402:	d001      	beq.n	5408 <__gedf2+0x64>
    5404:	4299      	cmp	r1, r3
    5406:	d018      	beq.n	543a <__gedf2+0x96>
    5408:	4248      	negs	r0, r1
    540a:	2101      	movs	r1, #1
    540c:	4308      	orrs	r0, r1
    540e:	bc3c      	pop	{r2, r3, r4, r5}
    5410:	4690      	mov	r8, r2
    5412:	4699      	mov	r9, r3
    5414:	46a2      	mov	sl, r4
    5416:	46ab      	mov	fp, r5
    5418:	bdf0      	pop	{r4, r5, r6, r7, pc}
    541a:	2800      	cmp	r0, #0
    541c:	d0f2      	beq.n	5404 <__gedf2+0x60>
    541e:	2001      	movs	r0, #1
    5420:	3b01      	subs	r3, #1
    5422:	4318      	orrs	r0, r3
    5424:	e7f3      	b.n	540e <__gedf2+0x6a>
    5426:	0037      	movs	r7, r6
    5428:	4307      	orrs	r7, r0
    542a:	d0d1      	beq.n	53d0 <__gedf2+0x2c>
    542c:	2002      	movs	r0, #2
    542e:	4240      	negs	r0, r0
    5430:	e7ed      	b.n	540e <__gedf2+0x6a>
    5432:	465f      	mov	r7, fp
    5434:	4317      	orrs	r7, r2
    5436:	d0ce      	beq.n	53d6 <__gedf2+0x32>
    5438:	e7f8      	b.n	542c <__gedf2+0x88>
    543a:	42ac      	cmp	r4, r5
    543c:	dce4      	bgt.n	5408 <__gedf2+0x64>
    543e:	da03      	bge.n	5448 <__gedf2+0xa4>
    5440:	1e48      	subs	r0, r1, #1
    5442:	2101      	movs	r1, #1
    5444:	4308      	orrs	r0, r1
    5446:	e7e2      	b.n	540e <__gedf2+0x6a>
    5448:	455e      	cmp	r6, fp
    544a:	d8dd      	bhi.n	5408 <__gedf2+0x64>
    544c:	d006      	beq.n	545c <__gedf2+0xb8>
    544e:	2000      	movs	r0, #0
    5450:	455e      	cmp	r6, fp
    5452:	d2dc      	bcs.n	540e <__gedf2+0x6a>
    5454:	2301      	movs	r3, #1
    5456:	1e48      	subs	r0, r1, #1
    5458:	4318      	orrs	r0, r3
    545a:	e7d8      	b.n	540e <__gedf2+0x6a>
    545c:	45c4      	cmp	ip, r8
    545e:	d8d3      	bhi.n	5408 <__gedf2+0x64>
    5460:	2000      	movs	r0, #0
    5462:	45c4      	cmp	ip, r8
    5464:	d3f6      	bcc.n	5454 <__gedf2+0xb0>
    5466:	e7d2      	b.n	540e <__gedf2+0x6a>
    5468:	000007ff 	.word	0x000007ff

0000546c <__ledf2>:
    546c:	b5f0      	push	{r4, r5, r6, r7, lr}
    546e:	464e      	mov	r6, r9
    5470:	4645      	mov	r5, r8
    5472:	46de      	mov	lr, fp
    5474:	4657      	mov	r7, sl
    5476:	005c      	lsls	r4, r3, #1
    5478:	b5e0      	push	{r5, r6, r7, lr}
    547a:	031f      	lsls	r7, r3, #12
    547c:	0fdb      	lsrs	r3, r3, #31
    547e:	4699      	mov	r9, r3
    5480:	4b2a      	ldr	r3, [pc, #168]	; (552c <__ledf2+0xc0>)
    5482:	030e      	lsls	r6, r1, #12
    5484:	004d      	lsls	r5, r1, #1
    5486:	0fc9      	lsrs	r1, r1, #31
    5488:	4684      	mov	ip, r0
    548a:	0b36      	lsrs	r6, r6, #12
    548c:	0d6d      	lsrs	r5, r5, #21
    548e:	468b      	mov	fp, r1
    5490:	4690      	mov	r8, r2
    5492:	0b3f      	lsrs	r7, r7, #12
    5494:	0d64      	lsrs	r4, r4, #21
    5496:	429d      	cmp	r5, r3
    5498:	d020      	beq.n	54dc <__ledf2+0x70>
    549a:	4b24      	ldr	r3, [pc, #144]	; (552c <__ledf2+0xc0>)
    549c:	429c      	cmp	r4, r3
    549e:	d022      	beq.n	54e6 <__ledf2+0x7a>
    54a0:	2d00      	cmp	r5, #0
    54a2:	d112      	bne.n	54ca <__ledf2+0x5e>
    54a4:	4330      	orrs	r0, r6
    54a6:	4243      	negs	r3, r0
    54a8:	4143      	adcs	r3, r0
    54aa:	b2db      	uxtb	r3, r3
    54ac:	2c00      	cmp	r4, #0
    54ae:	d01f      	beq.n	54f0 <__ledf2+0x84>
    54b0:	2b00      	cmp	r3, #0
    54b2:	d00c      	beq.n	54ce <__ledf2+0x62>
    54b4:	464b      	mov	r3, r9
    54b6:	2001      	movs	r0, #1
    54b8:	3b01      	subs	r3, #1
    54ba:	4303      	orrs	r3, r0
    54bc:	0018      	movs	r0, r3
    54be:	bc3c      	pop	{r2, r3, r4, r5}
    54c0:	4690      	mov	r8, r2
    54c2:	4699      	mov	r9, r3
    54c4:	46a2      	mov	sl, r4
    54c6:	46ab      	mov	fp, r5
    54c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54ca:	2c00      	cmp	r4, #0
    54cc:	d016      	beq.n	54fc <__ledf2+0x90>
    54ce:	45cb      	cmp	fp, r9
    54d0:	d017      	beq.n	5502 <__ledf2+0x96>
    54d2:	465b      	mov	r3, fp
    54d4:	4259      	negs	r1, r3
    54d6:	2301      	movs	r3, #1
    54d8:	430b      	orrs	r3, r1
    54da:	e7ef      	b.n	54bc <__ledf2+0x50>
    54dc:	0031      	movs	r1, r6
    54de:	2302      	movs	r3, #2
    54e0:	4301      	orrs	r1, r0
    54e2:	d1eb      	bne.n	54bc <__ledf2+0x50>
    54e4:	e7d9      	b.n	549a <__ledf2+0x2e>
    54e6:	0039      	movs	r1, r7
    54e8:	2302      	movs	r3, #2
    54ea:	4311      	orrs	r1, r2
    54ec:	d1e6      	bne.n	54bc <__ledf2+0x50>
    54ee:	e7d7      	b.n	54a0 <__ledf2+0x34>
    54f0:	433a      	orrs	r2, r7
    54f2:	d1dd      	bne.n	54b0 <__ledf2+0x44>
    54f4:	2300      	movs	r3, #0
    54f6:	2800      	cmp	r0, #0
    54f8:	d0e0      	beq.n	54bc <__ledf2+0x50>
    54fa:	e7ea      	b.n	54d2 <__ledf2+0x66>
    54fc:	433a      	orrs	r2, r7
    54fe:	d1e6      	bne.n	54ce <__ledf2+0x62>
    5500:	e7e7      	b.n	54d2 <__ledf2+0x66>
    5502:	42a5      	cmp	r5, r4
    5504:	dce5      	bgt.n	54d2 <__ledf2+0x66>
    5506:	db05      	blt.n	5514 <__ledf2+0xa8>
    5508:	42be      	cmp	r6, r7
    550a:	d8e2      	bhi.n	54d2 <__ledf2+0x66>
    550c:	d007      	beq.n	551e <__ledf2+0xb2>
    550e:	2300      	movs	r3, #0
    5510:	42be      	cmp	r6, r7
    5512:	d2d3      	bcs.n	54bc <__ledf2+0x50>
    5514:	4659      	mov	r1, fp
    5516:	2301      	movs	r3, #1
    5518:	3901      	subs	r1, #1
    551a:	430b      	orrs	r3, r1
    551c:	e7ce      	b.n	54bc <__ledf2+0x50>
    551e:	45c4      	cmp	ip, r8
    5520:	d8d7      	bhi.n	54d2 <__ledf2+0x66>
    5522:	2300      	movs	r3, #0
    5524:	45c4      	cmp	ip, r8
    5526:	d3f5      	bcc.n	5514 <__ledf2+0xa8>
    5528:	e7c8      	b.n	54bc <__ledf2+0x50>
    552a:	46c0      	nop			; (mov r8, r8)
    552c:	000007ff 	.word	0x000007ff

00005530 <__libc_init_array>:
    5530:	b570      	push	{r4, r5, r6, lr}
    5532:	2600      	movs	r6, #0
    5534:	4d0c      	ldr	r5, [pc, #48]	; (5568 <__libc_init_array+0x38>)
    5536:	4c0d      	ldr	r4, [pc, #52]	; (556c <__libc_init_array+0x3c>)
    5538:	1b64      	subs	r4, r4, r5
    553a:	10a4      	asrs	r4, r4, #2
    553c:	42a6      	cmp	r6, r4
    553e:	d109      	bne.n	5554 <__libc_init_array+0x24>
    5540:	2600      	movs	r6, #0
    5542:	f000 f9f5 	bl	5930 <_init>
    5546:	4d0a      	ldr	r5, [pc, #40]	; (5570 <__libc_init_array+0x40>)
    5548:	4c0a      	ldr	r4, [pc, #40]	; (5574 <__libc_init_array+0x44>)
    554a:	1b64      	subs	r4, r4, r5
    554c:	10a4      	asrs	r4, r4, #2
    554e:	42a6      	cmp	r6, r4
    5550:	d105      	bne.n	555e <__libc_init_array+0x2e>
    5552:	bd70      	pop	{r4, r5, r6, pc}
    5554:	00b3      	lsls	r3, r6, #2
    5556:	58eb      	ldr	r3, [r5, r3]
    5558:	4798      	blx	r3
    555a:	3601      	adds	r6, #1
    555c:	e7ee      	b.n	553c <__libc_init_array+0xc>
    555e:	00b3      	lsls	r3, r6, #2
    5560:	58eb      	ldr	r3, [r5, r3]
    5562:	4798      	blx	r3
    5564:	3601      	adds	r6, #1
    5566:	e7f2      	b.n	554e <__libc_init_array+0x1e>
    5568:	0000593c 	.word	0x0000593c
    556c:	0000593c 	.word	0x0000593c
    5570:	0000593c 	.word	0x0000593c
    5574:	00005940 	.word	0x00005940

00005578 <memcpy>:
    5578:	2300      	movs	r3, #0
    557a:	b510      	push	{r4, lr}
    557c:	429a      	cmp	r2, r3
    557e:	d100      	bne.n	5582 <memcpy+0xa>
    5580:	bd10      	pop	{r4, pc}
    5582:	5ccc      	ldrb	r4, [r1, r3]
    5584:	54c4      	strb	r4, [r0, r3]
    5586:	3301      	adds	r3, #1
    5588:	e7f8      	b.n	557c <memcpy+0x4>
    558a:	0000      	movs	r0, r0
    558c:	000002e8 	.word	0x000002e8
    5590:	00000532 	.word	0x00000532
    5594:	00000532 	.word	0x00000532
    5598:	00000532 	.word	0x00000532
    559c:	00000532 	.word	0x00000532
    55a0:	00000532 	.word	0x00000532
    55a4:	00000532 	.word	0x00000532
    55a8:	00000532 	.word	0x00000532
    55ac:	00000532 	.word	0x00000532
    55b0:	00000532 	.word	0x00000532
    55b4:	00000532 	.word	0x00000532
    55b8:	00000532 	.word	0x00000532
    55bc:	00000532 	.word	0x00000532
    55c0:	00000532 	.word	0x00000532
    55c4:	00000532 	.word	0x00000532
    55c8:	00000532 	.word	0x00000532
    55cc:	000002d0 	.word	0x000002d0
    55d0:	00000532 	.word	0x00000532
    55d4:	00000532 	.word	0x00000532
    55d8:	00000532 	.word	0x00000532
    55dc:	00000532 	.word	0x00000532
    55e0:	00000532 	.word	0x00000532
    55e4:	00000532 	.word	0x00000532
    55e8:	00000532 	.word	0x00000532
    55ec:	00000532 	.word	0x00000532
    55f0:	00000532 	.word	0x00000532
    55f4:	00000532 	.word	0x00000532
    55f8:	00000532 	.word	0x00000532
    55fc:	00000532 	.word	0x00000532
    5600:	00000532 	.word	0x00000532
    5604:	00000532 	.word	0x00000532
    5608:	00000532 	.word	0x00000532
    560c:	000002e0 	.word	0x000002e0
    5610:	00000532 	.word	0x00000532
    5614:	00000532 	.word	0x00000532
    5618:	00000532 	.word	0x00000532
    561c:	00000532 	.word	0x00000532
    5620:	00000532 	.word	0x00000532
    5624:	00000532 	.word	0x00000532
    5628:	00000532 	.word	0x00000532
    562c:	00000532 	.word	0x00000532
    5630:	00000532 	.word	0x00000532
    5634:	00000532 	.word	0x00000532
    5638:	00000532 	.word	0x00000532
    563c:	00000532 	.word	0x00000532
    5640:	00000532 	.word	0x00000532
    5644:	00000532 	.word	0x00000532
    5648:	00000532 	.word	0x00000532
    564c:	000002d8 	.word	0x000002d8
    5650:	000002f0 	.word	0x000002f0
    5654:	000002b8 	.word	0x000002b8
    5658:	000002c8 	.word	0x000002c8
    565c:	000002c0 	.word	0x000002c0
    5660:	00000002 	.word	0x00000002
    5664:	00000003 	.word	0x00000003
    5668:	00000028 	.word	0x00000028
    566c:	00000029 	.word	0x00000029
    5670:	00000004 	.word	0x00000004
    5674:	00000005 	.word	0x00000005
    5678:	00000006 	.word	0x00000006
    567c:	00000007 	.word	0x00000007
    5680:	00000020 	.word	0x00000020
    5684:	00000021 	.word	0x00000021
    5688:	00000022 	.word	0x00000022
    568c:	00000023 	.word	0x00000023
    5690:	00000024 	.word	0x00000024
    5694:	00000025 	.word	0x00000025
    5698:	00000026 	.word	0x00000026
    569c:	00000027 	.word	0x00000027
    56a0:	00000008 	.word	0x00000008
    56a4:	00000009 	.word	0x00000009
    56a8:	0000000a 	.word	0x0000000a
    56ac:	0000000b 	.word	0x0000000b
    56b0:	0000ffff 	.word	0x0000ffff
    56b4:	0000ffff 	.word	0x0000ffff
    56b8:	0000ffff 	.word	0x0000ffff
    56bc:	0000ffff 	.word	0x0000ffff
    56c0:	42000000 	.word	0x42000000
    56c4:	42000400 	.word	0x42000400
    56c8:	42000800 	.word	0x42000800
    56cc:	42000c00 	.word	0x42000c00
    56d0:	42001000 	.word	0x42001000
    56d4:	43000400 	.word	0x43000400
    56d8:	0000114a 	.word	0x0000114a
    56dc:	00001146 	.word	0x00001146
    56e0:	00001146 	.word	0x00001146
    56e4:	000011ac 	.word	0x000011ac
    56e8:	000011ac 	.word	0x000011ac
    56ec:	00001160 	.word	0x00001160
    56f0:	00001150 	.word	0x00001150
    56f4:	00001166 	.word	0x00001166
    56f8:	0000119a 	.word	0x0000119a

000056fc <_tcc_apbcmasks>:
    56fc:	00000020 00000040 00000080               ...@.......

00005708 <_tcc_cc_nums>:
    5708:	00020204                                ....

0000570c <_tcc_gclk_ids>:
    570c:	001a1919                                ....

00005710 <_tcc_maxs>:
    5710:	00ffffff 00ffffff 0000ffff              ............

0000571c <_tcc_ow_nums>:
    571c:	00020408                                ....

00005720 <_tcc_intflag>:
    5720:	00000001 00000002 00000004 00000008     ................
    5730:	00001000 00002000 00004000 00008000     ..... ...@......
    5740:	00010000 00020000 00040000 00080000     ................

00005750 <tcc_interrupt_vectors.13661>:
    5750:	00100f0e 00001e8e 00001f84 00001f8e     ................
    5760:	00001f98 00001fa2 00001fd4 00001fde     ................
    5770:	00001fe8 00001ff2 00001ffc 42002000     ............. .B
    5780:	42002400 42002800 42002c00 43000800     .$.B.(.B.,.B...C
    5790:	00000002 00000100 00000002 00000200     ................
    57a0:	00000002 00000400 00000002 00000800     ................
    57b0:	00000003 00000004 00002352 0000239a     ........R#...#..
    57c0:	000023a2 000023aa 000023b2 000023ba     .#...#...#...#..
    57d0:	000023c2 000023ca 000023d2 000023da     .#...#...#...#..
    57e0:	00002548 000025c2 000025c8 000025ea     H%...%...%...%..
    57f0:	0000263e 00002652 00002660 0000266e     >&..R&..`&..n&..
    5800:	0000267c 00002698 000026ba 000026ce     |&...&...&...&..
    5810:	000026dc 000026ea 000026fe 000027b2     .&...&...&...'..
    5820:	0000271a 0000272e 0000273c 00002782     .'...'..<'...'..
    5830:	00002c68 00002b44 00002b66 00002b8e     h,..D+..f+...+..
    5840:	00002bb6 00002bce 00002be6 00002bfe     .+...+...+...+..
    5850:	00002c08 00002c0e 00002c24 00002c32     .,...,..$,..2,..
    5860:	00002c3c 00002c46 00002c50 00002c5a     <,..F,..P,..Z,..
    5870:	00003278 000031c8 000031c8 000031c6     x2...1...1...1..
    5880:	0000326a 0000326a 00003260 000031c6     j2..j2..`2...1..
    5890:	0000326a 00003260 0000326a 000031c6     j2..`2..j2...1..
    58a0:	00003270 00003270 00003270 00003300     p2..p2..p2...3..
    58b0:	00003fbc 00003f9e 00003f58 00003e76     .?...?..X?..v>..
    58c0:	00003f58 00003f90 00003f58 00003e76     X?...?..X?..v>..
    58d0:	00003f9e 00003f9e 00003f90 00003e76     .?...?...?..v>..
    58e0:	00003e6e 00003e6e 00003e6e 000041d4     n>..n>..n>...A..
    58f0:	0000461c 000044dc 000044dc 000044d8     .F...D...D...D..
    5900:	000045f4 000045f4 000045e6 000044d8     .E...E...E...D..
    5910:	000045f4 000045e6 000045f4 000044d8     .E...E...E...D..
    5920:	000045fc 000045fc 000045fc 00004800     .E...E...E...H..

00005930 <_init>:
    5930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5932:	46c0      	nop			; (mov r8, r8)
    5934:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5936:	bc08      	pop	{r3}
    5938:	469e      	mov	lr, r3
    593a:	4770      	bx	lr

0000593c <__init_array_start>:
    593c:	000000dd 	.word	0x000000dd

00005940 <_fini>:
    5940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5942:	46c0      	nop			; (mov r8, r8)
    5944:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5946:	bc08      	pop	{r3}
    5948:	469e      	mov	lr, r3
    594a:	4770      	bx	lr

0000594c <__fini_array_start>:
    594c:	000000b5 	.word	0x000000b5
